[["index.html", "Statistical Foundations Preface", " Statistical Foundations Preface Structure of the book The book is broken down into small sections that aim to demonstrate a single concept at a time. Chapter ?? introduces the basic components of R, and how you can assign values to variables. This book is a work in progress. Submit any issues here. Please check back for frequent updates. About the Authors Acknowledgements The author would like to thank the members of the faculty and the TAs at the Institute who provided feedback on this work. "],["eda.html", "Chapter 1 Exploratory Data Analysis (EDA)", " Chapter 1 Exploratory Data Analysis (EDA) The crucial first step to any data science problem is exploratory data analysis (EDA). Before you attempt to run any models, or jump towards any formal statistical analysis, you must explore your data. Many unexpected frustrations arise when exploratory analysis is overlooked; knowing your data is critical to your ability to make necessary assumptions about it. This preliminary analysis will help inform our decisions for data manipulation, give us a base-level understanding of our variables and the relationships between them, and help determine which statistical analyses might be appropriate for the questions we are trying to answer. Some of the questions we aim to answer through exploratory analysis are: What kind of variables to you have? Continuous Nominal Ordinal How are the attributes stored? Strings Integers Floats/Numeric Dates What do their distributions look like? Center/Location Spread Shape Are there any anomolies? Outliers Leverage points Missing values Low-frequency categories We will maintain an example data set throughout this text to demonstrate the various tools and techniques being discussed. It is a real-estate data set that contains the sale_price and physical attributes of nearly 3,000 homes in Ames, Iowa in the early 2000s. To access this data, we first install the AmesHousing package, add it to our library and create the nicely formatted data with the make_ames() function. install.packages(&quot;AmesHousing&quot;) library(AmesHousing) ames &lt;- make_ames() str(ames) "],["vartypes.html", "1.1 Types of Variables", " 1.1 Types of Variables The columns of a data set are referred to by a number of equivalent terms: Variables Features Attributes Predictors/Targets Factors Inputs/Outputs This book may use any of these words interchangeably to refer to a quality or quantity of interest in our data. 1.1.1 Nominal Variables A nominal or categorical variable is a quality of interest whose values have no logical ordering. Color (“blue”, “red”, “green”…), ethnicity (“African-American”, “Asian”, “Caucasian”,…), and style of house (“ranch”, “two-story”, “duplex”, …) are all examples of nominal attributes. The categories or values that these variables can take on - those words listed in quotes and parenthesis - are called the levels of the variable. In modeling, nominal attributes are commonly transformed into dummy variables. Dummy variables are binary columns that indicate the presence or absence of a quality. There is more than one way to create dummy variables, and the treatment will be different depending on what type of model you are using. Linear regression models will use either reference-level or effects coding, whereas other machine learning models are more likely to use one-hot encoding or a variation thereof. One-hot encoding For machine learning applications, it is common to create a binary dummy column for each level of your categorical variable. This is the most intuitive representation of categorical information, answering indicative questions for each level of the variable: “is it blue?”, “is it red?” etc. The table below gives an example of some data, the original nominal variable (color) and the one-hot encoded color information. Observation Color Blue Red Yellow Other 1 Blue 1 0 0 0 2 Yellow 0 0 1 0 3 Blue 1 0 0 0 4 Red 0 1 0 0 5 Red 0 1 0 0 6 Blue 1 0 0 0 7 Yellow 0 0 1 0 8 Other 0 0 0 1 Table 1.1: One-hot dummy variable coding for the categorical attribute color We will demonstrate the creation of this data using some simple random categorical data: set.seed(41) data &lt;- data.frame(y = c(rnorm(10,2), rnorm(10,1),rnorm(10,0)), x1 = factor(rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each = 10)), x2 = factor(rep(c(&quot;Z&quot;, &quot;X&quot;, &quot;Y&quot;,&quot;W&quot;,&quot;V&quot;,&quot;U&quot;), each = 5))) View(data) Unlike reference and effects coding, which are typically specified within the lm() function as we will see in Chapter 2, one-hot encoding is most quickly achieved through use of the onehot package in R, which first creates an “encoder” to do the job quickly. The speed of this function has been tested against both the base R model.matrix() function and the dummyVars() function in the caret package and is substantially faster than either. install.packages(&quot;onehot&quot;) library(onehot) encoder = onehot(data) dummies = predict(encoder,data) head(dummies) ## y x1=A x1=B x1=C x2=U x2=V x2=W x2=X x2=Y x2=Z ## [1,] 1.205632 1 0 0 0 0 0 0 0 1 ## [2,] 2.197258 1 0 0 0 0 0 0 0 1 ## [3,] 3.001704 1 0 0 0 0 0 0 0 1 ## [4,] 3.288825 1 0 0 0 0 0 0 0 1 ## [5,] 2.905753 1 0 0 0 0 0 0 0 1 ## [6,] 2.493667 1 0 0 0 0 0 1 0 0 Reference-level coding Reference-level coding is similar to one-hot encoding except one of the levels of the attribute, called the reference level, is omitted. Notice that the 4 dummy columns from Table 1.1 collectively form a linearly dependent set; that is, if you know the values of 3 of the 4 dummy variables you can determine the \\(4^{th}\\) with complete certainty. This would be a problem for linear regression, where we assume our input attributes are not linearly dependent as we will discuss in Chapter 2. A reference level of the attribute is often specified by the user to be a particular level worthy of comparison (a baseline), as the regression output will be interpreted in a way that compares each non-reference level to the reference level. If a reference level is not specified by the user, one will be picked by the software by default either using the order in which the levels were encountered in the data, or their alphabetical ordering. Users should check the documentation of the associated function to understand what to expect. Table 1.2 transforms the one-hot encoding from Table 1.1 into reference-level coding with the color “blue” as the reference level. Notice the absence of the column indicating “blue” and how each blue observation exists as a row of zeros. Observation Color Red Yellow Other 1 Blue 0 0 0 2 Yellow 0 1 0 3 Blue 0 0 0 4 Red 1 0 0 5 Red 1 0 0 6 Blue 0 0 0 7 Yellow 0 1 0 8 Other 0 0 1 Table 1.2: Reference-level dummy variable coding for the categorical attribute color and the reference level of “blue” Effects coding Effects coding is useful for obtaining a more general comparative interpretation when you have approximately equal sample sizes across each level of your categorical attribute. Effects coding is designed to allow the user to compare each level to all the other levels. More specifically the mean of each level is compared to the overall mean of your data. However, the comparison is actually to the so-called grand mean, which is the mean of the means of each group. When sample sizes are equal, the grand mean and the overall sample mean are equivalent. When sample sizes are not equal, the parameter estimates for effects coding should not be used for interpretation or explanation. Effects coding still requires a reference level, however the purpose of the reference level is not the same as it was in reference-level coding. Here, the reference level is left out in the sense that no comparison is made between it and the overall mean. Table 1.3 shows our same example with effects coding. Again we notice the absence of the column indicating “blue” but now the reference level receives values of -1 rather than 0 for all 3 dummy columns. We will revisit the interpretation of linear regression coefficients under this coding scheme in Chapter 2. Observation Color Red Yellow Other 1 Blue -1 -1 -1 2 Yellow 0 1 0 3 Blue -1 -1 -1 4 Red 1 0 0 5 Red 1 0 0 6 Blue -1 -1 -1 7 Yellow 0 1 0 8 Other 0 0 1 Table 1.3: Effects coding for the categorical attribute color and the reference level of “blue” 1.1.2 Interval Variables An interval variable is a quantity of interest on which the mathematical operations of addition, subtraction, multiplication and division can be performed. Time, temperature and age are all examples of interval attributes. To illustrate the definition, note that “15 minutes” divided by “5 minutes” is 3, which indicates that 15 minutes is 3 times as long as 5 minutes. The sensible interpretation of this simple arithmetic sentence demonstrates the nature of interval attributes. One should note that such arithmetic would not make sense in the treatment of nominal variables. 1.1.3 Ordinal Variables Ordinal variables are attributes that are qualitative in nature but have some natural ordering. Level of education is a common example, with a level of ‘PhD’ indicating more education than ‘Bachelors’ but lacking a numerical framework to quantify how much more. The treatment of ordinal variables will depend on the application. Survey responses on a Likert scale are also ordinal - a response of 4=“somewhat agree” on a 1-to-5 scale of agreement cannot reliably be said to be twice as enthusiastic as a response of 2=“somewhat disagree”. These are not interval measurements, though they are often treated as such in a trade-off for computational efficiency. Ordinal variables will either be given some numeric value and treated as interval variables or they will be treated as categorical variables and dummy variables will be created. The choice of solution is up to the analyst. When numeric values are assigned to ordinal variables, the possibilities are many. For example, consider level of education. The simplest ordinal treatment for such an attribute might be something like: Level of Education Numeric Value No H.S. Diploma 1 H.S. Diploma or GED 2 Associates or Certificate 3 Bachelors 4 Graduate Certificate 5 Masters 6 PhD 7 While numeric values have been assigned and this data could be used like an interval attribute, it’s important to realize that the notion of a “one-unit-increase” is qualitative in nature rather than quantitative. However, if we’re interested in learning whether there is a linear type of relationship between education and another attribute (meaning as education level increases, the value of another attribute increases or decreases), this would be the path to get us there. However we’re making an assumption in this model that the difference between a H.S. Diploma and an Associates degree (a difference of “1 unit”) is the same as the difference between a Master’s degree and a PhD (also a difference of “1 unit”). These types of assumptions can be flawed, and it is often desirable to develop an alternative system of measurement based either on domain expertise or the target variable of interest. This is the notion behind optimal scaling and target-level encoding. Optimal Scaling Target-level Encoding "],["honest-assessment.html", "1.2 Honest Assessment", " 1.2 Honest Assessment When performing predictive modeling, we always divide our data into subsets for training, validation, and/or final testing. This is a concept that will be revisited several times throughout the introductory curriculum, highlighting its importance to honest assessment of models. There is no single right answer for how this division should occur for every data set - the answer depends on a multitude of factors that are beyond the scope of our present discussion. Generally speaking, one expects to keep about 70% of the data for model training purposes, and the remaining 30% for validation and testing. These proportions may change depending on the amount and of data available. If one has millions of observations, they can often get away with a much smaller proportion of training data to reduce computation time and increase confidence in validation. If one has substantially fewer observations, it may be necessary to increase the training proportion in order to build a sound model - trading validation confidence for proper training. Below we demonstrate two techniques for separating the data into just two subsets: training and test. These two subsets will suffice for our analyses in this text. We’ll use 70% of our data for the training set and the remainder for testing. Since we are taking a random sample, each time you run these functions you will get a different result. This can be difficult for team members who wish to keep their analyses in sync. To avoid that variation of results, we can provide a “seed” to the internal random number generation process, which ensures that the randomly generated output is the same to all who use that seed. Sampling via the tidyverse. This method requires the use of an id variable. If your data set has a unique identifier built in, you may omit the first line of code (after set.seed()) and use that unique identifier in the third line. library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.2 ✓ purrr 0.3.4 ## ✓ tibble 3.1.0 ✓ dplyr 1.0.2 ## ✓ tidyr 1.1.1 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() set.seed(123) ames &lt;- ames %&gt;% mutate(id = row_number()) train &lt;- ames %&gt;% sample_frac(0.7) test &lt;- anti_join(ames, train, by = &#39;id&#39;) dim(train) ## [1] 2051 82 dim(test) ## [1] 879 82 Sampling via old-fashioned local indexing. This method creates a logical vector (containing the values TRUE or FALSE) that indicates the training set observations. The opposite vector, !train_obs then indicates the test set. The benefit of this method is the storage of this vector that permanently identifies which observations were placed in the training set. set.seed(123) train_obs = sample(c(T,F), nrow(ames),replace=T, prob = c(70,30)) train = ames[train_obs, ] test = ames[!train_obs, ] dim(train) ## [1] 2049 82 dim(test) ## [1] 881 82 It’s important to note that even with the same seed, these two methods will not produce the same result as the randomization contained within them is fundamentally different. "],["distributions.html", "1.3 Distributions", " 1.3 Distributions After reviewing the types and formats of the data inputs, we move on to some basic univariate (one variable at a time) analysis. We start by describing the distribution of values that each variable takes on. For nominal variables, this amounts to frequency tables and bar charts of how often each level of the variable appears in the data set. We’ll begin by exploring one of our nominal features, Heating_QC which categorizes the quality and condition of a home’s heating system. ggplot(data = ames) + geom_bar(mapping = aes(x = Heating_QC)) Figure 1.1: Distribution of Nominal Variable Heating_QC To summon the same information in tabular form, we can use the count() function to create a table: ames %&gt;% count(Heating_QC) ## # A tibble: 5 x 2 ## Heating_QC n ## &lt;fct&gt; &lt;int&gt; ## 1 Excellent 1495 ## 2 Fair 92 ## 3 Good 476 ## 4 Poor 3 ## 5 Typical 864 You’ll notice that very few houses (3) have heating system in Poor condition, and the majority of houses have systems rated Excellent. It will likely make sense to combine the categories of Fair and Poor in our eventual analysis, a decision we will revisit later. Next we create a histogram for an interval attribute like Sale_Price: ggplot(data = ames) + geom_histogram(mapping = aes(x = Sale_Price/1000)) + labs(x = &quot;Sales Price (Thousands $)&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Figure 1.2: Distribution of Interval Variable Sale_Price From this initial inspection, we can conclude that most of the houses sell for less than $200,000 and there are a number of expensive anomalies. There are a number of more concrete ways that we can describe and quantify a statistical distribution; statistics that describe the location, spread, and shape of the data. Location The location of a distribution refers to the x-axis of a histogram like that in Figure ??. Where is most of the data located? The sample mean, median, and mode are the most common statistics of location, but percentiles and the interquartile range can also be seen in this light. We define each of these terms below for a variable \\(\\mathbf{x}\\) having n observations with values \\(\\{x_i\\}_{i=1}^n\\), sorted in order of magnitude such that \\(x_1 \\leq x_2 \\leq \\dots \\leq x_n\\): Mean: The average of the observations, \\(\\frac{1}{n}\\sum_{i=1}^n x_i\\) Median: The “middle value” of the data. Formally, when \\(n\\) is odd, the median is the observation value, \\(x_m = x_{\\frac{(n+1)}{2}}\\) for which \\(x_i &lt; x_m\\) for 50% of the observations (excluding \\(x_m\\)). When \\(n\\) is even, \\(x_m\\) is the average of \\(x_\\frac{n}{2}\\) and \\(x_{(\\frac{n}{2}+1)}\\). The median is also known as the \\(2^{nd}\\) quartile. Mode: The most commonly occurring value in the data. Most commonly used to describe nominal attributes. Percentiles: The 99 intermediate values of the data which divide the observations into 100 equally-sized groups. The \\(r^{th}\\) percentile of the data, \\(P_r\\) is the number for which \\(r\\%\\) of the data is less than \\(P_r\\). Quartiles: The quartiles of a variable are the \\(25^{th}\\), \\(50^{th}\\), and \\(75^{th}\\) percentiles. They are denoted as \\(Q_1\\) (\\(1^{st}\\) quartile), \\(Q_2\\) (\\(2^{nd}\\) quartile = median), and \\(Q_3\\) (\\(3^{rd}\\) quartile) respectively. Illustrative Example Suppose the following table contains the heights of 10 students randomly sampled from NC State’s campus. Compute the mean, median, mode and quartiles of this variable. height 60 62 63 65 67 67 67 68 68 69 Solution: The mean is (60+62+63+65+67+67+67+68+68+69)/10 = 65.6. The median (second quartile) is (67+67)/2 = 67. The mode is 67. The first quartile is (62+63)/2 = 62.5 The third quartile is (68+68)/2 = 68 Spread Once we have an understanding of where the bulk of the data is located, we move on to describing the spread (the dispersion or variation) of the data. Range, interquartile range, variance, and standard deviation are all statistics that describe spread. Range: The difference between the maximum and minimum data values. Interquartile range (IQR): The difference between the $25^{th} and 75^{th} percentiles. Sample variance: The sum of squared differences between each data point and the mean, divided by (n-1). \\(\\frac{1}{n-1}\\sum_{i=1}^n (x_i-\\bar{x})^2\\) Standard deviation: The square root of the sample variance. One should note that standard deviation is more frequently reported than variance because it shares the same units as the original data, and because of the guidance provided by the empirical rule described in ??. If we’re exploring something like Sale_Price, which has the unit “dollars”, then the variance would be measured in “square-dollars”, which hampers the intuition. Standard deviation, on the other hand, would share the unit “dollars”, aiding our fundamental understanding. Illustrative Example Let’s again use the table of heights, this time computing the range, IQR, sample variance and standard deviation. height 60 62 63 65 67 67 67 68 68 69 Solution: (60+62+63+65+67+67+67+68+68+69)/10 The range 69-60 = 9. The IQR is 68 - 62.5 = 5.5. The variance is ((60-65.6)^2+(62-65.6)^2+(63-65.6)^2+(65-65.6)^2+(67-65.6)^2+(67-65.6)^2+(67-65.6)^2+(68-65.6)^2+(68-65.6)^2+(69-65.6)^2)/9 = 8.933 The standard deviation is sqrt(8.933) = 2.989 Shape 1.3.1 Summary Functions There are many ways to obtain all of the statistics described in the preceding sections, below we highlight 3: The Hmisc package: install.packages(&#39;Hmisc&#39;) library(Hmisc) ## Loading required package: lattice ## Loading required package: survival ## Loading required package: Formula ## ## Attaching package: &#39;Hmisc&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## src, summarize ## The following objects are masked from &#39;package:base&#39;: ## ## format.pval, units Hmisc::describe(ames) ## ames ## ## 82 Variables 2930 Observations ## -------------------------------------------------------------------------------- ## MS_SubClass ## n missing distinct ## 2930 0 16 ## ## lowest : One_Story_1946_and_Newer_All_Styles One_Story_1945_and_Older One_Story_with_Finished_Attic_All_Ages One_and_Half_Story_Unfinished_All_Ages One_and_Half_Story_Finished_All_Ages ## highest: One_Story_PUD_1946_and_Newer One_and_Half_Story_PUD_All_Ages Two_Story_PUD_1946_and_Newer PUD_Multilevel_Split_Level_Foyer Two_Family_conversion_All_Styles_and_Ages ## -------------------------------------------------------------------------------- ## MS_Zoning ## n missing distinct ## 2930 0 7 ## ## lowest : Floating_Village_Residential Residential_High_Density Residential_Low_Density Residential_Medium_Density A_agr ## highest: Residential_Low_Density Residential_Medium_Density A_agr C_all I_all ## ## Floating_Village_Residential (139, 0.047), Residential_High_Density (27, ## 0.009), Residential_Low_Density (2273, 0.776), Residential_Medium_Density (462, ## 0.158), A_agr (2, 0.001), C_all (25, 0.009), I_all (2, 0.001) ## -------------------------------------------------------------------------------- ## Lot_Frontage ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 129 0.994 57.65 36.19 0.0 0.0 ## .25 .50 .75 .90 .95 ## 43.0 63.0 78.0 91.0 104.5 ## ## lowest : 0 21 22 24 25, highest: 174 182 195 200 313 ## -------------------------------------------------------------------------------- ## Lot_Area ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 1960 1 10148 5197 3188 4800 ## .25 .50 .75 .90 .95 ## 7440 9436 11555 14299 17131 ## ## lowest : 1300 1470 1476 1477 1484, highest: 70761 115149 159000 164660 215245 ## -------------------------------------------------------------------------------- ## Street ## n missing distinct ## 2930 0 2 ## ## Value Grvl Pave ## Frequency 12 2918 ## Proportion 0.004 0.996 ## -------------------------------------------------------------------------------- ## Alley ## n missing distinct ## 2930 0 3 ## ## Value Gravel No_Alley_Access Paved ## Frequency 120 2732 78 ## Proportion 0.041 0.932 0.027 ## -------------------------------------------------------------------------------- ## Lot_Shape ## n missing distinct ## 2930 0 4 ## ## Value Regular Slightly_Irregular Moderately_Irregular ## Frequency 1859 979 76 ## Proportion 0.634 0.334 0.026 ## ## Value Irregular ## Frequency 16 ## Proportion 0.005 ## -------------------------------------------------------------------------------- ## Land_Contour ## n missing distinct ## 2930 0 4 ## ## Value Bnk HLS Low Lvl ## Frequency 117 120 60 2633 ## Proportion 0.040 0.041 0.020 0.899 ## -------------------------------------------------------------------------------- ## Utilities ## n missing distinct ## 2930 0 3 ## ## Value AllPub NoSeWa NoSewr ## Frequency 2927 1 2 ## Proportion 0.999 0.000 0.001 ## -------------------------------------------------------------------------------- ## Lot_Config ## n missing distinct ## 2930 0 5 ## ## lowest : Corner CulDSac FR2 FR3 Inside ## highest: Corner CulDSac FR2 FR3 Inside ## ## Value Corner CulDSac FR2 FR3 Inside ## Frequency 511 180 85 14 2140 ## Proportion 0.174 0.061 0.029 0.005 0.730 ## -------------------------------------------------------------------------------- ## Land_Slope ## n missing distinct ## 2930 0 3 ## ## Value Gtl Mod Sev ## Frequency 2789 125 16 ## Proportion 0.952 0.043 0.005 ## -------------------------------------------------------------------------------- ## Neighborhood ## n missing distinct ## 2930 0 28 ## ## lowest : North_Ames College_Creek Old_Town Edwards Somerset ## highest: Northpark_Villa Blueste Greens Green_Hills Landmark ## -------------------------------------------------------------------------------- ## Condition_1 ## n missing distinct ## 2930 0 9 ## ## lowest : Artery Feedr Norm PosA PosN , highest: PosN RRAe RRAn RRNe RRNn ## ## Value Artery Feedr Norm PosA PosN RRAe RRAn RRNe RRNn ## Frequency 92 164 2522 20 39 28 50 6 9 ## Proportion 0.031 0.056 0.861 0.007 0.013 0.010 0.017 0.002 0.003 ## -------------------------------------------------------------------------------- ## Condition_2 ## n missing distinct ## 2930 0 8 ## ## lowest : Artery Feedr Norm PosA PosN , highest: PosA PosN RRAe RRAn RRNn ## ## Value Artery Feedr Norm PosA PosN RRAe RRAn RRNn ## Frequency 5 13 2900 4 4 1 1 2 ## Proportion 0.002 0.004 0.990 0.001 0.001 0.000 0.000 0.001 ## -------------------------------------------------------------------------------- ## Bldg_Type ## n missing distinct ## 2930 0 5 ## ## lowest : OneFam TwoFmCon Duplex Twnhs TwnhsE ## highest: OneFam TwoFmCon Duplex Twnhs TwnhsE ## ## Value OneFam TwoFmCon Duplex Twnhs TwnhsE ## Frequency 2425 62 109 101 233 ## Proportion 0.828 0.021 0.037 0.034 0.080 ## -------------------------------------------------------------------------------- ## House_Style ## n missing distinct ## 2930 0 8 ## ## lowest : One_and_Half_Fin One_and_Half_Unf One_Story SFoyer SLvl ## highest: SFoyer SLvl Two_and_Half_Fin Two_and_Half_Unf Two_Story ## ## Value One_and_Half_Fin One_and_Half_Unf One_Story SFoyer ## Frequency 314 19 1481 83 ## Proportion 0.107 0.006 0.505 0.028 ## ## Value SLvl Two_and_Half_Fin Two_and_Half_Unf Two_Story ## Frequency 128 8 24 873 ## Proportion 0.044 0.003 0.008 0.298 ## -------------------------------------------------------------------------------- ## Overall_Qual ## n missing distinct ## 2930 0 10 ## ## lowest : Very_Poor Poor Fair Below_Average Average ## highest: Above_Average Good Very_Good Excellent Very_Excellent ## ## Very_Poor (4, 0.001), Poor (13, 0.004), Fair (40, 0.014), Below_Average (226, ## 0.077), Average (825, 0.282), Above_Average (732, 0.250), Good (602, 0.205), ## Very_Good (350, 0.119), Excellent (107, 0.037), Very_Excellent (31, 0.011) ## -------------------------------------------------------------------------------- ## Overall_Cond ## n missing distinct ## 2930 0 9 ## ## lowest : Very_Poor Poor Fair Below_Average Average ## highest: Average Above_Average Good Very_Good Excellent ## ## Very_Poor (7, 0.002), Poor (10, 0.003), Fair (50, 0.017), Below_Average (101, ## 0.034), Average (1654, 0.565), Above_Average (533, 0.182), Good (390, 0.133), ## Very_Good (144, 0.049), Excellent (41, 0.014) ## -------------------------------------------------------------------------------- ## Year_Built ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 118 1 1971 33.94 1915 1925 ## .25 .50 .75 .90 .95 ## 1954 1973 2001 2006 2007 ## ## lowest : 1872 1875 1879 1880 1882, highest: 2006 2007 2008 2009 2010 ## -------------------------------------------------------------------------------- ## Year_Remod_Add ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 61 0.997 1984 23.36 1950 1950 ## .25 .50 .75 .90 .95 ## 1965 1993 2004 2006 2007 ## ## lowest : 1950 1951 1952 1953 1954, highest: 2006 2007 2008 2009 2010 ## -------------------------------------------------------------------------------- ## Roof_Style ## n missing distinct ## 2930 0 6 ## ## lowest : Flat Gable Gambrel Hip Mansard ## highest: Gable Gambrel Hip Mansard Shed ## ## Value Flat Gable Gambrel Hip Mansard Shed ## Frequency 20 2321 22 551 11 5 ## Proportion 0.007 0.792 0.008 0.188 0.004 0.002 ## -------------------------------------------------------------------------------- ## Roof_Matl ## n missing distinct ## 2930 0 8 ## ## lowest : ClyTile CompShg Membran Metal Roll ## highest: Metal Roll Tar&amp;Grv WdShake WdShngl ## ## Value ClyTile CompShg Membran Metal Roll Tar&amp;Grv WdShake WdShngl ## Frequency 1 2887 1 1 1 23 9 7 ## Proportion 0.000 0.985 0.000 0.000 0.000 0.008 0.003 0.002 ## -------------------------------------------------------------------------------- ## Exterior_1st ## n missing distinct ## 2930 0 16 ## ## lowest : AsbShng AsphShn BrkComm BrkFace CBlock ## highest: Stone Stucco VinylSd Wd Sdng WdShing ## ## Value AsbShng AsphShn BrkComm BrkFace CBlock CemntBd HdBoard ImStucc ## Frequency 44 2 6 88 2 126 442 1 ## Proportion 0.015 0.001 0.002 0.030 0.001 0.043 0.151 0.000 ## ## Value MetalSd Plywood PreCast Stone Stucco VinylSd Wd Sdng WdShing ## Frequency 450 221 1 2 43 1026 420 56 ## Proportion 0.154 0.075 0.000 0.001 0.015 0.350 0.143 0.019 ## -------------------------------------------------------------------------------- ## Exterior_2nd ## n missing distinct ## 2930 0 17 ## ## lowest : AsbShng AsphShn Brk Cmn BrkFace CBlock ## highest: Stone Stucco VinylSd Wd Sdng Wd Shng ## ## AsbShng (38, 0.013), AsphShn (4, 0.001), Brk Cmn (22, 0.008), BrkFace (47, ## 0.016), CBlock (3, 0.001), CmentBd (126, 0.043), HdBoard (406, 0.139), ImStucc ## (15, 0.005), MetalSd (447, 0.153), Other (1, 0.000), Plywood (274, 0.094), ## PreCast (1, 0.000), Stone (6, 0.002), Stucco (47, 0.016), VinylSd (1015, ## 0.346), Wd Sdng (397, 0.135), Wd Shng (81, 0.028) ## -------------------------------------------------------------------------------- ## Mas_Vnr_Type ## n missing distinct ## 2930 0 5 ## ## lowest : BrkCmn BrkFace CBlock None Stone ## highest: BrkCmn BrkFace CBlock None Stone ## ## Value BrkCmn BrkFace CBlock None Stone ## Frequency 25 880 1 1775 249 ## Proportion 0.009 0.300 0.000 0.606 0.085 ## -------------------------------------------------------------------------------- ## Mas_Vnr_Area ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 445 0.779 101.1 154.2 0.0 0.0 ## .25 .50 .75 .90 .95 ## 0.0 0.0 162.8 320.2 466.0 ## ## lowest : 0 1 3 11 14, highest: 1170 1224 1290 1378 1600 ## -------------------------------------------------------------------------------- ## Exter_Qual ## n missing distinct ## 2930 0 4 ## ## Value Excellent Fair Good Typical ## Frequency 107 35 989 1799 ## Proportion 0.037 0.012 0.338 0.614 ## -------------------------------------------------------------------------------- ## Exter_Cond ## n missing distinct ## 2930 0 5 ## ## lowest : Excellent Fair Good Poor Typical ## highest: Excellent Fair Good Poor Typical ## ## Value Excellent Fair Good Poor Typical ## Frequency 12 67 299 3 2549 ## Proportion 0.004 0.023 0.102 0.001 0.870 ## -------------------------------------------------------------------------------- ## Foundation ## n missing distinct ## 2930 0 6 ## ## lowest : BrkTil CBlock PConc Slab Stone , highest: CBlock PConc Slab Stone Wood ## ## Value BrkTil CBlock PConc Slab Stone Wood ## Frequency 311 1244 1310 49 11 5 ## Proportion 0.106 0.425 0.447 0.017 0.004 0.002 ## -------------------------------------------------------------------------------- ## Bsmt_Qual ## n missing distinct ## 2930 0 6 ## ## lowest : Excellent Fair Good No_Basement Poor ## highest: Fair Good No_Basement Poor Typical ## ## Value Excellent Fair Good No_Basement Poor ## Frequency 258 88 1219 80 2 ## Proportion 0.088 0.030 0.416 0.027 0.001 ## ## Value Typical ## Frequency 1283 ## Proportion 0.438 ## -------------------------------------------------------------------------------- ## Bsmt_Cond ## n missing distinct ## 2930 0 6 ## ## lowest : Excellent Fair Good No_Basement Poor ## highest: Fair Good No_Basement Poor Typical ## ## Value Excellent Fair Good No_Basement Poor ## Frequency 3 104 122 80 5 ## Proportion 0.001 0.035 0.042 0.027 0.002 ## ## Value Typical ## Frequency 2616 ## Proportion 0.893 ## -------------------------------------------------------------------------------- ## Bsmt_Exposure ## n missing distinct ## 2930 0 5 ## ## lowest : Av Gd Mn No No_Basement ## highest: Av Gd Mn No No_Basement ## ## Value Av Gd Mn No No_Basement ## Frequency 418 284 239 1906 83 ## Proportion 0.143 0.097 0.082 0.651 0.028 ## -------------------------------------------------------------------------------- ## BsmtFin_Type_1 ## n missing distinct ## 2930 0 7 ## ## lowest : ALQ BLQ GLQ LwQ No_Basement ## highest: GLQ LwQ No_Basement Rec Unf ## ## Value ALQ BLQ GLQ LwQ No_Basement ## Frequency 429 269 859 154 80 ## Proportion 0.146 0.092 0.293 0.053 0.027 ## ## Value Rec Unf ## Frequency 288 851 ## Proportion 0.098 0.290 ## -------------------------------------------------------------------------------- ## BsmtFin_SF_1 ## n missing distinct Info Mean Gmd ## 2930 0 8 0.945 4.177 2.486 ## ## lowest : 0 1 2 3 4, highest: 3 4 5 6 7 ## ## Value 0 1 2 3 4 5 6 7 ## Frequency 1 429 269 859 154 79 288 851 ## Proportion 0.000 0.146 0.092 0.293 0.053 0.027 0.098 0.290 ## -------------------------------------------------------------------------------- ## BsmtFin_Type_2 ## n missing distinct ## 2930 0 7 ## ## lowest : ALQ BLQ GLQ LwQ No_Basement ## highest: GLQ LwQ No_Basement Rec Unf ## ## Value ALQ BLQ GLQ LwQ No_Basement ## Frequency 53 68 34 89 81 ## Proportion 0.018 0.023 0.012 0.030 0.028 ## ## Value Rec Unf ## Frequency 106 2499 ## Proportion 0.036 0.853 ## -------------------------------------------------------------------------------- ## BsmtFin_SF_2 ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 274 0.318 49.71 92.2 0.0 0.0 ## .25 .50 .75 .90 .95 ## 0.0 0.0 0.0 127.1 435.0 ## ## lowest : 0 6 12 28 32, highest: 1127 1164 1393 1474 1526 ## -------------------------------------------------------------------------------- ## Bsmt_Unf_SF ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 1137 0.999 559.1 483.7 0.0 54.0 ## .25 .50 .75 .90 .95 ## 219.0 465.5 801.8 1211.1 1473.5 ## ## lowest : 0 14 15 17 20, highest: 2062 2121 2140 2153 2336 ## -------------------------------------------------------------------------------- ## Total_Bsmt_SF ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 1058 1 1051 469.4 450.5 600.0 ## .25 .50 .75 .90 .95 ## 793.0 990.0 1301.5 1612.2 1776.0 ## ## lowest : 0 105 160 173 190, highest: 3138 3200 3206 5095 6110 ## -------------------------------------------------------------------------------- ## Heating ## n missing distinct ## 2930 0 6 ## ## lowest : Floor GasA GasW Grav OthW , highest: GasA GasW Grav OthW Wall ## ## Value Floor GasA GasW Grav OthW Wall ## Frequency 1 2885 27 9 2 6 ## Proportion 0.000 0.985 0.009 0.003 0.001 0.002 ## -------------------------------------------------------------------------------- ## Heating_QC ## n missing distinct ## 2930 0 5 ## ## lowest : Excellent Fair Good Poor Typical ## highest: Excellent Fair Good Poor Typical ## ## Value Excellent Fair Good Poor Typical ## Frequency 1495 92 476 3 864 ## Proportion 0.510 0.031 0.162 0.001 0.295 ## -------------------------------------------------------------------------------- ## Central_Air ## n missing distinct ## 2930 0 2 ## ## Value N Y ## Frequency 196 2734 ## Proportion 0.067 0.933 ## -------------------------------------------------------------------------------- ## Electrical ## n missing distinct ## 2930 0 6 ## ## lowest : FuseA FuseF FuseP Mix SBrkr ## highest: FuseF FuseP Mix SBrkr Unknown ## ## Value FuseA FuseF FuseP Mix SBrkr Unknown ## Frequency 188 50 8 1 2682 1 ## Proportion 0.064 0.017 0.003 0.000 0.915 0.000 ## -------------------------------------------------------------------------------- ## First_Flr_SF ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 1083 1 1160 420.5 665.5 744.9 ## .25 .50 .75 .90 .95 ## 876.2 1084.0 1384.0 1675.0 1829.5 ## ## lowest : 334 372 407 432 438, highest: 3138 3228 3820 4692 5095 ## -------------------------------------------------------------------------------- ## Second_Flr_SF ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 635 0.812 335.5 439.7 0.0 0.0 ## .25 .50 .75 .90 .95 ## 0.0 0.0 703.8 924.1 1130.1 ## ## lowest : 0 110 125 144 167, highest: 1818 1836 1862 1872 2065 ## -------------------------------------------------------------------------------- ## Low_Qual_Fin_SF ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 36 0.04 4.677 9.27 0 0 ## .25 .50 .75 .90 .95 ## 0 0 0 0 0 ## ## lowest : 0 53 80 108 114, highest: 515 528 572 697 1064 ## -------------------------------------------------------------------------------- ## Gr_Liv_Area ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 1292 1 1500 544.3 861.0 923.9 ## .25 .50 .75 .90 .95 ## 1126.0 1442.0 1742.8 2152.1 2463.1 ## ## lowest : 334 407 438 480 492, highest: 4316 4476 4676 5095 5642 ## -------------------------------------------------------------------------------- ## Bsmt_Full_Bath ## n missing distinct Info Mean Gmd ## 2930 0 4 0.736 0.4311 0.5146 ## ## Value 0 1 2 3 ## Frequency 1709 1181 38 2 ## Proportion 0.583 0.403 0.013 0.001 ## -------------------------------------------------------------------------------- ## Bsmt_Half_Bath ## n missing distinct Info Mean Gmd ## 2930 0 3 0.168 0.06109 0.1151 ## ## Value 0 1 2 ## Frequency 2755 171 4 ## Proportion 0.940 0.058 0.001 ## -------------------------------------------------------------------------------- ## Full_Bath ## n missing distinct Info Mean Gmd ## 2930 0 5 0.766 1.567 0.5522 ## ## lowest : 0 1 2 3 4, highest: 0 1 2 3 4 ## ## Value 0 1 2 3 4 ## Frequency 12 1318 1532 64 4 ## Proportion 0.004 0.450 0.523 0.022 0.001 ## -------------------------------------------------------------------------------- ## Half_Bath ## n missing distinct Info Mean Gmd ## 2930 0 3 0.704 0.3795 0.4838 ## ## Value 0 1 2 ## Frequency 1843 1062 25 ## Proportion 0.629 0.362 0.009 ## -------------------------------------------------------------------------------- ## Bedroom_AbvGr ## n missing distinct Info Mean Gmd ## 2930 0 8 0.819 2.854 0.8321 ## ## lowest : 0 1 2 3 4, highest: 3 4 5 6 8 ## ## Value 0 1 2 3 4 5 6 8 ## Frequency 8 112 743 1597 400 48 21 1 ## Proportion 0.003 0.038 0.254 0.545 0.137 0.016 0.007 0.000 ## -------------------------------------------------------------------------------- ## Kitchen_AbvGr ## n missing distinct Info Mean Gmd ## 2930 0 4 0.131 1.044 0.08886 ## ## Value 0 1 2 3 ## Frequency 3 2796 129 2 ## Proportion 0.001 0.954 0.044 0.001 ## -------------------------------------------------------------------------------- ## Kitchen_Qual ## n missing distinct ## 2930 0 5 ## ## lowest : Excellent Fair Good Poor Typical ## highest: Excellent Fair Good Poor Typical ## ## Value Excellent Fair Good Poor Typical ## Frequency 205 70 1160 1 1494 ## Proportion 0.070 0.024 0.396 0.000 0.510 ## -------------------------------------------------------------------------------- ## TotRms_AbvGrd ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 14 0.955 6.443 1.697 4 5 ## .25 .50 .75 .90 .95 ## 5 6 7 8 9 ## ## lowest : 2 3 4 5 6, highest: 11 12 13 14 15 ## ## Value 2 3 4 5 6 7 8 9 10 11 12 ## Frequency 1 26 203 586 844 649 347 143 80 32 16 ## Proportion 0.000 0.009 0.069 0.200 0.288 0.222 0.118 0.049 0.027 0.011 0.005 ## ## Value 13 14 15 ## Frequency 1 1 1 ## Proportion 0.000 0.000 0.000 ## -------------------------------------------------------------------------------- ## Functional ## n missing distinct ## 2930 0 8 ## ## lowest : Maj1 Maj2 Min1 Min2 Mod , highest: Min2 Mod Sal Sev Typ ## ## Value Maj1 Maj2 Min1 Min2 Mod Sal Sev Typ ## Frequency 19 9 65 70 35 2 2 2728 ## Proportion 0.006 0.003 0.022 0.024 0.012 0.001 0.001 0.931 ## -------------------------------------------------------------------------------- ## Fireplaces ## n missing distinct Info Mean Gmd ## 2930 0 5 0.803 0.5993 0.6563 ## ## lowest : 0 1 2 3 4, highest: 0 1 2 3 4 ## ## Value 0 1 2 3 4 ## Frequency 1422 1274 221 12 1 ## Proportion 0.485 0.435 0.075 0.004 0.000 ## -------------------------------------------------------------------------------- ## Fireplace_Qu ## n missing distinct ## 2930 0 6 ## ## lowest : Excellent Fair Good No_Fireplace Poor ## highest: Fair Good No_Fireplace Poor Typical ## ## Value Excellent Fair Good No_Fireplace Poor ## Frequency 43 75 744 1422 46 ## Proportion 0.015 0.026 0.254 0.485 0.016 ## ## Value Typical ## Frequency 600 ## Proportion 0.205 ## -------------------------------------------------------------------------------- ## Garage_Type ## n missing distinct ## 2930 0 7 ## ## lowest : Attchd Basment BuiltIn CarPort Detchd ## highest: BuiltIn CarPort Detchd More_Than_Two_Types No_Garage ## ## Attchd (1731, 0.591), Basment (36, 0.012), BuiltIn (186, 0.063), CarPort (15, ## 0.005), Detchd (782, 0.267), More_Than_Two_Types (23, 0.008), No_Garage (157, ## 0.054) ## -------------------------------------------------------------------------------- ## Garage_Finish ## n missing distinct ## 2930 0 4 ## ## Value Fin No_Garage RFn Unf ## Frequency 728 159 812 1231 ## Proportion 0.248 0.054 0.277 0.420 ## -------------------------------------------------------------------------------- ## Garage_Cars ## n missing distinct Info Mean Gmd ## 2930 0 6 0.815 1.766 0.7806 ## ## lowest : 0 1 2 3 4, highest: 1 2 3 4 5 ## ## Value 0 1 2 3 4 5 ## Frequency 158 778 1603 374 16 1 ## Proportion 0.054 0.266 0.547 0.128 0.005 0.000 ## -------------------------------------------------------------------------------- ## Garage_Area ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 603 1 472.7 236.2 0.0 240.0 ## .25 .50 .75 .90 .95 ## 320.0 480.0 576.0 757.1 856.0 ## ## lowest : 0 100 160 162 164, highest: 1348 1356 1390 1418 1488 ## -------------------------------------------------------------------------------- ## Garage_Qual ## n missing distinct ## 2930 0 6 ## ## lowest : Excellent Fair Good No_Garage Poor ## highest: Fair Good No_Garage Poor Typical ## ## Value Excellent Fair Good No_Garage Poor Typical ## Frequency 3 124 24 159 5 2615 ## Proportion 0.001 0.042 0.008 0.054 0.002 0.892 ## -------------------------------------------------------------------------------- ## Garage_Cond ## n missing distinct ## 2930 0 6 ## ## lowest : Excellent Fair Good No_Garage Poor ## highest: Fair Good No_Garage Poor Typical ## ## Value Excellent Fair Good No_Garage Poor Typical ## Frequency 3 74 15 159 14 2665 ## Proportion 0.001 0.025 0.005 0.054 0.005 0.910 ## -------------------------------------------------------------------------------- ## Paved_Drive ## n missing distinct ## 2930 0 3 ## ## Value Dirt_Gravel Partial_Pavement Paved ## Frequency 216 62 2652 ## Proportion 0.074 0.021 0.905 ## -------------------------------------------------------------------------------- ## Wood_Deck_SF ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 380 0.859 93.75 124.4 0.0 0.0 ## .25 .50 .75 .90 .95 ## 0.0 0.0 168.0 256.1 327.5 ## ## lowest : 0 4 12 14 16, highest: 728 736 857 870 1424 ## -------------------------------------------------------------------------------- ## Open_Porch_SF ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 252 0.913 47.53 63.26 0.0 0.0 ## .25 .50 .75 .90 .95 ## 0.0 27.0 70.0 131.0 182.5 ## ## lowest : 0 4 6 8 10, highest: 502 523 547 570 742 ## -------------------------------------------------------------------------------- ## Enclosed_Porch ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 183 0.4 23.01 41.06 0 0 ## .25 .50 .75 .90 .95 ## 0 0 0 112 176 ## ## lowest : 0 16 18 19 20, highest: 429 432 552 584 1012 ## -------------------------------------------------------------------------------- ## Three_season_porch ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 31 0.037 2.592 5.137 0 0 ## .25 .50 .75 .90 .95 ## 0 0 0 0 0 ## ## lowest : 0 23 86 96 120, highest: 320 323 360 407 508 ## -------------------------------------------------------------------------------- ## Screen_Porch ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 121 0.24 16 29.79 0 0 ## .25 .50 .75 .90 .95 ## 0 0 0 0 161 ## ## lowest : 0 40 53 60 63, highest: 410 440 480 490 576 ## -------------------------------------------------------------------------------- ## Pool_Area ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 14 0.013 2.243 4.472 0 0 ## .25 .50 .75 .90 .95 ## 0 0 0 0 0 ## ## lowest : 0 144 228 368 444, highest: 561 576 648 738 800 ## ## Value 0 144 228 368 444 480 512 519 555 561 576 ## Frequency 2917 1 1 1 1 1 1 1 1 1 1 ## Proportion 0.996 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 ## ## Value 648 738 800 ## Frequency 1 1 1 ## Proportion 0.000 0.000 0.000 ## -------------------------------------------------------------------------------- ## Pool_QC ## n missing distinct ## 2930 0 5 ## ## lowest : Excellent Fair Good No_Pool Typical ## highest: Excellent Fair Good No_Pool Typical ## ## Value Excellent Fair Good No_Pool Typical ## Frequency 4 2 4 2917 3 ## Proportion 0.001 0.001 0.001 0.996 0.001 ## -------------------------------------------------------------------------------- ## Fence ## n missing distinct ## 2930 0 5 ## ## lowest : Good_Privacy Good_Wood Minimum_Privacy Minimum_Wood_Wire No_Fence ## highest: Good_Privacy Good_Wood Minimum_Privacy Minimum_Wood_Wire No_Fence ## ## Value Good_Privacy Good_Wood Minimum_Privacy ## Frequency 118 112 330 ## Proportion 0.040 0.038 0.113 ## ## Value Minimum_Wood_Wire No_Fence ## Frequency 12 2358 ## Proportion 0.004 0.805 ## -------------------------------------------------------------------------------- ## Misc_Feature ## n missing distinct ## 2930 0 6 ## ## lowest : Elev Gar2 None Othr Shed, highest: Gar2 None Othr Shed TenC ## ## Value Elev Gar2 None Othr Shed TenC ## Frequency 1 5 2824 4 95 1 ## Proportion 0.000 0.002 0.964 0.001 0.032 0.000 ## -------------------------------------------------------------------------------- ## Misc_Val ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 38 0.102 50.64 99.85 0 0 ## .25 .50 .75 .90 .95 ## 0 0 0 0 0 ## ## lowest : 0 54 80 300 350, highest: 6500 8300 12500 15500 17000 ## -------------------------------------------------------------------------------- ## Mo_Sold ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 12 0.986 6.216 3.062 2 3 ## .25 .50 .75 .90 .95 ## 4 6 8 10 11 ## ## lowest : 1 2 3 4 5, highest: 8 9 10 11 12 ## ## Value 1 2 3 4 5 6 7 8 9 10 11 ## Frequency 123 133 232 279 395 505 449 233 161 173 143 ## Proportion 0.042 0.045 0.079 0.095 0.135 0.172 0.153 0.080 0.055 0.059 0.049 ## ## Value 12 ## Frequency 104 ## Proportion 0.035 ## -------------------------------------------------------------------------------- ## Year_Sold ## n missing distinct Info Mean Gmd ## 2930 0 5 0.955 2008 1.484 ## ## lowest : 2006 2007 2008 2009 2010, highest: 2006 2007 2008 2009 2010 ## ## Value 2006 2007 2008 2009 2010 ## Frequency 625 694 622 648 341 ## Proportion 0.213 0.237 0.212 0.221 0.116 ## -------------------------------------------------------------------------------- ## Sale_Type ## n missing distinct ## 2930 0 10 ## ## lowest : COD Con ConLD ConLI ConLw, highest: CWD New Oth VWD WD ## ## Value COD Con ConLD ConLI ConLw CWD New Oth VWD WD ## Frequency 87 5 26 9 8 12 239 7 1 2536 ## Proportion 0.030 0.002 0.009 0.003 0.003 0.004 0.082 0.002 0.000 0.866 ## -------------------------------------------------------------------------------- ## Sale_Condition ## n missing distinct ## 2930 0 6 ## ## lowest : Abnorml AdjLand Alloca Family Normal ## highest: AdjLand Alloca Family Normal Partial ## ## Value Abnorml AdjLand Alloca Family Normal Partial ## Frequency 190 12 24 46 2413 245 ## Proportion 0.065 0.004 0.008 0.016 0.824 0.084 ## -------------------------------------------------------------------------------- ## Sale_Price ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 1032 1 180796 81960 87500 105450 ## .25 .50 .75 .90 .95 ## 129500 160000 213500 281242 335000 ## ## lowest : 12789 13100 34900 35000 35311, highest: 611657 615000 625000 745000 755000 ## -------------------------------------------------------------------------------- ## Longitude ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 2777 1 -93.64 0.02941 -93.69 -93.68 ## .25 .50 .75 .90 .95 ## -93.66 -93.64 -93.62 -93.61 -93.61 ## ## lowest : -93.69315 -93.69287 -93.69270 -93.69261 -93.69258 ## highest: -93.59958 -93.59700 -93.59657 -93.58823 -93.57743 ## -------------------------------------------------------------------------------- ## Latitude ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 2762 1 42.03 0.0207 41.99 42.01 ## .25 .50 .75 .90 .95 ## 42.02 42.03 42.05 42.06 42.06 ## ## lowest : 41.98650 41.98650 41.98651 41.98651 41.98658 ## highest: 42.06333 42.06334 42.06334 42.06338 42.06339 ## -------------------------------------------------------------------------------- ## id ## n missing distinct Info Mean Gmd .05 .10 ## 2930 0 2930 1 1466 977 147.5 293.9 ## .25 .50 .75 .90 .95 ## 733.2 1465.5 2197.8 2637.1 2783.5 ## ## lowest : 1 2 3 4 5, highest: 2926 2927 2928 2929 2930 ## -------------------------------------------------------------------------------- The tidyverse summarise function ames %&gt;% group_by(`House_Style`) %&gt;% summarise(mean = mean(Sale_Price), sd = sd(Sale_Price), max = max(Sale_Price), min = min(Sale_Price)) ## `summarise()` ungrouping output (override with `.groups` argument) ## # A tibble: 8 x 5 ## House_Style mean sd max min ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 One_and_Half_Fin 137530. 47226. 410000 37900 ## 2 One_and_Half_Unf 109663. 20570. 139400 64500 ## 3 One_Story 178700. 81067. 615000 12789 ## 4 SFoyer 143473. 31220. 224500 70000 ## 5 SLvl 165527. 34348. 345000 91000 ## 6 Two_and_Half_Fin 220000 118212. 475000 104000 ## 7 Two_and_Half_Unf 177158. 76115. 415000 97500 ## 8 Two_Story 206990. 85350. 755000 40000 The base R summary function summary(ames$Sale_Price) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 12789 129500 160000 180796 213500 755000 "],["normal-distribution-normal.html", "1.4 Normal Distribution {normal}", " 1.4 Normal Distribution {normal} Skewness Kurtosis "],["confidence-intervals.html", "1.5 Confidence Intervals", " 1.5 Confidence Intervals "],["hypothesis-testing.html", "1.6 Hypothesis Testing", " 1.6 Hypothesis Testing "],["two-sample-t-tests.html", "1.7 Two-Sample t-tests", " 1.7 Two-Sample t-tests "],["slr.html", "Chapter 2 Introduction to ANOVA and Linear Regression ", " Chapter 2 Introduction to ANOVA and Linear Regression "],["explanation-vs-prediction.html", "2.1 Explanation vs. Prediction", " 2.1 Explanation vs. Prediction "],["exploratory-data-analysis.html", "2.2 Exploratory Data Analysis", " 2.2 Exploratory Data Analysis "],["one-way-anova.html", "2.3 One-Way ANOVA", " 2.3 One-Way ANOVA "],["anova-post-hoc-testing.html", "2.4 ANOVA Post-hoc Testing", " 2.4 ANOVA Post-hoc Testing "],["pearson-correlation.html", "2.5 Pearson Correlation", " 2.5 Pearson Correlation "],["simple-linear-regression.html", "2.6 Simple Linear Regression", " 2.6 Simple Linear Regression Some sample data: set.seed(42) data &lt;- data.frame(y = c(rnorm(10,2), rnorm(10,1),rnorm(10,0)), x = rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each = 10)) head(data) The mean of each group: (group.means = tapply(data$y, data$x, mean)) The grand mean: mean(group.means) To specify reference coding: lm(a ~ b, x, contrasts = list(b = contr.sum)) Note that the parameter estimates reflect differences from the grand mean. "],["complex-anova-and-multiple-linear-regression.html", "Chapter 3 Complex ANOVA and Multiple Linear Regression ", " Chapter 3 Complex ANOVA and Multiple Linear Regression "],["two-way-anova.html", "3.1 Two-Way ANOVA", " 3.1 Two-Way ANOVA "],["two-way-anova-with-interactions.html", "3.2 Two-Way ANOVA with Interactions", " 3.2 Two-Way ANOVA with Interactions "],["randomized-block-design.html", "3.3 Randomized Block Design", " 3.3 Randomized Block Design "],["multiple-linear-regression.html", "3.4 Multiple Linear Regression", " 3.4 Multiple Linear Regression "],["model-building-scoring-for-prediction.html", "Chapter 4 Model Building &amp; Scoring for Prediction ", " Chapter 4 Model Building &amp; Scoring for Prediction "],["model-complexity.html", "4.1 Model Complexity", " 4.1 Model Complexity "],["regularized-regression.html", "4.2 Regularized Regression", " 4.2 Regularized Regression "],["modeling-scoring.html", "4.3 Modeling Scoring", " 4.3 Modeling Scoring "],["model-metrics.html", "4.4 Model Metrics", " 4.4 Model Metrics "],["model-selection.html", "Chapter 5 Model Selection ", " Chapter 5 Model Selection "],["stepwise-selection.html", "5.1 Stepwise Selection", " 5.1 Stepwise Selection Forward Backward Stepwise LASSO "],["selection-criteria.html", "5.2 Selection Criteria", " 5.2 Selection Criteria "],["significance-levels.html", "5.3 Significance Levels", " 5.3 Significance Levels "],["diagnostics.html", "Chapter 6 Diagnostics ", " Chapter 6 Diagnostics "],["examining-residuals.html", "6.1 Examining Residuals", " 6.1 Examining Residuals "],["misspecified-model.html", "6.2 Misspecified Model", " 6.2 Misspecified Model "],["constant-variance.html", "6.3 Constant Variance", " 6.3 Constant Variance "],["normality.html", "6.4 Normality", " 6.4 Normality "],["correlated-errors.html", "6.5 Correlated Errors", " 6.5 Correlated Errors "],["influential-observations-and-outliers.html", "6.6 Influential Observations and Outliers", " 6.6 Influential Observations and Outliers "],["multicollinearity.html", "6.7 Multicollinearity", " 6.7 Multicollinearity "],["categorical-data-analysis.html", "Chapter 7 Categorical Data Analysis ", " Chapter 7 Categorical Data Analysis "],["describing-categorical-data.html", "7.1 Describing Categorical Data", " 7.1 Describing Categorical Data "],["tests-of-association.html", "7.2 Tests of Association", " 7.2 Tests of Association "],["measures-of-association.html", "7.3 Measures of Association", " 7.3 Measures of Association "],["introduction-to-logistic-regression.html", "7.4 Introduction to Logistic Regression", " 7.4 Introduction to Logistic Regression "],["adding-categorical-variables-and-interactions.html", "7.5 Adding Categorical Variables and Interactions", " 7.5 Adding Categorical Variables and Interactions "]]
