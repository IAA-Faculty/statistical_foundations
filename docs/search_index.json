[["categorical-data-analysis.html", "Chapter 7 Categorical Data Analysis 7.1 Describing Categorical Data 7.2 Tests of Association 7.3 Measures of Association 7.4 Introduction to Logistic Regression", " Chapter 7 Categorical Data Analysis Everything analysis covered so far has used a continuous variable as a target variable of interest. What if our target variable was categorical instead of continuous? Our analysis must change to adjust. This Chapter aims to answer the following questions: How do you explore categorical variables? Nominal vs. Ordinal Tests of Association Measures of Association How do you model a categorical target variable? Logistic Regression Interpreting Logistic Regression Assessing Logistic Regression 7.1 Describing Categorical Data We need to first explore our data before building any models to try and explain/predict our categorical target variable. With categorical variables, we can look at the distribution of the categories as well as see if this distribution has any association with other variables. For this analysis we are going to still use our Ames housing data. Imagine you worked for a real estate agency and got a bonus check if you sold a house above $175,000 in value. Let’s create this variable in our data: library(dplyr) train &lt;- train %&gt;% mutate(Bonus = ifelse(Sale_Price &gt; 175000, 1, 0)) You are interested in what variables might be associated with obtaining a higher chance of getting a bonus (selling a house above $175,000). An association exists between two categorical variables if the distribution of one variable changes when the value of the other categorical changes. If there is no association, the distribution of the first variable is the same regardless of the value of the other variable. For example, if we wanted to know if obtaining a bonus on selling a house in Ames, Iowa was associated with whether the house had central air we could look at the distribution of bonus eligible houses. If we observe that 42% of homes with central air are bonus eligible and 42% of homes without central air are bonus eligible, then it appears that central air has no bearing on whether the home is bonus eligible. However, if instead we observe that only 3% of homes without central air are bonus eligible, but 44% of home with central air are bonus eligible, then it appears that having central air might be related to a home being bonus eligible. To understand the distribution of categorical variables we need to look at frequency tables. A frequency table shows the number of observations that occur in certain categories or intervals. A one way frequency table examines all the categories of one variable. These are easily visualized with bar charts. Let’s look at the distribution of both bonus eligibility and central air using the table function. The ggplot function with the geom_bar function allows us to view our data in a bar chart. table(train$Bonus) ## ## 0 1 ## 1185 866 ggplot(data = train) + geom_bar(mapping = aes(x = Bonus)) table(train$Central_Air) ## ## N Y ## 131 1920 ggplot(data = train) + geom_bar(mapping = aes(x = Central_Air)) Frequency tables show single variables, but if we want to explore two variables together we look at cross-tabulation tables. A cross-tabulation table shows the number of observations for each combination of the row and column variables. Let’s again examine bonus eligibility, but this time across levels of central air. Again, we can use the table function. The prop.table function allows us to compare two variables in terms of proportions instead of frequencies. table(train$Central_Air, train$Bonus) ## ## 0 1 ## N 125 6 ## Y 1060 860 prop.table(table(train$Central_Air, train$Bonus)) ## ## 0 1 ## N 0.060945880 0.002925402 ## Y 0.516821063 0.419307655 ggplot(data = train) + geom_bar(mapping = aes(x = Bonus, fill = Central_Air)) From the above output we can see that 147 homes have no central air with only 5 of them being bonus eligible. However, there are 1904 homes that have central air with 835 of them being bonus eligible. For an even more detailed breakdown we can use the CrossTable function. library(gmodels) CrossTable(train$Central_Air, train$Bonus) ## ## ## Cell Contents ## |-------------------------| ## | N | ## | Chi-square contribution | ## | N / Row Total | ## | N / Col Total | ## | N / Table Total | ## |-------------------------| ## ## ## Total Observations in Table: 2051 ## ## ## | train$Bonus ## train$Central_Air | 0 | 1 | Row Total | ## ------------------|-----------|-----------|-----------| ## N | 125 | 6 | 131 | ## | 32.129 | 43.963 | | ## | 0.954 | 0.046 | 0.064 | ## | 0.105 | 0.007 | | ## | 0.061 | 0.003 | | ## ------------------|-----------|-----------|-----------| ## Y | 1060 | 860 | 1920 | ## | 2.192 | 3.000 | | ## | 0.552 | 0.448 | 0.936 | ## | 0.895 | 0.993 | | ## | 0.517 | 0.419 | | ## ------------------|-----------|-----------|-----------| ## Column Total | 1185 | 866 | 2051 | ## | 0.578 | 0.422 | | ## ------------------|-----------|-----------|-----------| ## ## The advantage of the CrossTable function is that we can easily get not only the frequencies, but the cell, row, and column proportions. For example, the third number in each cell gives us the row proportion. For homes without central air, 96.6% of them are not bonus eligible, while 3.4% of them are. For homes with central air, 56.1% of the homes are not bonus eligible, while 43.9% of them are. This would appear that the distribution of bonus eligible homes changes across levels of central air - a relationship between the two variables. This expected relationship needs to be tested statistically for verification. 7.1.1 Python Code train[&#39;Bonus&#39;] = np.where(train[&#39;Sale_Price&#39;] &gt; 175000, 1, 0) train[&#39;Bonus&#39;].value_counts() ## Bonus ## 0 1162 ## 1 889 ## Name: count, dtype: int64 plot = ( ggplot(train) + geom_bar(aes(x=&#39;Bonus&#39;)) + labs(x=&#39;Bonus&#39;, y=&#39;Count&#39;) + theme_minimal() ) plot.show() train[&#39;Central_Air&#39;].value_counts() ## Central_Air ## Y 1913 ## N 138 ## Name: count, dtype: int64 plot = ( ggplot(train) + geom_bar(aes(x=&#39;Central_Air&#39;)) + labs(x=&#39;Central_Air&#39;, y=&#39;Count&#39;) + theme_minimal() ) plot.show() plot = ( ggplot(train) + geom_bar(aes(x=&#39;Bonus&#39;, fill=&#39;Central_Air&#39;), position=&#39;stack&#39;) + labs(x=&#39;Bonus&#39;, y=&#39;Count&#39;, fill=&#39;Central_Air&#39;) + theme_minimal() ) plot.show() pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;]) ## Bonus 0 1 ## Central_Air ## N 132 6 ## Y 1030 883 7.2 Tests of Association Much like in Chapter 2 we have statistical tests to evaluate relationships between two categorical variables. The null hypothesis for these statistical tests is that the two variables have no association - the distribution of one variable does not change across levels of another variable. The alternative hypothesis is an association between the two variables - the distribution of one variable changes across levels of another variable. These statistical tests follow a \\(\\chi^2\\)-distribution. The \\(\\chi^2\\)-distribution is a distribution that has the following characteristics: Bounded below by 0 Right-skewed One set of degrees of freedom A plot of a variety of \\(\\chi^2\\)-distributions is shown here: Two common \\(\\chi^2\\) tests are the Pearson and Likelihood Ratio \\(\\chi^2\\) tests. They compare the observed count of observations in each cell of a cross-tabulation table between two variables to their expected count if there was no relationship. The expected cell count applies the overall distribution of one variable across all the levels of the other variable. For example, overall 59% of all homes are not bonus eligible. If that were to apply to every level of central air, then the 140 homes without central air would be expected to have 86.73 ( $ = 147 $ ) of them would be bonus eligible while 60.27 ( $ = 147 $ ) of them would not be bonus eligible. We actually observe 142 and 5 homes for each of these categories respectively. The further the observed data is from the expected data, the more evidence we have that there is a relationship between the two variables. The test statistic for the Pearson \\(\\chi^2\\) test is the following: \\[ \\chi^2_P = \\sum_{i=1}^R \\sum_{j=1}^C \\frac{(Obs_{i,j} - Exp_{i,j})^2}{Exp_{i,j}} \\] From the equation above, the closer that the observed count of each cross-tabulation table cell to the expected count, the smaller the test statistic. As with all previous hypothesis tests, the smaller the test statistic, the larger the p-value, implying less evidence for the alternative hypothesis. Let’s examine the relationship between central air and bonus eligibility using the chisq.test function. chisq.test(table(train$Central_Air, train$Bonus)) ## ## Pearson&#39;s Chi-squared test with Yates&#39; continuity correction ## ## data: table(train$Central_Air, train$Bonus) ## X-squared = 79.644, df = 1, p-value &lt; 2.2e-16 The above results shows an extremely small p-value that is below any reasonable significance level. This implies that we have statistical evidence for a relationship between having central air and bonus eligibility of homes. The p-value comes from a \\(\\chi^2\\)-distribution with degrees of freedom that equal the product of the number of rows minus one and the number of columns minus one. Another common test is the Likelihood Ratio test. The test statistic for this is the following: \\[ \\chi^2_L = 2 \\times \\sum_{i=1}^R \\sum_{j=1}^C Obs_{i,j} \\times \\log(\\frac{Obs_{i,j}}{Exp_{i,j}}) \\] The p-value comes from a \\(\\chi^2\\)-distribution with degrees of freedom that equal the product of the number of rows minus one and the number of columns minus one. Both of the above tests have a sample size requirement. The sample size requirement is 80% or more of the cells in the cross-tabulation table need expected count larger than 5. For smaller sample sizes, this might be hard to meet. In those situations, we can use a more computationally expensive test called Fisher’s exact test. This test calculates every possible permutation of the data being evaluated to calculate the p-value without any distributional assumptions. To perform this test we can use the fisher.test function. fisher.test(table(train$Central_Air, train$Bonus)) ## ## Fisher&#39;s Exact Test for Count Data ## ## data: table(train$Central_Air, train$Bonus) ## p-value &lt; 2.2e-16 ## alternative hypothesis: true odds ratio is not equal to 1 ## 95 percent confidence interval: ## 7.491501 47.142065 ## sample estimates: ## odds ratio ## 16.89013 We see the same results as with the Pearson test because the assumptions were met for sample size. Both the Pearson and Likelihood Ratio \\(\\chi^2\\) tests can handle any type of categorical variable either ordinal, nominal, or both. However, ordinal variables provide us extra information since the order of the categories actually matters compared to nominal. We can test for even more with ordinal variables against other ordinal variables whether two ordinal variables have a linear relationship as compared to just a general one. An ordinal test for association is the Mantel-Haenszel \\(\\chi^2\\) test. The test statistic for the Mantel-Haenszel \\(\\chi^2\\) test is the following: \\[ \\chi^2_{MH} = (n-1)r^2 \\] where \\(r^2\\) is the Pearson correlation between the column and row variables. This test follows a \\(\\chi^2\\)-distribution with only one degree of freedom. Since both the central air and bonus eligibility variables are binary, they are ordinal. Since they are both ordinal, we should use the Mantel-Haenszel \\(\\chi^2\\) test with the CMHtest function. In the main output table, the first row is the Mantel-Haenszel \\(\\chi^2\\) test. library(vcdExtra) CMHtest(table(train$Central_Air, train$Bonus))$table[1,] ## Chisq Df Prob ## 8.124394e+01 1.000000e+00 1.995061e-19 From here we can see another extremely small p-value as we saw in earlier, more general \\(\\chi^2\\) tests. 7.2.1 Python Code from scipy.stats import chi2_contingency chi2_contingency(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;]), correction = True) ## Chi2ContingencyResult(statistic=89.93013829077994, pvalue=2.4671990961829127e-21, dof=1, expected_freq=array([[ 78.18430034, 59.81569966], ## [1083.81569966, 829.18430034]])) from scipy.stats import fisher_exact fisher_exact(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;])) ## SignificanceResult(statistic=18.860194174757282, pvalue=1.1286497199252816e-26) No real Mantel-Haenszel options in Python that work for anything more than a 2x2 table so I wouldn’t trust them. 7.3 Measures of Association Tests of association are best designed for just that, testing the existence of an association between two categorical variables. However, just like we saw in Chapter 1.1, hypothesis tests are impacted by sample size. When we have the same sample size, tests of association can rank significance of variables with p-values. However, when sample sizes are not the same between two tests, the tests of association are not best for comparing the strength of an association. In those scenarios, we have measures of strength of association that can be compared across any sample size. Measures of association were not designed to test if an association exists, as that is what statistical testing is for. They are designed to measure the strength of association. There are dozens of these measures. Three of the most common are the following: Odds Ratios (only for comparing two binary variables) Cramer’s V (able to compare nominal variables with any number of categories) Spearman’s Correlation (able to compare ordinal variables with any number of categories) An odds ratio indicates how much more likely, with respect to odds, a certain event occurs in one group relative to its occurrence in another group. The odds of an event occurring is not the same as the probability that an event occurs. The odds of an event occurring is the probability the event occurs divided by the probability that event does not occur. \\[ Odds = \\frac{p}{1-p} \\] Let’s again examine the cross-tabulation table between central air and bonus eligibility. ## ## ## Cell Contents ## |-------------------------| ## | N | ## | Chi-square contribution | ## | N / Row Total | ## | N / Col Total | ## | N / Table Total | ## |-------------------------| ## ## ## Total Observations in Table: 2051 ## ## ## | train$Bonus ## train$Central_Air | 0 | 1 | Row Total | ## ------------------|-----------|-----------|-----------| ## N | 125 | 6 | 131 | ## | 32.129 | 43.963 | | ## | 0.954 | 0.046 | 0.064 | ## | 0.105 | 0.007 | | ## | 0.061 | 0.003 | | ## ------------------|-----------|-----------|-----------| ## Y | 1060 | 860 | 1920 | ## | 2.192 | 3.000 | | ## | 0.552 | 0.448 | 0.936 | ## | 0.895 | 0.993 | | ## | 0.517 | 0.419 | | ## ------------------|-----------|-----------|-----------| ## Column Total | 1185 | 866 | 2051 | ## | 0.578 | 0.422 | | ## ------------------|-----------|-----------|-----------| ## ## Let’s look at the row without central air. The probability that a home without central air is not bonus eligible is 96.6%. That implies that the odds of not being bonus eligible in homes without central air is 28.41 (= 0.966/0.034). For homes with central air, the odds of not being bonus eligible are 1.28 (= 0.561/0.439). The odds ratio between these two would be approximately 22.2 (= 28.41/1.28). In other words, homes without central air are 22.2 times more likely (in terms of odds) to not be bonus eligible as compared to homes with central air. This relationship is intuitive based on the numbers we have seen. Without going into details, it can also be shown that homes with central air are 22.2 times as likely (in terms of odds) to be bonus eligible. We can use the OddsRatio function to get these same results. library(DescTools) OddsRatio(table(train$Central_Air, train$Bonus)) ## [1] 16.90252 Cramer’s V is another measure of strength of association. Cramer’s V is calculated as follows: \\[ V = \\sqrt{\\frac{\\chi^2_P/n}{\\min(Rows-1, Columns-1)}} \\] Cramer’s V is bounded between 0 and 1 for every comparison other than two binary variables. For two binary variables being compared the bounds are -1 to 1. The idea is still the same for both. The further the value is from 0, the stronger the relationship. Unfortunately, unlike \\(R^2\\), Cramer’s V has no interpretative value. It can only be used for comparison. We use the assocstats function to get the Cramer’s V value. This function also provides the Pearson and Likelihood Ratio \\(\\chi^2\\) tests as well. assocstats(table(train$Central_Air, train$Bonus)) ## X^2 df P(&gt; X^2) ## Likelihood Ratio 103.936 1 0 ## Pearson 81.284 1 0 ## ## Phi-Coefficient : 0.199 ## Contingency Coeff.: 0.195 ## Cramer&#39;s V : 0.199 Lastly, we have Spearman’s correlation. Much like the Mantel-Haenszel test of association was specifically designed for comparing two ordinal variables, Spearman correlation measures the strength of association between two ordinal variables. Spearman is not limited to only categorical data analysis as it was also seen back in Chapter 5 with detecting heteroskedasticity. Remember, Spearman correlation is a correlation on the ranks of the observations as compared to the actual values of the observations. The cor.test function that gave us Pearson’s correlation also provides Spearman’s correlation. cor.test(x = as.numeric(ordered(train$Central_Air)), y = as.numeric(ordered(train$Bonus)), method = &quot;spearman&quot;) ## ## Spearman&#39;s rank correlation rho ## ## data: x and y ## S = 1151693776, p-value &lt; 2.2e-16 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ## rho ## 0.1990758 As previously mentioned, these are only a few of the dozens of different measures of association that exist. However, they are the most used ones. 7.3.1 Python Code Odds Ratios are the statistic calculated from the Fisher’s Exact test from the previous code: from scipy.stats import fisher_exact fisher_exact(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;])) ## SignificanceResult(statistic=18.860194174757282, pvalue=1.1286497199252816e-26) from scipy.stats import fisher_exact fisher_exact(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;])) ## SignificanceResult(statistic=18.860194174757282, pvalue=1.1286497199252816e-26) from scipy.stats.contingency import association association(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;]), method = &quot;cramer&quot;) ## 0.2113604274410272 from scipy.stats import spearmanr spearmanr(train[&#39;Central_Air&#39;], train[&#39;Bonus&#39;]) ## SignificanceResult(statistic=0.21136042744102718, pvalue=3.822493169056582e-22) 7.4 Introduction to Logistic Regression After exploring the categorical target variable, we can move on to modeling the categorical target variable. Logistic regression is a fundamental statistical analysis for data science and analytics. It part of a class of modeling techniques known as classification models since they are trying to predict categorical target variables. This target variable can be binary, ordinal, or even nominal in its structure. The primary focus will be binary logistic regression. It is the most common type of logistic regression, and sets up the foundation for both ordinal and nominal logistic regression. Ordinary least squares regression is not the best approach to modeling categorical target variables. Mathematically, it can be shown that with a binary target variable coded as 0 and 1, an OLS linear regression model will produce the linear probability model. 7.4.1 Linear Probability Model The linear probability model is not as widely used since probabilities do not tend to follow the properties of linearity in relation to their predictors. Also, the linear probability model possibly produces predictions outside of the bounds of 0 and 1 (where probabilities should be!). For completeness sake however, here is the linear probability model using the lm function to try and predict bonus eligibility. lp.model &lt;- lm(Bonus ~ Gr_Liv_Area, data = train) with(train, plot(x = Gr_Liv_Area, y = Bonus, main = &#39;OLS Regression?&#39;, xlab = &#39;Greater Living Area (Sqft)&#39;, ylab = &#39;Bonus Eligibility&#39;)) abline(lp.model) Even though it doesn’t appear to really look like our data, let’s fit this linear probability model anyway for completeness sake. lp.model &lt;- lm(Bonus ~ Gr_Liv_Area, data = train) summary(lp.model) ## ## Call: ## lm(formula = Bonus ~ Gr_Liv_Area, data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.73745 -0.29629 -0.09335 0.39160 0.86802 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -4.211e-01 2.776e-02 -15.17 &lt;2e-16 *** ## Gr_Liv_Area 5.598e-04 1.746e-05 32.07 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4032 on 2049 degrees of freedom ## Multiple R-squared: 0.3342, Adjusted R-squared: 0.3339 ## F-statistic: 1028 on 1 and 2049 DF, p-value: &lt; 2.2e-16 qqnorm(rstandard(lp.model), ylab = &quot;Standardized Residuals&quot;, xlab = &quot;Normal Scores&quot;, main = &quot;QQ-Plot of Residuals&quot;) qqline(rstandard(lp.model)) plot(predict(lp.model), resid(lp.model), ylab=&quot;Residuals&quot;, xlab=&quot;Predicted Values&quot;, main=&quot;Residuals of Linear Probability Model&quot;) abline(0, 0) As we can see from the charts above, the assumptions of ordinary least squares don’t really hold in this situation. Therefore, we should be careful interpreting the results of the model. Maybe a better model won’t have these problems? 7.4.2 Binary Logistic Regression Due to the limitations of the linear probability model, people typically just use the binary logistic regression model. The logistic regression model does not have the limitations of the linear probability model. The outcome of the logistic regression model is the probability of getting a 1 in a binary variable. That probability is calculated as follows: \\[ p_i = \\frac{1}{1+e^{-(\\beta_0 + \\beta_1x_{1,i} + \\cdots + \\beta_k x_{k,i})}} \\] This function has the desired properties for predicting probabilities. The predicted probability from the above equation will always be between 0 and 1. The parameter estimates do not enter the function linearly (this is a non-linear regression model), and the rate of change of the probability varies as the predictor variables vary as seen in Figure 7.1. Figure 7.1: Example of a Logistic Curve To create a linear model, a link function is applied to the probabilities. The specific link function for logistic regression is called the logit function. \\[ logit(p_i) = \\log(\\frac{p_i}{1-p_i}) = \\beta_0 + \\beta_1x_{1,i} + \\cdots + \\beta_k x_{k,i} \\] The relationship between the predictor variables and the logits are linear in nature as the logits themselves are unbounded. This structure looks much more like our linear regression model structure. However, logistic regression does not use OLS to estimate the coefficients in our model. OLS requires residuals which the logistic regression model does not provide. The target variable is binary in nature, but the predictions are probabilities. Therefore, we cannot calculate a traditional residual. Instead, logistic regression uses maximum likelihood estimation. This is not covered here. There are two main assumptions for logistic regression: Independence of observations Linearity of the logit The first assumption of independence is the same as we had for linear regression. The second assumption implies that the logistic function transformation (the logit) actually makes a linear relationship with our predictor variables. This assumption can be tested, but will not be covered in this brief introduction to logistic regression. Let’s build a logistic regression model. We will use the glm function to do this. The glm function has a similar structure to the lm function. The main difference is the family = binomial(link = \"logit\") option to specify that we are uses a logistic regression model. Again, there are many different link functions, but only the logistic link function (the logit) is being used here. ames_logit &lt;- glm(Bonus ~ Gr_Liv_Area, data = train, family = binomial(link = &quot;logit&quot;)) summary(ames_logit) ## ## Call: ## glm(formula = Bonus ~ Gr_Liv_Area, family = binomial(link = &quot;logit&quot;), ## data = train) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -6.3057265 0.2823074 -22.34 &lt;2e-16 *** ## Gr_Liv_Area 0.0039689 0.0001835 21.63 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2793.5 on 2050 degrees of freedom ## Residual deviance: 1903.7 on 2049 degrees of freedom ## AIC: 1907.7 ## ## Number of Fisher Scoring iterations: 5 Let’s examine the above output. Scanning down the output, you can see the actual logistic regression equation for the variable Gr_Liv_Area. Here we can see that it appears to be a significant variable at predicting bonus eligibility. However, the coefficient reported does not have the same usable interpretation as in linear regression. An increase of one unit of greater living area square footage is linearly related to the logit not the probability of bonus eligibility. We can transform this coefficient to make it more interpretable. A single unit increase in greater living area square footage does have a \\(100 \\times (e^\\hat{\\beta}-1)\\%\\) increase in the average odds of bonus eligibility. We can use a combination of the exp and coef functions to obtain this number. 100*(exp(cbind(coef(ames_logit), confint(ames_logit)))-1) ## Waiting for profiling to be done... ## 2.5 % 97.5 % ## (Intercept) -99.8174181 -99.8964532 -99.6866847 ## Gr_Liv_Area 0.3976804 0.3624451 0.4347035 In other words, every additional square foot in greater living area in the home leads to an average increase in odds of 0.385% to be bonus eligible. 7.4.3 Adding Categorical Variables Similar to linear regression as we learned in Chapter 3, logistic regression can have both continuous and categorical predictors for our categorical target variable. Let’s add both central air as well as number of fireplaces to our logistic regression model. ames_logit2 &lt;- glm(Bonus ~ Gr_Liv_Area + Central_Air + factor(Fireplaces), data = train, family = binomial(link = &quot;logit&quot;)) summary(ames_logit2) ## ## Call: ## glm(formula = Bonus ~ Gr_Liv_Area + Central_Air + factor(Fireplaces), ## family = binomial(link = &quot;logit&quot;), data = train) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.012e+01 6.694e-01 -15.122 &lt; 2e-16 *** ## Gr_Liv_Area 3.865e-03 2.053e-04 18.821 &lt; 2e-16 *** ## Central_AirY 3.492e+00 5.396e-01 6.471 9.72e-11 *** ## factor(Fireplaces)1 1.105e+00 1.267e-01 8.720 &lt; 2e-16 *** ## factor(Fireplaces)2 5.653e-01 2.404e-01 2.351 0.0187 * ## factor(Fireplaces)3 -3.406e-01 1.124e+00 -0.303 0.7618 ## factor(Fireplaces)4 8.971e+00 3.247e+02 0.028 0.9780 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2793.5 on 2050 degrees of freedom ## Residual deviance: 1719.0 on 2044 degrees of freedom ## AIC: 1733 ## ## Number of Fisher Scoring iterations: 11 Just like with linear regression, categorical predictor variables are a comparison between two categories. Again, the coefficients from the logistic regression model need to be transformed to be interpreted. 100*(exp(cbind(coef(ames_logit2), confint(ames_logit2)))-1) ## 2.5 % 97.5 % ## (Intercept) -9.999598e+01 -99.9990095 -99.986187 ## Gr_Liv_Area 3.872135e-01 0.3477841 0.428628 ## Central_AirY 3.184376e+03 1140.6011835 10341.626968 ## factor(Fireplaces)1 2.018694e+02 135.6665468 287.333018 ## factor(Fireplaces)2 7.598938e+01 9.8706619 182.357744 ## factor(Fireplaces)3 -2.886803e+01 -91.8379042 712.344642 ## factor(Fireplaces)4 7.872521e+05 -100.0000000 NA Let’s use the first fireplace variable as an example. A home with one fireplace has, on average, 167.04% higher odds of being bonus eligible as compared to a home with zero fireplaces. 7.4.4 Model Assessment There are dozens of different ways to evaluate a logistic regression model. We will cover one popular way here - concordance. Counting the number of concordant, discordant, and tied pairs is a way to to assess how well the model fits the data. To find concordant, discordant, and tied pairs, we must compare all of the 0’s in the target variable to all of the 1’s. For our example, we will compare every pair of homes where one home is bonus eligible and one is not (every 0 and 1 pair). A concordant pair is a 0 and 1 pair where the bonus eligible home (the 1 in our model) has a higher predicted probability than the non-bonus eligible home (the 0 in our model) - our model successfully ordered these two observations by probability. It does not matter what the actual predicted probability values are as long as the bonus eligible home has a higher predicted probability than the non-bonus eligible home. A discordant pair is a 0 and 1 pair where the bonus eligible home (the 1 in our model) has a lower predicted probability than the non-bonus eligible home (the 0 in our model) - our model unsuccessfully ordered the homes. It does not matter what the actual predicted probability values are as long as the bonus eligible home has a lower predicted probability than the non-bonus eligible home. A tied pair is a 0 and 1 pair where the bonus eligible home has the same predicted probability as the non-bonus eligible home - the model is confused and sees these two different things as the same. In general, you want a high percentage of concordant pairs and low percentages of discordant and tied pairs. We can use the concordance function from the survival package to obtain these values on our predictions from the predict function. library(survival) survival::concordance(ames_logit) ## Call: ## concordance.lm(object = ames_logit) ## ## n= 2051 ## Concordance= 0.8667 se= 0.007638 ## concordant discordant tied.x tied.y tied.xy ## 889098 136494 618 1074078 1987 From the above output we have a concordance of 86.3% for our model. There is no good or bad value as this can only be compared with another model to see which is better. Let’s compare this to our model with the categorical variables. survival::concordance(ames_logit2) ## Call: ## concordance.lm(object = ames_logit2) ## ## n= 2051 ## Concordance= 0.8883 se= 0.006924 ## concordant discordant tied.x tied.y tied.xy ## 911452 114491 267 1074918 1147 We can see that the model with categorical predictors added to it has a higher concordance at 88.4%. That implies that our model is correctly able to rank our observations 88.4% of the time. This is NOT the same thing as saying our model is 88.4% accurate. Accuracy (which is not covered here) deals with a prediction being correct or incorrect. Concordance is only measuring how often we are able to predict 1’s with higher probability than 0’s - again, correctly ranking the observations. 7.4.5 Variable Selection and Regularized Regression As with linear regression in Chapters ?? and ??, logistic regression uses the same approaches to doing variable selection. In fact, the same function are used as well. Let’s use the step function to apply a forward and backward selection to the logistic regression model. train_sel_log &lt;- train %&gt;% dplyr::select(Bonus, Lot_Area, Street, Bldg_Type, House_Style, Overall_Qual, Roof_Style, Central_Air, First_Flr_SF, Second_Flr_SF, Full_Bath, Half_Bath, Fireplaces, Garage_Area, Gr_Liv_Area, TotRms_AbvGrd) %&gt;% mutate_if(is.numeric, ~replace_na(.,mean(., na.rm = TRUE))) full.model &lt;- glm(Bonus ~ . , data = train_sel_log) empty.model &lt;- glm(Bonus ~ 1, data = train_sel_log) for.model &lt;- step(empty.model, scope = list(lower = formula(empty.model), upper = formula(full.model)), direction = &quot;forward&quot;, k = log(dim(train_sel_log)[1])) ## Start: AIC=2936.6 ## Bonus ~ 1 ## ## Df Deviance AIC ## + Overall_Qual 9 241.79 1513.7 ## + Full_Bath 1 320.37 2029.9 ## + Gr_Liv_Area 1 333.13 2110.0 ## + Garage_Area 1 367.73 2312.6 ## + First_Flr_SF 1 394.70 2457.8 ## + Fireplaces 1 416.02 2565.7 ## + TotRms_AbvGrd 1 422.26 2596.2 ## + House_Style 7 444.83 2748.8 ## + Half_Bath 1 464.73 2792.8 ## + Second_Flr_SF 1 465.87 2797.8 ## + Lot_Area 1 479.09 2855.2 ## + Central_Air 1 480.52 2861.3 ## + Bldg_Type 4 483.41 2896.5 ## &lt;none&gt; 500.35 2936.6 ## + Street 1 499.98 2942.7 ## + Roof_Style 5 494.42 2950.3 ## ## Step: AIC=1513.66 ## Bonus ~ Overall_Qual ## ## Df Deviance AIC ## + Full_Bath 1 208.81 1220.5 ## + Gr_Liv_Area 1 212.09 1252.5 ## + First_Flr_SF 1 223.60 1360.9 ## + Garage_Area 1 228.75 1407.6 ## + TotRms_AbvGrd 1 228.77 1407.8 ## + Fireplaces 1 229.16 1411.2 ## + Lot_Area 1 230.85 1426.3 ## + Bldg_Type 4 234.95 1485.3 ## + Second_Flr_SF 1 237.69 1486.2 ## + Half_Bath 1 238.06 1489.4 ## + House_Style 7 234.20 1501.6 ## + Central_Air 1 240.80 1512.9 ## &lt;none&gt; 241.79 1513.7 ## + Street 1 241.67 1520.3 ## + Roof_Style 5 241.66 1550.8 ## ## Step: AIC=1220.54 ## Bonus ~ Overall_Qual + Full_Bath ## ## Df Deviance AIC ## + Fireplaces 1 197.59 1114.9 ## + First_Flr_SF 1 199.43 1133.9 ## + Gr_Liv_Area 1 199.66 1136.2 ## + Lot_Area 1 201.08 1150.8 ## + Bldg_Type 4 198.88 1151.1 ## + Garage_Area 1 201.30 1153.0 ## + Half_Bath 1 205.79 1198.3 ## + TotRms_AbvGrd 1 207.31 1213.3 ## + Central_Air 1 207.48 1215.1 ## &lt;none&gt; 208.81 1220.5 ## + Street 1 208.58 1225.9 ## + Second_Flr_SF 1 208.73 1227.4 ## + House_Style 7 204.34 1229.5 ## + Roof_Style 5 208.58 1256.4 ## ## Step: AIC=1114.89 ## Bonus ~ Overall_Qual + Full_Bath + Fireplaces ## ## Df Deviance AIC ## + Garage_Area 1 191.68 1060.3 ## + Bldg_Type 4 190.18 1067.0 ## + First_Flr_SF 1 192.82 1072.4 ## + Lot_Area 1 193.54 1080.0 ## + Gr_Liv_Area 1 193.65 1081.2 ## + Half_Bath 1 195.75 1103.4 ## + House_Style 7 192.36 1113.2 ## + Central_Air 1 196.84 1114.8 ## &lt;none&gt; 197.59 1114.9 ## + TotRms_AbvGrd 1 197.29 1119.5 ## + Street 1 197.40 1120.5 ## + Second_Flr_SF 1 197.59 1122.5 ## + Roof_Style 5 197.36 1150.7 ## ## Step: AIC=1060.26 ## Bonus ~ Overall_Qual + Full_Bath + Fireplaces + Garage_Area ## ## Df Deviance AIC ## + Bldg_Type 4 185.66 1025.3 ## + First_Flr_SF 1 188.98 1038.7 ## + Lot_Area 1 188.98 1038.8 ## + Gr_Liv_Area 1 189.00 1038.9 ## + Half_Bath 1 190.09 1050.8 ## &lt;none&gt; 191.68 1060.3 ## + House_Style 7 187.18 1064.9 ## + Central_Air 1 191.45 1065.4 ## + TotRms_AbvGrd 1 191.50 1066.0 ## + Street 1 191.54 1066.4 ## + Second_Flr_SF 1 191.66 1067.6 ## + Roof_Style 5 191.34 1094.7 ## ## Step: AIC=1025.26 ## Bonus ~ Overall_Qual + Full_Bath + Fireplaces + Garage_Area + ## Bldg_Type ## ## Df Deviance AIC ## + First_Flr_SF 1 182.97 1003.0 ## + Gr_Liv_Area 1 183.09 1004.3 ## + Half_Bath 1 183.66 1010.7 ## + Lot_Area 1 183.80 1012.3 ## + House_Style 7 180.53 1021.1 ## &lt;none&gt; 185.66 1025.3 ## + Street 1 185.40 1030.0 ## + TotRms_AbvGrd 1 185.48 1030.9 ## + Central_Air 1 185.58 1032.1 ## + Second_Flr_SF 1 185.64 1032.7 ## + Roof_Style 5 185.23 1058.6 ## ## Step: AIC=1003.02 ## Bonus ~ Overall_Qual + Full_Bath + Fireplaces + Garage_Area + ## Bldg_Type + First_Flr_SF ## ## Df Deviance AIC ## + Half_Bath 1 178.69 962.02 ## + House_Style 7 176.90 987.19 ## + Second_Flr_SF 1 181.17 990.33 ## + Gr_Liv_Area 1 181.34 992.26 ## + Lot_Area 1 181.95 999.12 ## &lt;none&gt; 182.97 1003.02 ## + Street 1 182.68 1007.38 ## + TotRms_AbvGrd 1 182.87 1009.44 ## + Central_Air 1 182.93 1010.10 ## + Roof_Style 5 182.15 1031.88 ## ## Step: AIC=962.02 ## Bonus ~ Overall_Qual + Full_Bath + Fireplaces + Garage_Area + ## Bldg_Type + First_Flr_SF + Half_Bath ## ## Df Deviance AIC ## + Lot_Area 1 177.86 960.18 ## &lt;none&gt; 178.69 962.02 ## + Street 1 178.37 966.04 ## + House_Style 7 174.46 966.34 ## + TotRms_AbvGrd 1 178.47 967.14 ## + Second_Flr_SF 1 178.63 969.05 ## + Gr_Liv_Area 1 178.66 969.31 ## + Central_Air 1 178.68 969.59 ## + Roof_Style 5 178.01 992.33 ## ## Step: AIC=960.18 ## Bonus ~ Overall_Qual + Full_Bath + Fireplaces + Garage_Area + ## Bldg_Type + First_Flr_SF + Half_Bath + Lot_Area ## ## Df Deviance AIC ## &lt;none&gt; 177.86 960.18 ## + House_Style 7 173.72 965.18 ## + TotRms_AbvGrd 1 177.65 965.37 ## + Street 1 177.71 966.01 ## + Second_Flr_SF 1 177.82 967.32 ## + Gr_Liv_Area 1 177.84 967.56 ## + Central_Air 1 177.86 967.77 ## + Roof_Style 5 177.19 990.50 back.model &lt;- step(full.model, scope = list(lower = formula(empty.model), upper = formula(full.model)), direction = &quot;backward&quot;, k = log(dim(train_sel_log)[1])) ## Start: AIC=1017.24 ## Bonus ~ Lot_Area + Street + Bldg_Type + House_Style + Overall_Qual + ## Roof_Style + Central_Air + First_Flr_SF + Second_Flr_SF + ## Full_Bath + Half_Bath + Fireplaces + Garage_Area + Gr_Liv_Area + ## TotRms_AbvGrd ## ## Df Deviance AIC ## - Roof_Style 5 172.63 990.45 ## - Central_Air 1 171.68 1009.63 ## - Gr_Liv_Area 1 171.70 1009.84 ## - Second_Flr_SF 1 171.82 1011.30 ## - Street 1 171.82 1011.34 ## - First_Flr_SF 1 171.91 1012.43 ## - TotRms_AbvGrd 1 172.00 1013.38 ## - Lot_Area 1 172.26 1016.56 ## &lt;none&gt; 171.68 1017.24 ## - House_Style 7 176.40 1019.54 ## - Garage_Area 1 172.92 1024.38 ## - Half_Bath 1 173.34 1029.30 ## - Fireplaces 1 174.23 1039.90 ## - Bldg_Type 4 177.88 1059.52 ## - Full_Bath 1 187.89 1194.62 ## - Overall_Qual 9 214.40 1404.39 ## ## Step: AIC=990.45 ## Bonus ~ Lot_Area + Street + Bldg_Type + House_Style + Overall_Qual + ## Central_Air + First_Flr_SF + Second_Flr_SF + Full_Bath + ## Half_Bath + Fireplaces + Garage_Area + Gr_Liv_Area + TotRms_AbvGrd ## ## Df Deviance AIC ## - Central_Air 1 172.63 982.83 ## - Gr_Liv_Area 1 172.65 983.08 ## - Street 1 172.75 984.26 ## - Second_Flr_SF 1 172.78 984.54 ## - First_Flr_SF 1 172.87 985.60 ## - TotRms_AbvGrd 1 172.98 987.01 ## - House_Style 7 177.06 989.06 ## - Lot_Area 1 173.21 989.68 ## &lt;none&gt; 172.63 990.45 ## - Garage_Area 1 173.87 997.50 ## - Half_Bath 1 174.33 1002.92 ## - Fireplaces 1 175.05 1011.41 ## - Bldg_Type 4 178.72 1031.05 ## - Full_Bath 1 189.48 1173.79 ## - Overall_Qual 9 215.48 1376.52 ## ## Step: AIC=982.83 ## Bonus ~ Lot_Area + Street + Bldg_Type + House_Style + Overall_Qual + ## First_Flr_SF + Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + ## Garage_Area + Gr_Liv_Area + TotRms_AbvGrd ## ## Df Deviance AIC ## - Gr_Liv_Area 1 172.65 975.47 ## - Street 1 172.75 976.63 ## - Second_Flr_SF 1 172.78 976.92 ## - First_Flr_SF 1 172.87 977.98 ## - TotRms_AbvGrd 1 172.99 979.39 ## - House_Style 7 177.07 981.54 ## - Lot_Area 1 173.21 982.08 ## &lt;none&gt; 172.63 982.83 ## - Garage_Area 1 173.90 990.23 ## - Half_Bath 1 174.37 995.78 ## - Fireplaces 1 175.07 1003.96 ## - Bldg_Type 4 178.81 1024.45 ## - Full_Bath 1 189.54 1166.82 ## - Overall_Qual 9 215.48 1368.90 ## ## Step: AIC=975.47 ## Bonus ~ Lot_Area + Street + Bldg_Type + House_Style + Overall_Qual + ## First_Flr_SF + Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + ## Garage_Area + TotRms_AbvGrd ## ## Df Deviance AIC ## - Street 1 172.78 969.27 ## - TotRms_AbvGrd 1 173.04 972.39 ## - House_Style 7 177.12 974.52 ## - Lot_Area 1 173.23 974.71 ## &lt;none&gt; 172.65 975.47 ## - Second_Flr_SF 1 173.48 977.68 ## - Garage_Area 1 173.93 982.93 ## - Half_Bath 1 174.40 988.42 ## - Fireplaces 1 175.09 996.57 ## - First_Flr_SF 1 175.72 1003.88 ## - Bldg_Type 4 178.81 1016.85 ## - Full_Bath 1 189.54 1159.26 ## - Overall_Qual 9 215.56 1362.08 ## ## Step: AIC=969.27 ## Bonus ~ Lot_Area + Bldg_Type + House_Style + Overall_Qual + First_Flr_SF + ## Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + Garage_Area + ## TotRms_AbvGrd ## ## Df Deviance AIC ## - TotRms_AbvGrd 1 173.18 966.48 ## - House_Style 7 177.26 968.44 ## &lt;none&gt; 172.78 969.27 ## - Lot_Area 1 173.48 970.05 ## - Second_Flr_SF 1 173.60 971.40 ## - Garage_Area 1 174.06 976.86 ## - Half_Bath 1 174.52 982.23 ## - Fireplaces 1 175.21 990.40 ## - First_Flr_SF 1 175.80 997.22 ## - Bldg_Type 4 178.83 1009.47 ## - Full_Bath 1 189.61 1152.36 ## - Overall_Qual 9 215.76 1356.36 ## ## Step: AIC=966.48 ## Bonus ~ Lot_Area + Bldg_Type + House_Style + Overall_Qual + First_Flr_SF + ## Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + Garage_Area ## ## Df Deviance AIC ## - Second_Flr_SF 1 173.72 965.18 ## &lt;none&gt; 173.18 966.48 ## - House_Style 7 177.82 967.32 ## - Lot_Area 1 173.93 967.71 ## - Garage_Area 1 174.57 975.29 ## - Half_Bath 1 175.02 980.51 ## - Fireplaces 1 175.64 987.80 ## - First_Flr_SF 1 175.91 990.93 ## - Bldg_Type 4 179.48 1009.22 ## - Full_Bath 1 189.74 1146.18 ## - Overall_Qual 9 216.32 1353.98 ## ## Step: AIC=965.18 ## Bonus ~ Lot_Area + Bldg_Type + House_Style + Overall_Qual + First_Flr_SF + ## Full_Bath + Half_Bath + Fireplaces + Garage_Area ## ## Df Deviance AIC ## - House_Style 7 177.86 960.18 ## &lt;none&gt; 173.72 965.18 ## - Lot_Area 1 174.46 966.34 ## - Garage_Area 1 175.23 975.36 ## - Half_Bath 1 176.10 985.56 ## - First_Flr_SF 1 176.18 986.38 ## - Fireplaces 1 176.55 990.69 ## - Bldg_Type 4 180.22 1010.00 ## - Full_Bath 1 194.04 1184.50 ## - Overall_Qual 9 216.90 1351.89 ## ## Step: AIC=960.18 ## Bonus ~ Lot_Area + Bldg_Type + Overall_Qual + First_Flr_SF + ## Full_Bath + Half_Bath + Fireplaces + Garage_Area ## ## Df Deviance AIC ## &lt;none&gt; 177.86 960.18 ## - Lot_Area 1 178.69 962.02 ## - Garage_Area 1 179.70 973.64 ## - Fireplaces 1 180.34 980.86 ## - First_Flr_SF 1 181.69 996.25 ## - Bldg_Type 4 183.93 998.48 ## - Half_Bath 1 181.95 999.12 ## - Full_Bath 1 202.73 1220.95 ## - Overall_Qual 9 222.87 1354.17 In the above two approaches we used the BIC selection criteria. Here both forward and backward selection actually picked the same model. Let’s check the concordance of this model. survival::concordance(back.model) ## Call: ## concordance.lm(object = back.model) ## ## n= 2051 ## Concordance= 0.9615 se= 0.003645 ## concordant discordant tied.x tied.y tied.xy ## 986667 39541 2 1076027 38 Not surprisingly, this model outperforms the previous model that we had with a concordance of 96.1%. Although not covered in detail here, regularized regression can also be applied to logistic regression to get a different view. This might be helpful with the multicollinearity present in these predictor variables. Again, we can use the glmnet function with the addition of a family = \"binomial\" option. 7.4.6 Python Code Linear Probability Model import statsmodels.formula.api as smf lp_model = smf.ols(&quot;Bonus ~ Gr_Liv_Area&quot;, data = train).fit() lp_model.summary() OLS Regression Results Dep. Variable: Bonus R-squared: 0.328 Model: OLS Adj. R-squared: 0.327 Method: Least Squares F-statistic: 998.6 Date: Tue, 17 Jun 2025 Prob (F-statistic): 7.04e-179 Time: 13:18:50 Log-Likelihood: -1063.1 No. Observations: 2051 AIC: 2130. Df Residuals: 2049 BIC: 2142. Df Model: 1 Covariance Type: nonrobust coef std err t P>|t| [0.025 0.975] Intercept -0.4056 0.028 -14.471 0.000 -0.461 -0.351 Gr_Liv_Area 0.0006 1.76e-05 31.601 0.000 0.001 0.001 Omnibus: 0.074 Durbin-Watson: 2.088 Prob(Omnibus): 0.964 Jarque-Bera (JB): 0.093 Skew: 0.014 Prob(JB): 0.955 Kurtosis: 2.983 Cond. No. 4.96e+03 Notes:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.[2] The condition number is large, 4.96e+03. This might indicate that there arestrong multicollinearity or other numerical problems. sm.api.qqplot(lp_model.resid) plt.show() train[&#39;pred_lp&#39;] = lp_model.predict() train[&#39;resid_lp&#39;] = lp_model.resid train[[&#39;Bonus&#39;, &#39;pred_lp&#39;, &#39;resid_lp&#39;]].head(n = 10) ## Bonus pred_lp resid_lp ## 2278 0 0.727900 -0.727900 ## 1379 0 0.098187 -0.098187 ## 2182 0 0.191808 -0.191808 ## 1436 1 0.515023 0.484977 ## 1599 0 0.202954 -0.202954 ## 452 1 0.322209 0.677791 ## 585 1 1.065604 -0.065604 ## 1078 0 0.500534 -0.500534 ## 2452 1 1.002075 -0.002075 ## 1658 0 0.565735 -0.565735 plt.cla() ax = sns.relplot(data = train, y = &quot;resid_lp&quot;, x = &quot;pred_lp&quot;) ax.set(ylabel = &#39;Residuals&#39;, xlabel = &#39;Predicted Probability of Bonus&#39;) plt.show() Binary Logistic Regression log_model = smf.logit(&quot;Bonus ~ Gr_Liv_Area&quot;, data = train).fit() ## Optimization terminated successfully. ## Current function value: 0.466728 ## Iterations 7 log_model.summary() Logit Regression Results Dep. Variable: Bonus No. Observations: 2051 Model: Logit Df Residuals: 2049 Method: MLE Df Model: 1 Date: Tue, 17 Jun 2025 Pseudo R-squ.: 0.3179 Time: 13:18:51 Log-Likelihood: -957.26 converged: True LL-Null: -1403.4 Covariance Type: nonrobust LLR p-value: 4.571e-196 coef std err z P>|z| [0.025 0.975] Intercept -6.3503 0.286 -22.231 0.000 -6.910 -5.790 Gr_Liv_Area 0.0041 0.000 21.645 0.000 0.004 0.004 odds_ratio = 100*(np.exp(log_model.params) - 1) print(odds_ratio) ## Intercept -99.825386 ## Gr_Liv_Area 0.405848 ## dtype: float64 Adding Categorical Variables log_model2 = smf.logit(&quot;Bonus ~ Gr_Liv_Area + C(Central_Air) + C(Fireplaces)&quot;, data = train).fit() ## Warning: Maximum number of iterations has been exceeded. ## Current function value: 0.421157 ## Iterations: 35 ## C:\\PROGRA~3\\ANACON~1\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals log_model2.summary() Logit Regression Results Dep. Variable: Bonus No. Observations: 2051 Model: Logit Df Residuals: 2044 Method: MLE Df Model: 6 Date: Tue, 17 Jun 2025 Pseudo R-squ.: 0.3845 Time: 13:18:51 Log-Likelihood: -863.79 converged: False LL-Null: -1403.4 Covariance Type: nonrobust LLR p-value: 6.407e-230 coef std err z P>|z| [0.025 0.975] Intercept -10.1177 0.667 -15.176 0.000 -11.424 -8.811 C(Central_Air)[T.Y] 3.4809 0.536 6.495 0.000 2.430 4.531 C(Fireplaces)[T.1] 1.1059 0.126 8.766 0.000 0.859 1.353 C(Fireplaces)[T.2] 0.6891 0.235 2.930 0.003 0.228 1.150 C(Fireplaces)[T.3] -0.4379 0.964 -0.454 0.650 -2.328 1.452 C(Fireplaces)[T.4] 17.4289 3.95e+04 0.000 1.000 -7.73e+04 7.73e+04 Gr_Liv_Area 0.0039 0.000 18.786 0.000 0.004 0.004 odds_ratio = 100*(np.exp(log_model2.params) - 1) print(odds_ratio) ## Intercept -9.999596e+01 ## C(Central_Air)[T.Y] 3.149026e+03 ## C(Fireplaces)[T.1] 2.021892e+02 ## C(Fireplaces)[T.2] 9.919188e+01 ## C(Fireplaces)[T.3] -3.545996e+01 ## C(Fireplaces)[T.4] 3.709002e+09 ## Gr_Liv_Area 3.928177e-01 ## dtype: float64 odds_ratio = (np.exp(log_model2.params)) print(odds_ratio) ## Intercept 4.035898e-05 ## C(Central_Air)[T.Y] 3.249026e+01 ## C(Fireplaces)[T.1] 3.021892e+00 ## C(Fireplaces)[T.2] 1.991919e+00 ## C(Fireplaces)[T.3] 6.454004e-01 ## C(Fireplaces)[T.4] 3.709002e+07 ## Gr_Liv_Area 1.003928e+00 ## dtype: float64 Model Assessment Python doesn’t have concordant / discordant pair calculations. We will learn in Fall semester other metrics to evaluate a logistic regression model that Python does have. Variable Selection and Regularized Regression Python does NOT have nice capabilities to do variable selection automatically in statsmodels, scikitlearn, or scipy. All resources I can find involve downloading and installing a package (mlxtend) that is not included by default in anaconda or writing your own function. Scikit learn has something similar but uses the model’s coefficients (!!!) to select, not p-values. Scikit learn can do this by evaluating a metric on cross-validation, but that is not covered until machine learning in Fall 3. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
