[["index.html", "Statistical Foundations About", " Statistical Foundations About Authors Aric Labarr, Phd - Institute for Advanced Analytics @ NC State Susan Simmons, PhD - Institute for Advanced Analytics @ NC State with special thanks to the contributions from Dr. Shaina Race Structure of the book The book is broken down into small sections that aim to demonstrate a single concept at a time. The companion text, Data Manipulation Techniques with R introduces the foundations of programming in R. This book is a work in progress. Submit any issues here. Please check back frequently for updates. Acknowledgements The authors would like to thank the members of the faculty and the TAs at the Institute for Advanced Analytics for providing feedback on this work. "],["intro-stat.html", "Chapter 1 Introduction to Statistics 1.1 Exploratory Data Analysis (EDA) 1.2 Point Estimates 1.3 Confidence Intervals 1.4 Hypothesis Testing 1.5 Two-Sample t-tests", " Chapter 1 Introduction to Statistics Welcome to your introduction to statistics. You will be learning the basics of statistics, along with applications of statistics within the R language. This book will provide fundamentals of the concepts and the code to apply these concepts in R. At the end of each section, you will also find the Python code that will perform a comparable analysis (however, in class, we will be discussing and focusing on the R code).  This Chapter aims to answer the following questions: What type of data is being analyzed? Nominal Ordinal Continuous/Discrete How do we describe distributions of these variables? Center Spread Shape Graphical Display How do we create confidence intervals for parameters? How do we perform hypothesis testing? One sample t-test Two sample t-test Testing Normality Testing Equality of Variances Testing Equality of Means Mann-Whitney-Wilcoxon Test The following packages will be used in this textbook (there are some sections that add more later in the textbook, so keep your eyes open for those). In order to use a library in the R session, you will first need to install it on your local drive (this only needs to be done once….however, you should periodically check for updates to packages). You should also periodically check to see if R or RStudio needs to be updated as well. Installing packages: install.packages(&#39;AmesHousing&#39;) install.packages(&#39;tidyverse&#39;) install.packages(&#39;car&#39;) install.packages(&#39;DescTools&#39;) install.packages(&#39;corrplot&#39;) install.packages(&#39;mosaic&#39;) install.packages(&#39;modelr&#39;) install.packages(&#39;plotly&#39;) install.packages(&#39;ggplot2&#39;) install.packages(&#39;Hmisc&#39;) install.packages(&#39;onehot&#39;) install.packages(&#39;jmuOutlier&#39;) install.packages(&#39;leaps&#39;) install.packages(&#39;glmnet&#39;) install.packages(&#39;nortest&#39;) install.packages(&#39;lmtest&#39;) install.packages(&#39;gmodels&#39;) install.packages(&#39;vcdExtra&#39;) install.packages(&#39;TSA&#39;) install.packages(&#39;carData&#39;) install.packages(&#39;epiDisplay&#39;) install.packages(&#39;gridExtra&#39;) Bringing the packages into your currently opened R session (will need to be done whenever you open a new session): library(AmesHousing) library(tidyverse) library(car) library(DescTools) library(corrplot) library(mosaic) library(modelr) library(plotly) library(ggplot2) library(Hmisc) library(onehot) library(jmuOutlier) library(leaps) library(glmnet) library(nortest) library(lmtest) library(gmodels) library(vcdExtra) library(TSA) library(carData) library(epiDisplay) library(gridExtra) 1.1 Exploratory Data Analysis (EDA) The crucial first step to any data science problem is exploratory data analysis (EDA). Before you attempt to run any models, or jump towards any formal statistical analysis, you must explore your data. Many unexpected frustrations arise when exploratory analysis is overlooked; knowing your data is critical to your ability to make necessary assumptions about it and analyzing it appropriately. This preliminary analysis will help inform our decisions for data manipulation, give us a base-level understanding of our variables and the relationships between them, and help determine which statistical analyses might be appropriate for the questions we are trying to answer. Some of the questions we aim to answer through exploratory analysis are: What kind of variables do you have? Continuous Nominal Ordinal How are the attributes stored? Strings Integers Floats/Numeric Dates What do their distributions look like? Center/Location Spread Shape Are there any anomolies? Outliers Leverage points Missing values Low-frequency categories Throughout the textbook, we will continue to use a real-estate data set that contains the sale_price and numerous physical attributes of nearly 3,000 homes in Ames, Iowa in the early 2000s. You should have already loaded the AmesHousing package which has the data set, so now we will create a nicely formatted data set with the make_ordinal_ames() function. The function str() is a good way to see what variables are in the data set and how they are currently formatted. Take a look at some of the variables within the AmesHousing data set. ames &lt;- make_ordinal_ames() str(ames) 1.1.1 Types of Variables The columns of a data set are referred to by the following equivalent terms: Variables Features Attributes Predictors/Targets Factors Inputs/Outputs This book may use any of these words interchangeably to refer to a quality or quantity of interest in our data. 1.1.1.1 Nominal Variables A nominal or categorical variable is a quality of interest whose values have no logical ordering. Color (“blue”, “red”, “green”…), ethnicity (“African-American”, “Asian”, “Caucasian”,…), and style of house (“ranch”, “two-story”, “duplex”, …) are all examples of nominal attributes. The categories or values that these variables can take on - those words listed in quotes and parenthesis - are called the levels of the variable. In modeling, nominal attributes are commonly transformed into dummy variables. Dummy variables are binary columns that indicate the presence or absence of a quality. There is more than one way to create dummy variables, and the treatment/estimates will be different depending on what type of model you are using. Linear regression models will use either reference-level or effects coding, whereas other machine learning models are more likely to use one-hot encoding or a variation thereof. One-hot encoding For machine learning applications, it is common to create a binary dummy column for each level of your categorical variable. This is the most intuitive representation of categorical information, answering indicative questions for each level of the variable: “is it blue?”, “is it red?” etc. The table below gives an example of some data, the original nominal variable (color) and the one-hot encoded color information. Observation Color Blue Red Yellow Other 1 Blue 1 0 0 0 2 Yellow 0 0 1 0 3 Blue 1 0 0 0 4 Red 0 1 0 0 5 Red 0 1 0 0 6 Blue 1 0 0 0 7 Yellow 0 0 1 0 8 Other 0 0 0 1 Table 1.1: One-hot dummy variable coding for the categorical attribute color We will demonstrate the creation of this data using some simple random categorical data: set.seed(41) dat &lt;- data.frame(y = c(rnorm(10,2), rnorm(10,1),rnorm(10,0)), x1 = factor(rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each = 10)), x2 = factor(rep(c(&quot;Z&quot;, &quot;X&quot;, &quot;Y&quot;,&quot;W&quot;,&quot;V&quot;,&quot;U&quot;), each = 5))) print(dat) ## y x1 x2 ## 1 1.2056317 A Z ## 2 2.1972575 A Z ## 3 3.0017043 A Z ## 4 3.2888254 A Z ## 5 2.9057534 A Z ## 6 2.4936675 A X ## 7 2.5992858 A X ## 8 0.4203930 A X ## 9 3.0006207 A X ## 10 4.1880077 A X ## 11 -0.2093244 B Y ## 12 0.4126881 B Y ## 13 2.0561206 B Y ## 14 0.6834151 B Y ## 15 0.9454590 B Y ## 16 1.3297513 B W ## 17 1.6630951 B W ## 18 1.8783282 B W ## 19 1.2028743 B W ## 20 3.2744025 B W ## 21 -0.8992970 C V ## 22 2.1394903 C V ## 23 -1.1659510 C V ## 24 -0.0471304 C V ## 25 0.4158763 C V ## 26 1.7200805 C U ## 27 -0.7843607 C U ## 28 -1.3039296 C U ## 29 -0.4520359 C U ## 30 -1.7739919 C U Unlike reference and effects coding, which are used in linear regression models, one-hot encoding is most quickly achieved through use of the onehot package in R, which first creates an “encoder” to do the job quickly. The speed of this function has been tested against both the base R model.matrix() function and the dummyVars() function in the caret package and is substantially faster than either. library(onehot) encoder = onehot(dat) dummies = predict(encoder,dat) head(dummies) ## y x1=A x1=B x1=C x2=U x2=V x2=W x2=X x2=Y x2=Z ## [1,] 1.205632 1 0 0 0 0 0 0 0 1 ## [2,] 2.197258 1 0 0 0 0 0 0 0 1 ## [3,] 3.001704 1 0 0 0 0 0 0 0 1 ## [4,] 3.288825 1 0 0 0 0 0 0 0 1 ## [5,] 2.905753 1 0 0 0 0 0 0 0 1 ## [6,] 2.493667 1 0 0 0 0 0 1 0 0 Reference-level coding Reference-level coding is similar to one-hot encoding except one of the levels of the attribute, called the reference level, is omitted. Notice that the 4 dummy columns from Table 1.1 collectively form a linearly dependent set; that is, if you know the values of 3 of the 4 dummy variables you can determine the \\(4^{th}\\) with complete certainty. This would be a problem for linear regression, where we assume our input attributes are not linearly dependent as we will discuss when we get to Simple Linear Regression. A reference level of the attribute is often specified by the user to be a particular level worthy of comparison (a baseline), as the estimates in the regression output will be interpreted in a way that compares each non-reference level to the reference level. If a reference level is not specified by the user, one will be picked by the software by default either using the order in which the levels were encountered in the data, or their alphabetical ordering. Users should check the documentation of the associated function to understand what to expect. Table 1.2 transforms the one-hot encoding from Table 1.1 into reference-level coding with the color “blue” as the reference level. Notice the absence of the column indicating “blue” and how each blue observation exists as a row of zeros. Observation Color Red Yellow Other 1 Blue 0 0 0 2 Yellow 0 1 0 3 Blue 0 0 0 4 Red 1 0 0 5 Red 1 0 0 6 Blue 0 0 0 7 Yellow 0 1 0 8 Other 0 0 1 Table 1.2: Reference-level dummy variable coding for the categorical attribute color and the reference level of “blue” Effects coding Effects coding is useful for obtaining a more general comparative interpretation when you have approximately equal sample sizes across each level of your categorical attribute. Effects coding is designed to allow the user to compare each level to all of the other levels. More specifically the mean of each level is compared to the overall mean of your data. However, the comparison is actually to the so-called grand mean, which is the mean of the means of each group. When sample sizes are equal, the grand mean and the overall sample mean are equivalent. When sample sizes are not equal, the parameter estimates for effects coding should not be used for interpretation or explanation. Effects coding still requires a reference level, however the purpose of the reference level is not the same as it was in reference-level coding. Here, the reference level is left out in the sense that no comparison is made between it and the overall mean. Table 1.3 shows our same example with effects coding. Again we notice the absence of the column indicating “blue” but now the reference level receives values of -1 rather than 0 for all 3 dummy columns. We will revisit the interpretation of linear regression coefficients under this coding scheme in the Simple Linear Regression Section. Observation Color Red Yellow Other 1 Blue -1 -1 -1 2 Yellow 0 1 0 3 Blue -1 -1 -1 4 Red 1 0 0 5 Red 1 0 0 6 Blue -1 -1 -1 7 Yellow 0 1 0 8 Other 0 0 1 Table 1.3: Effects coding for the categorical attribute color and the reference level of “blue” 1.1.1.2 Interval Variables An interval variable is a quantity of interest on which the mathematical operations of addition, subtraction, multiplication and division can be performed. Time, temperature and age are all examples of interval attributes. To illustrate the definition, note that “15 minutes” divided by “5 minutes” is 3, which indicates that 15 minutes is 3 times as long as 5 minutes. The sensible interpretation of this simple arithmetic sentence demonstrates the nature of interval attributes. One should note that such arithmetic would not make sense in the treatment of nominal variables. 1.1.1.3 Ordinal Variables Ordinal variables are attributes that are qualitative in nature but have some natural ordering. Level of education is a common example, with a level of ‘PhD’ indicating more education than ‘Bachelors’ but lacking a numerical framework to quantify how much more. The treatment of ordinal variables will depend on the application. Survey responses on a Likert scale are also ordinal - a response of 4=“somewhat agree” on a 1-to-5 scale of agreement cannot reliably be said to be twice as enthusiastic as a response of 2=“somewhat disagree”. These are not interval measurements, though they are often treated as such in a trade-off for computational efficiency. Ordinal variables will either be given some numeric value and treated as interval variables or they will be treated as categorical variables and dummy variables will be created. The choice of solution is up to the analyst. When numeric values are assigned to ordinal variables, the possibilities are many. For example, consider level of education. The simplest ordinal treatment for such an attribute might be something like Table 1.4. Level of Education Numeric Value No H.S. Diploma 1 H.S. Diploma or GED 2 Associates or Certificate 3 Bachelors 4 Graduate Certificate 5 Masters 6 PhD 7 Table 1.4: One potential approach to scaling the ordinal attribute level of education While numeric values have been assigned and this data and could be used like an interval attribute, it’s important to realize that the notion of a “one-unit increase” is qualitative in nature rather than quantitative. However, if we’re interested in learning whether there is a linear type of relationship between education and another attribute (meaning as education level increases, the value of another attribute increases or decreases), this would be the path to get us there. However we’re making an assumption in this model that the difference between a H.S. Diploma and an Associates degree (a difference of “1 unit”) is the same as the difference between a Master’s degree and a PhD (also a difference of “1 unit”). These types of assumptions can be flawed, and it is often desirable to develop an alternative system of measurement based either on domain expertise or the target variable of interest. This is the notion behind optimal scaling and target-level encoding. Optimal Scaling The primary idea behind optimal scaling is to transform an ordinal attribute into an interval one in a way that doesn’t restrict the numeric values to simply the integers \\(1,2,3, \\dots\\). It’s reasonable for a data scientist to use domain expertise to develop an alternative scheme. For example, if analyzing movie theater concessions with ordinal drink sizes {small, medium, large}, one is not restricted to the numeric valuation of 1=small, 2=medium, and 3=large just because it’s an ordinal variable with 3 levels. Perhaps it would make more sense to use the drink size in fluid ounces to represent the ordinality. If the small drink is 12 ounces, the medium is 20 ounces, and the large is 48 ounces, then using those values as the numerical representation would be every bit as (if not more) reasonable than using the standard integers 1, 2, and 3. If we re-consider the ordinal attribute level of education, we might decide to represent the approximate years of post-secondary schooling required to obtain a given level. This might lead us to something like the attribute values in Table 1.5. Level of Education Numeric Value No H.S. Diploma -1 H.S. Diploma or GED 0 Associate’s or Certificate 2 Bachelor’s 4 Graduate Certificate 5 Master’s 6 PhD 8 Table 1.5: One potential approach to scaling the ordinal attribute level of education If we were modeling the effect of education on something like salary, it seems reasonable to assume that the jumps between levels should not have equal distance like they did in 1.4. It seems reasonable to assume that one would experience a larger salary lift from Associate’s to Bachelor’s degree than they would from No H.S. Diploma to GED. The most common way to determine the numeric values for categories is to use information from the response variable. This is commonly referred to as target level encoding. Target Level Encoding The values in Table 1.5 might have struck the reader as logical but arbitrary. To be more scientific about the determination of those numeric values, one might wish to use information from the response variable to obtain a more precise expected change in salary for each level increase in education. At first hearing this, one might question the validity of the technique; isn’t the goal to predict salary? This line of thought is natural, which is why having a holdout sample is extremely important in this situation. To implement Target level encoding, we can simply create a look-up table that matches each level of education to the average or median salary obtained for that level. These values can be used just as readily as the arbitrary levels created in Table 1.5 to encode the ordinal attribute! 1.1.2 Distributions After reviewing the types and formats of the data inputs, we move on to some basic univariate (one variable at a time) analysis. We start by describing the distribution of values that each variable takes on. For nominal variables, this amounts to frequency tables and bar charts of how often each level of the variable appears in the data set. We’ll begin by exploring one of our nominal features, Heating_QC which categorizes the quality and condition of a home’s heating system. To create plots in R, we will use the popular ggplot2 library. At the same time, we will load the tidyverse library which we will use in the next chunk of code. library(ggplot2) library(tidyverse) ggplot(data = ames) + geom_bar(mapping = aes(x = Heating_QC),fill=&quot;orange&quot;) + labs(x=&quot;Heating System Quality&quot;,y=&quot;Frequency&quot;,title=&quot;Bar Graph of Heating System&quot;) Figure 1.1: Distribution of Nominal Variable Heating_QC To summon the same information in tabular form, we can use the count() function to create a table: ames %&gt;% count(Heating_QC) ## # A tibble: 5 × 2 ## Heating_QC n ## &lt;ord&gt; &lt;int&gt; ## 1 Poor 3 ## 2 Fair 92 ## 3 Typical 864 ## 4 Good 476 ## 5 Excellent 1495 You’ll notice that very few houses (3) have heating systems in Poor condition, and the majority of houses have systems rated Excellent. It will likely make sense to combine the categories of Fair and Poor in our eventual analysis, a decision we will later revisit. Next we create a histogram for an interval attribute like Sale_Price: ggplot(data = ames) + geom_histogram(mapping = aes(x = Sale_Price/1000),fill=&quot;blue&quot;) + labs(x = &quot;Sales Price (Thousands $)&quot;,y=&quot;Frequency&quot;,title=&quot;Histogram of Sales Price in Thousands of Dollars&quot;) Figure 1.2: Distribution of Interval Variable Sale_Price From this initial inspection, we can conclude that most of the houses sell for less than $200,000 and there are a number of expensive anomalies. To more concretely describe and quantify a statistical distribution, we use statistics that describe the location, spread, and shape of the data. 1.1.2.1 Location The location is a measure of central tendency for a distribution. Most common measures of central tendency are mean, median, and mode. We define each of these terms below for a variable \\(\\mathbf{x}\\) having n observations with values \\(\\{x_i\\}_{i=1}^n\\), sorted in order of magnitude such that \\(x_1 \\leq x_2 \\leq \\dots \\leq x_n\\): Mean: The average of the observations, \\(\\bar{\\mathbf{x}}= \\frac{1}{n}\\sum_{i=1}^n x_i\\) Median: The “middle value” of the data. Formally, when \\(n\\) is odd, the median is the observation value, \\(x_m = x_{\\frac{(n+1)}{2}}\\) for which \\(x_i &lt; x_m\\) for 50% of the observations (excluding \\(x_m\\)). When \\(n\\) is even, \\(x_m\\) is the average of \\(x_\\frac{n}{2}\\) and \\(x_{(\\frac{n}{2}+1)}\\). The median is also known as the \\(2^{nd}\\) quartile (see next section). Mode: The most commonly occurring value in the data. Most commonly used to describe nominal attributes. Example The following table contains the heights of 10 students randomly sampled from NC State’s campus. Compute the mean, median, mode and quartiles of this variable. height 60 62 63 65 67 67 67 68 68 69 Solution: The mean is (60+62+63+65+67+67+67+68+68+69)/10 = 65.6. The median (second quartile) is (67+67)/2 = 67. The mode is 67. 1.1.2.2 Spread Once we have an understanding of the central tendency of a data set, we move on to describing the spread (the dispersion or variation) of the data. Range, interquartile range, variance, and standard deviation are all statistics that describe spread. Range: The difference between the maximum and minimum data values. Sample variance: The sum of squared differences between each data point and the mean, divided by (n-1). \\(\\frac{1}{n-1}\\sum_{i=1}^n (x_i-\\bar{x})^2\\) Standard deviation: The square root of the sample variance. In order to define interquartile range, we must first define percentiles and quartiles. Percentiles: The 99 intermediate values of the data which divide the observations into 100 equally-sized groups. The \\(r^{th}\\) percentile of the data, \\(P_{r}\\) is the number for which \\(r\\)% of the data is less than \\(P_{r}\\). Quartiles: The quartiles of the data are the \\(25^{th}\\), \\(50^{th}\\) and \\(75^{th}\\) percentiles. They are denoted as \\(Q_{1}\\) (\\(1^{st}\\) quartile), \\(Q_{2}\\) (\\(2^{nd}\\) quartile = median) and \\(Q_{3}\\) (\\(3^{rd}\\) quartile), respectively. Interquartile range (IQR): The difference between the \\(25^{th}\\) and \\(75^{th}\\) percentiles. One should note that standard deviation is more frequently reported than variance because it shares the same units as the original data, and because of the guidance provided by the empirical rule. If we’re exploring something like Sale_Price, which has the unit “dollars”, then the variance would be measured in “square-dollars”, which hampers the intuition. Standard deviation, on the other hand, would share the unit “dollars”, aiding our fundamental understanding. Example Let’s again use the table of heights from the previous example, this time computing the range, IQR, sample variance and standard deviation. height 60 62 63 65 67 67 67 68 68 69 Solution: The range 69-60 = 9. The variance is ((60-65.6)^2+(62-65.6)^2+(63-65.6)^2+(65-65.6)^2+(67-65.6)^2+(67-65.6)^2+(67-65.6)^2+(68-65.6)^2+(68-65.6)^2+(69-65.6)^2)/9 = 8.933 The standard deviation is sqrt(8.933) = 2.989 The first quartile is (62+63)/2 = 62.5 The third quartile is (68+68)/2 = 68 The IQR is 68 - 62.5 = 5.5. 1.1.2.3 Shape The final description we will want to give to distributions regards their shape. Is the histogram symmetric? Is it unimodal (having a single large “heap” of data) or multimodal (having multiple heaps”)? Does it have a longer tail on one side than the other (skew)? Is there a lot more or less data in the tails than you might expect? We’ll formalize these ideas with some illustrations. A distribution is right (left) skewed if it has a longer tail on its right (left) side, as shown in Figure 1.3. Figure 1.3: Examples of Left-Skewed (Negative Skew) and Right-skewed (Positive Skew) distributions respectively A distribution is called bimodal if it has two “heaps”, as shown in Figure 1.4. Figure 1.4: Example of a Bimodal Distribution 1.1.2.4 Summary Functions in R There are many ways to obtain all of the statistics described in the preceding sections, below we highlight 3: The describe function from the Hmisc package which can work on the entire dataset or a subset of columns. library(Hmisc) Hmisc::describe(ames$Sale_Price) ## ames$Sale_Price ## n missing distinct Info Mean Gmd .05 ## 2930 0 1032 1 180796 81960 87500 ## .10 .25 .50 .75 .90 .95 ## 105450 129500 160000 213500 281242 335000 ## ## lowest : 12789 13100 34900 35000 35311 ## highest: 611657 615000 625000 745000 755000 The tidyverse summarise function, in this case obtaining statistics for each Exter_Qual separately. library(tidyverse) ames %&gt;% group_by(Exter_Qual) %&gt;% dplyr::summarise(average = mean(Sale_Price), st.dev = sd(Sale_Price), maximum = max(Sale_Price), minimum = min(Sale_Price)) ## # A tibble: 4 × 5 ## Exter_Qual average st.dev maximum minimum ## &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 Fair 89924. 38014. 200000 13100 ## 2 Typical 143374. 41504. 415000 12789 ## 3 Good 230756. 70411. 745000 52000 ## 4 Excellent 377919. 106988. 755000 160000 The base R summary function, which can work on the entire dataset or an individual variable summary(ames$Sale_Price) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 12789 129500 160000 180796 213500 755000 1.1.3 The Normal Distribution The normal distribution, also known as the Gaussian distribution, is one of the most fundamental concepts in statistics. It is one that arises naturally out of many applications and settings. The normal distribution has the following characteristics: Symmetric Fully defined by mean and standard deviation (equivalently, variance) Bell-shaped/Unimodal Mean = Median = Mode Assymptotic to the x-axis (theoretical bounds are \\(-\\infty\\) to \\(\\infty\\)) Much of the normal distributions utility can be summarized in the empirical rule, which states that: \\(\\approx\\) 68% of data in normal distribution lies within 1 standard deviation of the mean. \\(\\approx\\) 95% of data in normal distribution lies within 2 standard deviations of the mean. \\(\\approx\\) 99.7% of data in normal distribution lies within 3 standard deviations of the mean. We can thus conclude that observations found outside of 3 standard deviations from the mean are quite rare, expected less than 1% of the time. 1.1.4 Skewness Skewness is a statistic that describes the symmetry (or lack thereof) of a distribution. A normal distribution is perfectly symmetric and has a skewness of 0. Distributions that are more right skewed will have positive values of skewness whereas distributions that are more left skewed will have negative values of skewness. 1.1.5 Kurtosis Kurtosis is a statistic that describes the tailedness of a distribution. The normal distribution has a kurtosis of 3. Distributions that are more tailed (leptokurtic or heavy-tailed) will have kurtosis values greater than 3 whereas distributions that are more less tailed (platykurtic or thin-tailed) will have values of kurtosis less than 3. For this reason, kurtosis is often reported in the form of excess kurtosis which is the raw kurtosis value minus 3. This is meant as a comparison to the normal distribution so that positive values indicate thicker tails and negative values indicate thinner tails than the normal. In Figure 1.5 below, we compare classical examples of leptokurtic and platykurtic distributions to a normal distribution with the same mean and variance. Figure 1.5: The Laplace distribution (top left) is leptokurtic because it has more data in its tails than the normal distribution with the same mean and variance. The uniform distribution (top right) is platykurtic because it has less data in its tails than the normal distribution with the same mean and variance (it effectively has no tails). 1.1.6 Graphical Displays of Distributions There are three types of plots for examining the distribution of your data values: Histograms Normal Probability Plots (QQ-plots) Box Plots 1.1.6.1 Histograms A histogram shows the shape of a univariate distribution. Each bar in the histogram represents a group of values (a bin). The height of the bar represents the either the frequency of or the percent of values in the bin. The width and number of bins is determined automatically, but the user can adjust them to see more or less detail in the histogram. Figure 1.2 demonstrated a histogram of sale price. Sometimes it’s nice to overlay a continuous approximation to the underlying distribution using a kernal density estimator with the geom_density plot, demonstrated in Figure 1.6. ggplot(ames,aes(x=Sale_Price/1000)) + geom_histogram(aes(y=..density..), alpha=0.5) + geom_density( alpha = 0.2) + labs(x = &quot;Sales Price (Thousands $)&quot;) Figure 1.6: Histogram of Sale_Price with kernal density estimator In our next example, Figure 1.7, we’ll complicate the previous example by showing two distributions of sale price, one for each level of the binary variable Central_Air, overlaid on the same axes. We can immediately see that there are many more houses that have central air than do not in this data. It appears as though the two distributions have different locations, with the purple distribution centered at a larger sale price. To normalize that quantity and compare the raw probability densitites, we can change our axes to density as in Figure 1.8. ggplot(ames,aes(x=Sale_Price/1000)) + geom_histogram(data=subset(ames,Central_Air == &#39;Y&#39;),aes(fill=Central_Air), alpha = 0.2) + geom_histogram(data=subset(ames,Central_Air == &#39;N&#39;),aes(fill=Central_Air), alpha = 0.2) + labs(x = &quot;Sales Price (Thousands $)&quot;) + scale_fill_manual(name=&quot;Central_Air&quot;,values=c(&quot;red&quot;,&quot;blue&quot;),labels=c(&quot;No&quot;,&quot;Yes&quot;)) Figure 1.7: Histogram: Frequency of Sale_Price for Each value of Central_Air ggplot(ames,aes(x=Sale_Price/1000)) + geom_histogram(data=subset(ames,Central_Air == &#39;Y&#39;),aes(y=..density..,fill=Central_Air), alpha = 0.2) + geom_histogram(data=subset(ames,Central_Air == &#39;N&#39;),aes(y=..density..,fill=Central_Air), alpha = 0.2) + labs(x = &quot;Sales Price (Thousands $)&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with ## `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with ## `binwidth`. Figure 1.8: Histogram: Density of Sale_Price for varying qualities of Central_Air To ease our differentiation of the histograms even further, we again employ a kernel density estimator as shown in Figure 1.9. This is an appealing alternative to the histogram for continuous data that is assumed to originate from some smooth underlying distribution. ggplot(ames,aes(x=Sale_Price/1000)) + geom_density(data=subset(ames,Central_Air == &#39;Y&#39;),aes(fill=Central_Air), alpha = 0.2) + geom_density(data=subset(ames,Central_Air == &#39;N&#39;),aes(fill=Central_Air), alpha = 0.2) + labs(x = &quot;Sales Price (Thousands $)&quot;) Figure 1.9: Histogram: Density of Sale_Price for varying qualities of Central_Air 1.1.6.2 Normal probability plots (QQ Plots) A normal probability plot graphs the sorted data values against the values that one would expect if the same number of observations came from a theoretical normal distribution. The resulting image would look close to a straight line if the data was generated by a normal distribution. Strong deviations from a straight line indicate that the data distribution is not normal. Figure 1.10 shows a QQ plot for Sale_Price, and we can conclude that the variable is not normally distributed (in fact it is right skewed). ggplot(data = ames, aes(sample = Sale_Price/1000)) + stat_qq() + stat_qq_line() Figure 1.10: QQ-Plot: Quantiles of Sale_Price vs. quantiles of a theoretical normal distribution with same mean and standard deviation. Conclusion: Sale_Price is not normally distributed due to a problem with skew. There are two main patterns that we expect to find when examining QQ-plots: A quadratic shape, as seen in Figure 1.10. This pattern indicates a deviation from normality due to skewness to the data. An S-shape (or cubic shape), as seen in Figure 1.11. This pattern indicates deviation from normality due to kurtosis. df &lt;- data.frame(j1 = rlaplace(10000,0,1)) ggplot(data = df, aes(sample=j1)) + stat_qq() + stat_qq_line() Figure 1.11: QQ-Plot: Quantiles of the Laplace distribution vs. quantiles of a theoretical normal distribution with same mean and standard deviation. Conclusion: Data is not normally distributed (in fact it is leptokurtic), due to a problem with kurtosis. 1.1.6.3 Box Plots Box plots (sometimes called box-and-whisker plots) will not necessarily tell you about the shape of your distribution (for instance a bimodal distribution could have a similar box plot to a unimodal one), but it will give you a sense of the distribution’s location and spread and potential skewness. Many of us have become familiar with the idea of a box plot, but when pressed for the specific steps to create one, we realize our familiarity fades. The diagram in Figure 1.12 will remind the reader the precise information conveyed by a box plot. Figure 1.12: Anatomy of a Box Plot. Figure 1.13 shows the boxplot of Sale_Price. ggplot(data = ames, aes(y = Sale_Price/1000)) + geom_boxplot() + labs(y = &quot;Sales Price (Thousands $)&quot;) Figure 1.13: Box Plot of Sales Price Furthermore, we might want to compare the boxplots of Sale_Price for different levels of a categorical variable, like Central_Air as we did with histograms and densities in Figures 1.7 and 1.8. The following code achieves this goal in Figure 1.14. ggplot(data = ames, aes(y = Sale_Price/1000, x = Central_Air, fill = Central_Air)) + geom_boxplot() + labs(y = &quot;Sales Price (Thousands $)&quot;, x = &quot;Central Air&quot;) + scale_fill_brewer(palette=&quot;Accent&quot;) + theme_classic() + coord_flip() Figure 1.14: Box Plots of Sale_Price for each level of Exter_Qual 1.1.7 Python Code For all of the Python code throughout the book, you will need to use the following libraries: import pandas as pd import numpy as np from sklearn.preprocessing import OneHotEncoder import seaborn as sns import matplotlib.pyplot as plt from numpy import random import statsmodels.api as sma import statsmodels as sm import pylab as py import scipy.stats as stats import scipy as sp import statsmodels.formula.api as smf import sklearn from sklearn.linear_model import Ridge from sklearn.linear_model import Lasso from sklearn.linear_model import ElasticNet from sklearn.metrics import mean_squared_error For one-hot encoding in Python: x1=np.repeat([&quot;A&quot;,&quot;B&quot;,&quot;C&quot;],10) x2=np.repeat([&quot;Z&quot;, &quot;X&quot;, &quot;Y&quot;,&quot;W&quot;,&quot;V&quot;,&quot;U&quot;],5) random.seed(41) y=np.concatenate([np.random.normal(loc=2.0, scale=1.0, size=10),np.random.normal(loc=1.0, scale=1.0, size=10),np.random.normal(loc=0.0, scale=1.0, size=10)]) array=np.array([x1,x2,y]) array2=np.transpose(array) column_values=[&quot;x1&quot;,&quot;x2&quot;,&quot;y&quot;] df = pd.DataFrame(data = array2, columns = column_values) print(df) one_hot_encoded_data = pd.get_dummies(df, columns = [&#39;x1&#39;, &#39;x2&#39;]) print(one_hot_encoded_data) Bring the r data set over to Python. ames_py = r.ames ames_py = pd.DataFrame(ames_py) ames_py.describe() Creating a frequency bar plot for Heating Quality: ax = sns.countplot(x = &quot;Heating_QC&quot;, data = ames_py, color = &quot;orange&quot;) ax.set(xlabel = &#39;Heating Quality&#39;, ylabel = &#39;Frequency&#39;, title = &#39;Bar Graph of Heating System&#39;) plt.show() Creating a table of frequencies for Heating Quality: ames_py[&#39;Heating_QC&#39;].value_counts() Creating a frequency histogram of Sales Price: ax = sns.histplot(x = ames_py[&#39;Sale_Price&#39;]/1000, data = ames_py, color = &quot;blue&quot;) ax.set(xlabel = &#39;Sales Price (Thousands $)&#39;, ylabel = &#39;Frequency&#39;, title = &#39;Histogram of Sales Price in Thousands of Dollars&#39;) plt.show() Getting summary statistics by Sales Price and External Quality: ames_py[&#39;Sale_Price&#39;].describe() ames_py.groupby(&#39;Exter_Qual&#39;)[&#39;Sale_Price&#39;].describe() Overlay a density plot on top of a the Sales Price histogram: x=r.ames[&quot;Sale_Price&quot;]/1000 sns.histplot(x, kde=True, color = &#39;blue&#39;) ax = sns.displot(data = ames_py, x = ames_py[&#39;Sale_Price&#39;]/1000, kde = True) ax.set(xlabel = &#39;Sales Price (Thousands $)&#39;, ylabel = &#39;Frequency&#39;) plt.show() Overlay of density plots (for Sales Price broken down by Central Air): ax = sns.displot(data = ames_py, x = ames_py[&#39;Sale_Price&#39;]/1000, hue = &quot;Central_Air&quot;) ax.set(xlabel = &#39;Sales Price (Thousands $)&#39;, ylabel = &#39;Frequency&#39;) plt.show() ax = sns.displot(data = ames_py, x = ames_py[&#39;Sale_Price&#39;]/1000, hue = &quot;Central_Air&quot;, stat = &quot;density&quot;, common_norm = False) ax.set(xlabel = &#39;Sales Price (Thousands $)&#39;, ylabel = &#39;Density&#39;) plt.show() ax = sns.displot(data = ames_py, x = ames_py[&#39;Sale_Price&#39;]/1000, hue = &quot;Central_Air&quot;, common_norm = False, kind = &quot;kde&quot;, fill = True) ax.set(xlabel = &#39;Sales Price (Thousands $)&#39;, ylabel = &#39;Density&#39;) plt.show() QQ plots: sma.qqplot(ames_py[&#39;Sale_Price&#39;]/1000, line=&#39;45&#39;,fit=True) py.show() Boxplots: # Creating plot ax = sns.boxplot(data = ames_py, x = ames_py[&#39;Sale_Price&#39;]/1000) ax.set(xlabel = &#39;Sales Price (Thousands $)&#39;, title = &#39;Boxplot of Sales Price in Thousands of Dollars&#39;) plt.show() ax = sns.catplot(data = ames_py, x = &quot;Central_Air&quot;, y = &quot;Sale_Price&quot;, kind = &quot;box&quot;) plt.show() 1.2 Point Estimates All the statistics discussed so far have been point estimates. They are our best estimate at what the population parameter might be, but since we’ve taken a random sample of data from that population, there must be some uncertainty surrounding that estimate. In statistics, our real interest lies in drawing inferences about an entire population (which we couldn’t possibly observe due to time, cost, and/or feasibility constraints) and our approach is to take a representative sample and try to understand what it might tell us about the population. For the remainder of this text, we will assume our sample is representative of the population. Let’s review some common statistical notation of population parameters (the true values we are unable to observe) and sample statistics (those values we calculate based on our sample) Population Parmeter Sample Statistic Mean (\\(\\mu\\)) Sample Average(\\(\\bar{x}\\)) Variance (\\(\\sigma^{2}\\)) Sample Variance(\\(s^{2}_{x}\\)) Standard deviation (\\(\\sigma^{2}\\)) Sample standard deviation(\\(s_{x}\\)) Calculating point estimates should lead us to a natural question, one that embodies the field of statistics which aims to quantify uncertainty: What’s the margin of error for this estimate? This will be the subject of interest in the next section. 1.3 Confidence Intervals Let’s imagine that we want to calculate the average gas mileage of American cars on the road today in order to analyze the country’s carbon footprint. It should be clear to the reader that the calculation of the population mean would not be possible. The best we could do is take a large representative sample and calculate the sample average. Again, the next question should be: What is the margin of error for this estimate? If our sample average is 21.1 mpg, could the population mean reasonably be 21.2 mpg? how about 25 mpg? 42 mpg? To answer this question, we reach for the notion of confidence intervals. A confidence interval is an interval that we believe contains the population mean with some degree of confidence. A confidence interval is associated with a confidence level, a percentage, which indicates the strength of our confidence that the interval created actually captured the true parameter. It’s an important nuance to remember that the population mean is a fixed number. The source of randomness in our estimation is our sample. When we construct a 95% confidence interval, we are claiming that, upon repetition of the sampling and interval calculation process, we expect 95% of our created intervals to contain the population mean. To obtain a confidence interval for a mean in R, we can use the t.test() function, as shown below. t.test(ames$Sale_Price, conf.level = 0.95) ## ## One Sample t-test ## ## data: ames$Sale_Price ## t = 122.5, df = 2929, p-value &lt; 2.2e-16 ## alternative hypothesis: true mean is not equal to 0 ## 95 percent confidence interval: ## 177902.3 183689.9 ## sample estimates: ## mean of x ## 180796.1 We can gather based on the output that our 95% confidence interval for the mean of Sale_Price is [177902.3, 183689.9]. This function also outputs some extra information that relates to hypothesis testing which we will discuss in Section 1.4. For now, if we only want to pull the output containing the confidence interval information, we can specify $conf.int to the object output from t.test: t.test(ames$Sale_Price, conf.level = 0.95)$conf.int ## [1] 177902.3 183689.9 ## attr(,&quot;conf.level&quot;) ## [1] 0.95 To learn the labels of the various pieces of output, you can list them with the ls() function, or by saving the output as an object (below, results is the object that stores the output) and exploring it in your environment (upper right panel in RStudio): ls(t.test(ames$Sale_Price, conf.level = 0.95)) ## [1] &quot;alternative&quot; &quot;conf.int&quot; &quot;data.name&quot; &quot;estimate&quot; ## [5] &quot;method&quot; &quot;null.value&quot; &quot;p.value&quot; &quot;parameter&quot; ## [9] &quot;statistic&quot; &quot;stderr&quot; results &lt;- t.test(ames$Sale_Price, conf.level = 0.95) 1.3.1 Python Code Confidence intervals: d = sm.stats.weightstats.DescrStatsW(ames_py[&#39;Sale_Price&#39;]) d.tconfint_mean(0.05) 1.4 Hypothesis Testing A confidence interval can help us test a hypothesis about the population mean. A hypothesis is merely a statement that we wish to investigate scientifically through the process of statistical inference. In Section 1.3 we proposed some potential hypotheses in the form of questions: If the sample average gas mileage is 21.1, is it possible that the population mean is 21.2? How about 42? The statistical hypothesis test can help us answer these questions. To conduct a hypothesis test, we make an initial assumption. This initial assumption is called the null hypothesis and typically denoted as \\(H_0\\). We then analyze the data and determine whether our observations are likely, given our assumption of the null hypothesis. If we determine that our observed data was unlikely enough (beyond some threshold that we set before hand - or beyond a “reasonable doubt” in the justice system) then we reject our initial assumption in favor of the opposite statement, known as the alternative hypothesis denoted \\(H_a\\). The threshold or significance level that we use to determine how much evidence is required to reject the null hypothesis is a proportion, \\(\\alpha\\), which specifies how often we’re willing to incorrectly reject the null hypothesis (this means that we are assuming the null hypothesis is true). Remember, in applied statistics there are no proofs. Every decision we make comes with some degree of uncertainty. \\(\\alpha\\) quantifies our allowance for that uncertainty. In statistical textbooks of years past, \\(\\alpha = 0.05\\) was the norm. Later in this text we will propose much smaller values for \\(\\alpha\\) depending on your sample size. In order to quantify how unlikely it was that we observed a statistic as extreme or more extreme than we did, we calculate a p-value. The p-value is the area under the null distribution that represents the probability that we observed something as extreme or more extreme than we did (assuming the truth of the null hypothesis). If our p-value is less than our confidence level, \\(\\alpha\\), we have enough evidence to reject the null hypothesis in favor of the alternative. Let’s take an example and actually create a null distribution. Suppose we flip a fair coin, having equal probability of landing on heads or tails. We can actually simulate this experience with code! The following line of code does just that. Go ahead and run it a few times until you observe a coin flip of each type. sample(c(&#39;Heads&#39;,&#39;Tails&#39;), 1) ## [1] &quot;Heads&quot; Now, let’s suppose we do that many times and count the number of times we observe one outcome, say Heads. This can be done by sampling the values directly into a vector. Let n be the number of coin tosses. n=100 outcomes = sample(c(&#39;Heads&#39;,&#39;Tails&#39;), n, replace=T) We can count the number of Heads we obtained as follows: sum(outcomes==&quot;Heads&quot;) ## [1] 58 Every time you run the lines of code above you will find a different set of coin flips and a varying number of Heads; however the number of Heads will revolve around 50, because that is what we’d expect for a fair coin whose probability of Heads is 50% (Indeed, this simulates a draw from a binomial distribution with n=100 and p=0.5; the expected value of that distribution is \\(np=50\\) and the variance is \\(np(1-p)=25\\)). Thus, if were to do the above experiment thousands of times, we could map out a distribution of how many Heads one might reasonably receive by tossing a fair coin 100 times. Let’s do that, using a for loop. Let T be the number of simulated experiments (each experiment tosses the coin 100 times), and let number_heads be a vector that stores the number of heads for each experiment. We can initialize number_heads with an empty vector. Notice that our loop overwrites the coin toss data in each step, after recording the number of heads. T=10000 n=100 set.seed(11) number_heads = vector() for(i in 1:T){ outcomes = sample(c(&#39;Heads&#39;,&#39;Tails&#39;), n, replace=T) number_heads[i] = sum(outcomes==&quot;Heads&quot;) } df = data.frame(number_heads) ggplot(data = df) + geom_density(aes(x = number_heads)) + labs(x = &quot;Number of heads in 100 tosses&quot;) Figure 1.15: Null Distribution: Number of heads for fair coin tossed 100 times Figure 1.15 represents our null distribution of the number of heads from a fair coin tossed 100 times. What are the minimum and maximum values of this observed distribution? summary(df$number_heads) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 33.00 47.00 50.00 49.99 53.00 71.00 Example Suppose now we obtain a new coin from a friend and our hypothesis is that it “feels unfair”. We decide that we want a conservative signficance level of 0.01 before we accuse our friend of cheating, so we conduct a hypothesis test. Our null hypothesis must generate a known distribution to which we can compare. Thus our null hypothesis is that the coin is fair: \\[H_0 = \\text{The coin is fair:}\\quad P(Heads) = 0.5\\] Our alternative hypothesis is the opposite of this: \\[H_0 = \\text{The coin is not fair:}\\quad P(Heads) \\neq 0.5\\] Suppose we flip the coin 100 times and count 65 heads. How likely is it that we would have obtained a result as extreme or more extreme than this if the coin was fair? Here we introduce the notion of a two-tailed hypothesis test. Since our hypothesis is that the coin is simply unfair, we want to know how likely it is that we obtained a result so different from 50. This is quantified by the absolute difference between what we observed and what we expected. Thus, when considering our null distribution, we want to look at the probability we’d obtain something greater than or equal to 65 (\\(=50+15\\)) heads, or less than or equal to 35 (\\(=50-15\\)) heads. Let’s take a look at this graphically through our simulated data: Figure 1.16: Null Distribution: Number of heads for fair coin tossed 100 times We can use this simulated distribution to estimate the p-value associated with obtaining 65 heads (the red area highlighted in Figure 1.16. We’d simply calculate the proportion of times we observed values equal to or more extreme than 65 - this is the very definition of a p-value. In the following line of code, | represents the logical “or” operator. sum(number_heads&gt;=65 | number_heads&lt;=35)/T ## [1] 0.0041 Conclusion: We said at the outset that we wanted a significance level of 0.01, or 1%, for our test before we accused our friend of cheating. Based on our simulations, there is a 0.4% chance that we’d obtain the result we did, or something more extreme, if the coin was fair. Therefore, we have no choice but to reject our null hypothesis in favor of the alternative. Our friend has some explaining to do! Before we move on, we can compare the simulated result we just developed to one based on a theoretical distribution. This can be done using the prop.test() function to test a proportion. The formal test confirms our conclusion. prop.test(65, 100, p = 0.5, alternative = c(&quot;two.sided&quot;), conf.level = 0.99,correct=F) ## ## 1-sample proportions test without continuity correction ## ## data: 65 out of 100 ## X-squared = 9, df = 1, p-value = 0.0027 ## alternative hypothesis: true p is not equal to 0.5 ## 99 percent confidence interval: ## 0.5213257 0.7600081 ## sample estimates: ## p ## 0.65 The nice thing about a simulation study like the one above is that it allows the user to explore how changes in the underlying procedure might affect the outcome. We’ll next consider two pieces that of the simulation study and how they affect the p-value: the sample size (the number of coin flips) and the effect size (the observed deviation from 50% heads). What happens if we increase/decrease the number of coin flips in our experiment, but keep the effect size the same, fixed at 65% heads? If we only flipped the coin 10 times, would 6-7 heads be improbable to witness from a fair coin? If we flipped the coin 1000 times, would 650 heads be more or less improbable than that same ratio in 10 tosses? In other words, which of these situations would entail a smaller p-value? We hope that the reader now has some intuition to answer this question. If not, we encourage them to answer it by altering the value of n in the simulation code, and seeing how the changes affect the distribution of the null hypothesis. What happens if we fix the sample size at 100 tosses and decrease the effect size from 65 heads to 60 heads? We’ve already generated the data to answer this question - our p-value would increase because it would be more probable to obtain a smaller effect size from a fair coin. On the flip side (pun intended) the p-value would decrease for a larger effect size. 1.4.1 One-Sample T-Test If we want to test whether the mean of continuous variable is equal to hypothesized value, we can use the t.test() function. The following code tests whether the average sale price of homes from Ames, Iowa over the data time period is $178,000. For now, we’ll use the classic \\(\\alpha=0.05\\) as our significance level. If we have enough evidence to reject this null hypothesis, we will conclude that the mean sale price is significantly different than $178,000 for a two-tailed test (the default): t.test(ames$Sale_Price, mu = 178000) ## ## One Sample t-test ## ## data: ames$Sale_Price ## t = 1.8945, df = 2929, p-value = 0.05825 ## alternative hypothesis: true mean is not equal to 178000 ## 95 percent confidence interval: ## 177902.3 183689.9 ## sample estimates: ## mean of x ## 180796.1 Because our p-value is greater than our alpha level of 0.05, we fail to reject the null hypothesis. We do not quite have sufficient evidence to say the mean is different from 178,000. If we’re instead interested in testing whether the Sale_Price is higher than $178,000, we can specify this in the alternative= option. t.test(ames$Sale_Price, mu = 178000, alternative = &#39;greater&#39;) ## ## One Sample t-test ## ## data: ames$Sale_Price ## t = 1.8945, df = 2929, p-value = 0.02913 ## alternative hypothesis: true mean is greater than 178000 ## 95 percent confidence interval: ## 178367.7 Inf ## sample estimates: ## mean of x ## 180796.1 In this second test, we see that we actually do have enough evidence to claim that the true mean is greater than $178,000 at the \\(\\alpha=0.05\\) level. 1.4.2 Python Code Proportion test: count=65 nobs=100 value=0.5 sm.stats.proportion.proportions_ztest(count,nobs,value,alternative=&#39;two-sided&#39;,prop_var=0.5) One sample mean test (two-sided): d = sm.stats.weightstats.DescrStatsW(ames_py[&#39;Sale_Price&#39;]) d.ttest_mean(value = 178000, alternative = &#39;two-sided&#39;) One sample mean test (greater than): d = sm.stats.weightstats.DescrStatsW(ames_py[&#39;Sale_Price&#39;]) d.ttest_mean(value = 178000, alternative = &#39;larger&#39;) 1.5 Two-Sample t-tests If we have a hypothesis about a difference in the means of two groups of observations, a two-sample t-test can tell us whether that difference is statistically significant. By statistically significant, we mean the observed difference in sample means is greater than what we would expect to find if the population means were truly equal. In other words, statistical significance is a phrase that describes when our p-value falls below our significance level, \\(\\alpha\\). Typically, the groups of interest are formed by levels of a binary variable, and the t-test is a way of testing whether there is a relationship between that binary variable and the continuous variable. To conduct a two-sample t-test, our data should satisfy 3 fundamental assumptions: The observations are independent The data from each group is normally distributed The variances for each group are equal If our data does not satisfy these assumptions, we must adapt our test to the situation. If the \\(3^{rd}\\) assumption of equal variances is not met, we simply add the option var.equal=F to the t.test() function to use the Welch or Satterthwaite approximation to degrees of freedom (it’s becoming increasingly common for practitioners to use this option even when variances are equal). If the \\(2^{nd}\\) assumption is not met, one must opt for a nonparametric test like the Mann-Whitney-U test (also called the Mann–Whitney–Wilcoxon or the Wilcoxon rank-sum test). The \\(1^{st}\\) assumption is not easily checked unless the data is generated over time (time-series) and is instead generally implied by careful data collect and the application of domain expertise. 1.5.1 Testing Normality of Groups We can test the normality assumption either graphically or through formal statistical tests. The best graphical test of normality is a QQ-Plot, though histograms are often used as well. We saw in Figures 1.10 and 1.2 that the distribution of Sale_Price was not perfectly normal, however the deviations from normality were not egregious. In Figure 1.17 we again examine the normality of Sale Price, this time for each value of Central_Air: ggplot(data = ames, aes(sample = Sale_Price, color = Central_Air)) + stat_qq() + stat_qq_line() Figure 1.17: QQ-Plot: Quantiles of Sale_Price vs. quantiles of a theoretical normal distribution with same mean and standard deviation, for each level of Central_Air. Conclusion: Sale_Price is not normally distributed for Central_Air=‘Yes’ and is more normally distributed for Central_Air = ‘No’. For formal tests of normality, we most often use the Shapiro-Wilk test, although many other formal tests exist, each with their own advantages and disadvantages. All of these tests have the null hypothesis of normality: \\[H_0: \\text{ the data is normally distributed}\\] \\[H_a: \\text{ the data is NOT normally distributed}\\] We conduct formal tests as follows: shapiro.test(ames$Sale_Price[ames$Central_Air==&#39;Y&#39;]) ## ## Shapiro-Wilk normality test ## ## data: ames$Sale_Price[ames$Central_Air == &quot;Y&quot;] ## W = 0.86295, p-value &lt; 2.2e-16 shapiro.test(ames$Sale_Price[ames$Central_Air==&#39;N&#39;]) ## ## Shapiro-Wilk normality test ## ## data: ames$Sale_Price[ames$Central_Air == &quot;N&quot;] ## W = 0.95315, p-value = 4.739e-06 The formal test rejects the null hypotheses of normality and confirms what we saw in our visual analysis. For the sake of illustration, we will proceed in this example under the assumption of normality (JUST for illustration), though a non-parametric approach will also be demonstrated later in our analysis in Section 1.5.5. 1.5.2 Testing Equality of Variances We can conduct a formal test to confirm that the \\(3^{rd}\\) assumption is met. This test for equal variances is known as an F-Test. The null hypothesis is that the variances are equal, the alternative being that they are not: \\[H_0: \\sigma_1^2 = \\sigma_2^2\\] \\[H_a: \\sigma_1^2 \\neq \\sigma_2^2\\] The F-Test is invoked with the var.test function, which takes as input a formula. A formula is an R object most often created using the ~ operator, for example y ~ x + z, interpreted as a specification that the response y is to be predicted with the inputs x and z. For our present discussion on two-sample t-tests, we might think of predicting our continuous attribute with our binary attribute, provided the means are different between the two groups. The following code checks whether the distributions of Sale_Price for houses with and without central air have the same variance. var.test(Sale_Price ~ Central_Air, data = ames) ## ## F test to compare two variances ## ## data: Sale_Price by Central_Air ## F = 0.2258, num df = 195, denom df = 2733, p-value &lt; ## 2.2e-16 ## alternative hypothesis: true ratio of variances is not equal to 1 ## 95 percent confidence interval: ## 0.1854873 0.2800271 ## sample estimates: ## ratio of variances ## 0.2257977 They do not. Thus, we must opt for the var.equal=FALSE option in the t.test() procedure. 1.5.3 Testing Equality of Means Assuming the first two assumptions are met, the two-sample t-test is performed by including a binary grouping variable with into the t.test() function. Below we test whether the mean sales price is different for houses with and without Central_Air, and we include the var.equal=FALSE option because we determined that the variances of the two groups were unequal in Section 1.5.2. The null hypothesis for the t-test is that the means of the two groups are equal: \\[H_0: \\mu_1 = \\mu_2\\] \\[H_a: \\mu_1 \\neq \\mu_2\\] t.test(Sale_Price ~ Central_Air, data = ames, var.equal = FALSE) ## ## Welch Two Sample t-test ## ## data: Sale_Price by Central_Air ## t = -27.433, df = 336.06, p-value &lt; 2.2e-16 ## alternative hypothesis: true difference in means between group N and group Y is not equal to 0 ## 95 percent confidence interval: ## -90625.69 -78498.92 ## sample estimates: ## mean in group N mean in group Y ## 101890.5 186452.8 Our final conclusion from the t-test is the rejection of the null hypothesis and the conclusion that houses with and without central air should be expected to sell for different prices. 1.5.4 Python Code QQ plots for those homes with Central Air and without Central Air: yes=r.ames[r.ames[&quot;Central_Air&quot;]==&quot;Y&quot;] sma.qqplot(yes[&quot;Sale_Price&quot;], line=&#39;45&#39;,fit=True) no=r.ames[r.ames[&quot;Central_Air&quot;]==&quot;N&quot;] sma.qqplot(no[&quot;Sale_Price&quot;], line=&#39;45&#39;,fit=True) Test for Normality: sma.stats.diagnostic.normal_ad(ames_py[ames_py[&quot;Central_Air&quot;] == &#39;Y&#39;][&#39;Sale_Price&#39;]) sma.stats.diagnostic.normal_ad(ames_py[ames_py[&quot;Central_Air&quot;] == &#39;N&#39;][&#39;Sale_Price&#39;]) Test for equality of variance (need to define a function for the F-test): yes=ames_py[ames_py[&quot;Central_Air&quot;]==&quot;Y&quot;] no=ames_py[ames_py[&quot;Central_Air&quot;]==&quot;N&quot;] np.var(yes[&quot;Sale_Price&quot;],ddof=1) np.var(no[&quot;Sale_Price&quot;],ddof=1) #define F-test function def f_test(x, y): x = np.array(x) y = np.array(y) f = np.var(x, ddof=1)/np.var(y, ddof=1) #calculate F test statistic dfn = x.size-1 #define degrees of freedom numerator dfd = y.size-1 #define degrees of freedom denominator p = 1-stats.f.cdf(f, dfn, dfd) #find p-value of F test statistic return f, p f_test(yes[&quot;Sale_Price&quot;],no[&quot;Sale_Price&quot;]) Or can do Levene’s test: sp.stats.levene(ames_py[ames_py[&quot;Central_Air&quot;] == &#39;Y&#39;][&#39;Sale_Price&#39;], ames_py[ames_py[&quot;Central_Air&quot;] == &#39;N&#39;][&#39;Sale_Price&#39;]) T-test for two sample means: sp.stats.ttest_ind(ames_py[ames_py[&quot;Central_Air&quot;] == &#39;Y&#39;][&#39;Sale_Price&#39;], ames_py[ames_py[&quot;Central_Air&quot;] == &#39;N&#39;][&#39;Sale_Price&#39;], equal_var = False) 1.5.5 Mann-Whitney-Wilcoxon Test As we pointed out in Section 1.5.1, the distribution of Sale_Price was not precisely normal. The most principled way to proceed in this case would be with a non-parametric test. The Mann-Whitney-Wilcoxon test is not identical to the t-test in its null and alternative hypotheses, but it aims to answer the same question about an association between the binary attribute and the continuous attribute. The null and alternative hypotheses for this test are typically defined as follows, so long as the two groups are identically distributed (having the same shape and variance): \\[H_0: \\text{ the medians of the two groups are equal } \\] \\[H_a: \\text{ the medians of the two groups are NOT equal } \\] If those identical distributions are also symmetric, then Mann-Whitney-Wilcoxon can be interpretted as testing for a difference in means. When the data is not identically distributed, or when the distributions are not symmetric, Mann-Whitney-Wilcoxon is a test of dominance between distributions. Distributional dominance is the notion that one group’s distribution is located at larger values than another, probabilistically speaking. Formally, a random variable A has dominance over random variable B if \\(P(A x) \\geq P(B\\geq x)\\) for all \\(x\\), and for some \\(x\\), \\(P(A\\geq x) &gt; P(B\\geq x)\\). We summarize this information in the following table: Conditions Interpretation of Significant Mann-Whitney-Wilcoxon Test Group distributions are identical in shape, variance, and symmetric Difference in means Group distributions are identical in shape, variance, but not symmetric Difference in medians Group distributions are identical in shape, variance, but not symmetric Difference in location. (distributional dominance) To perform this test, we use the wilcox.test() function, whose inputs are identical to the t.test() function. wilcox.test(Sale_Price ~ Central_Air, data = ames) ## ## Wilcoxon rank sum test with continuity correction ## ## data: Sale_Price by Central_Air ## W = 63164, p-value &lt; 2.2e-16 ## alternative hypothesis: true location shift is not equal to 0 Thus, we make the same conclusion with our non-parametric test. Houses with and without central air should be expected to sell for different prices. 1.5.6 Python Code Mann-Whitney Wilcoxon test: sp.stats.mannwhitneyu(ames_py[ames_py[&quot;Central_Air&quot;] == &#39;Y&#39;][&#39;Sale_Price&#39;], ames_py[ames_py[&quot;Central_Air&quot;] == &#39;N&#39;][&#39;Sale_Price&#39;]) "],["slr.html", "Chapter 2 Introduction to ANOVA and Linear Regression 2.1 Predictive vs. Explanatory 2.2 Honest Assessment 2.3 Bivariate EDA 2.4 One-Way ANOVA 2.5 ANOVA Post-hoc Testing 2.6 Pearson Correlation 2.7 Simple Linear Regression", " Chapter 2 Introduction to ANOVA and Linear Regression This Chapter aims to answer the following questions: What is a predictive model versus an explanatory model? How to perform an honest assessment of a model. How to estimate associations. Continuous-Continuous Continuous-Categorical Pearson’s correlation Test of Hypothesis Effect of outliers Correlation Matrix How to perform ANOVA. Testing assumptions Kruskal-Wallis Post-hoc tests How to perform Simple Linear Regression. Assumptions Inference In this chapter, we introduce one of the most commonly used tools in data science: the linear model. We’ll start with some basic terminology. A linear model is an equation that typically takes the form \\[\\begin{equation} \\mathbf{y} = \\beta_0 + \\beta_1\\mathbf{x_1} + \\dots + \\beta_k\\mathbf{x_k} + \\boldsymbol \\varepsilon \\tag{2.1} \\end{equation}\\] The left-hand side of this equation, \\(\\mathbf{y}\\) is equivalently called the target, response, or dependent variable. The right-hand side is a linear combination of the columns \\(\\{\\mathbf{x_i}\\}_{i=1}^{k}\\) which are commonly referred to as explanatory, input, predictor, or independent variables. 2.1 Predictive vs. Explanatory The purpose of a linear model like Equation (2.1) is generally two-fold: The model is predictive in that it can estimate the value of \\(y\\) for a given combination of the \\(x\\) attributes. The model is explanatory in that it can estimate how \\(y\\) changes for a unit increase in a given \\(x\\) attribute, holding all else constant (via the slope parameters \\(\\beta\\)). However, it’s common for one of these purposes to be more aligned with the specific goals of your project, and it is common to approach the building of such a model differently for each purpose. In predictive modeling, you are most interested in how much error your model has on holdout data, that is, validation or test data. This is a notion that we introduce next in Section 2.2. If good predictions are all you want from your model, you are unlikely to care how many variables (including polynomial and interaction terms) are included in the final model. In explanatory modeling, you foremost want a model that is simple to interpret and doesn’t have too many input variables. It’s common to avoid many polynomial and interaction terms for explanatory models. While the error rates on holdout data will still be useful reporting metrics for explanatory models, it will be more important to craft the model for ease of interpretation. 2.2 Honest Assessment When performing predictive or explanatory modeling, we always divide our data into subsets for training, validation, and/or final testing. Because models are prone to discovering small, spurious patterns on the data that is used to create them (the training data), we set aside the validation and testing data to get a clear view of how they might perform on new data that they’ve never seen before. This is a concept that will be revisited several times throughout this text, highlighting its importance to honest assessment of models. There is no single right answer for how this division should occur for every data set - the answer depends on a multitude of factors that are beyond the scope of our present discussion. Generally speaking, one expects to keep about 70% of the data for model training purposes, and the remaining 30% for validation and testing. These proportions may change depending on the amount of data available. If one has millions of observations, they can often get away with a much smaller proportion of training data to reduce computation time and increase confidence in validation. If one has substantially fewer observations, it may be necessary to increase the training proportion in order to build a sound model - trading validation confidence for proper training. Below we demonstrate one technique for separating the data into just two subsets: training and test. These two subsets will suffice for our analyses in this text. We’ll use 70% of our data for the training set and the remainder for testing. Since we are taking a random sample, each time you run this functions you will get a different result. This can be difficult for team members who wish to keep their analyses in sync. To avoid that variation of results, we can provide a “seed” to the internal random number generation process, which ensures that the randomly generated output is the same to all who use that seed. The following code demonstrates sampling via the tidyverse. This method requires the use of an id variable. If your data set has a unique identifier built in, you may omit the first line of code (after set.seed()) and use that unique identifier in the third line. library(tidyverse) set.seed(123) ames &lt;- ames %&gt;% mutate(id = row_number()) train &lt;- ames %&gt;% sample_frac(0.7) test &lt;- anti_join(ames, train, by = &#39;id&#39;) dim(train) ## [1] 2051 82 dim(test) ## [1] 879 82 2.2.1 Python Code To create the training data set in Python from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split train,test = train_test_split(ames_py,test_size=0.3,random_state=123) train.head() However, note that this will create a different train/test split. Therefore, we will just pull in our train/test data set from R. train = r.train test = r.test 2.3 Bivariate EDA As stated in Chapter 1, exploratory data analysis is the foundation of any successful data science project. As we move on to the discussion of modeling, we begin to explore bivariate relationships in our data. In doing so, we will often explore the input variables’ relationships with the target. Such exploration should only be done on the training data; we should never let insights from the validation or test data inform our decisions about modeling. Bivariate exploratory analysis is often used to assess relationships between two variables. An association or relationship exists when the expected value of one variable changes at different levels of the other variable. A linear relationship between two continuous variables can be inferred when the general shape of a scatter plot of the two variables is a straight line. 2.3.1 Continuous-Continuous Associations Let’s conduct a preliminary assessment of the relationship between the size of the house in square feet (via Gr_Liv_Area) and the Sale_Price by creating a scatter plot (only on the training data). Note that we call this a preliminary assessment because we should not declare a statistical relationship without a formal hypothesis test (see Section 2.6). ggplot(data = train) + geom_point(mapping = aes(x = Gr_Liv_Area, y = Sale_Price/1000)) + labs(y = &quot;Sales Price (Thousands $)&quot;, x = &quot;Greater Living Area (Sqft)&quot;) Figure 2.1: Scatter plot demonstrating a positive linear relationship 2.3.2 Continuous-Categorical Associations We’ll also revisit the plots that we created in Section 1.1, this time being careful to use only our training data since our goal is eventually to use a linear model to predict Sale_Price. We start by exploring the relationship between the external quality rating of the home (via the ordinal variable Exter_Qual and the Sale_Price). The simplest graphic we may wish to create is a bar chart like Figure 2.2 that shows the average sale price of homes with each value of exterior quality. ggplot(train) + geom_bar(aes(x=Exter_Qual,y= Sale_Price), position = &quot;dodge&quot;, stat = &quot;summary&quot;, fun = &quot;mean&quot;) + scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) # Modify formatting of axis Figure 2.2: Bar Chart Comparing Average Sale Price of Homes with each Level of Exterior Quality This gives us the idea that there may be an association between these two attributes, but it can be tricky to rely solely on this graph without exploring the overall distribution in sale price for each group. While this chart is great for the purposes of reporting (once we’ve verified the relationship), it’s not the best one for exploratory analysis. The next two charts allow us to have much more information on one graphic. The frequency histogram in Figure 2.3 allows us to see that much fewer of the homes have a rating of Excellent versus the other tiers, a fact that makes it difficult to compare the distributions. To normalize that quantity and compare the raw probability densities, we can change our axes to density (which is analogous to percentage) and employ a kernel density estimator with the geom_density plot as shown in Figure 2.4. We can then clearly see that as the exterior quality of the home “goes up” (in the ordinal sense, not in the linear sense), the sale price of the home also increases. ggplot(train,aes(x=Sale_Price/1000, fill=Exter_Qual)) + geom_histogram(alpha=0.2, position=&quot;identity&quot;) + labs(x = &quot;Sales Price (Thousands $)&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with ## `binwidth`. Figure 2.3: Histogram: Frequency of Sale_Price for varying qualities of home exterior ggplot(ames,aes(x=Sale_Price/1000, fill=Exter_Qual)) + geom_density(alpha=0.2, position=&quot;identity&quot;) + labs(x = &quot;Sales Price (Thousands $)&quot;) Figure 2.4: Histogram: Density of Sale_Price for varying qualities of home exterior To further explore the location and spread of the data, we can create box-plots for each group using the following code: ggplot(data = train, aes(y = Sale_Price/1000, x = `Exter_Qual`, fill = `Exter_Qual`)) + geom_boxplot() + labs(y = &quot;Sales Price (Thousands $)&quot;, x = &quot;Exterior Quality Category&quot;) + stat_summary(fun = mean, geom = &quot;point&quot;, shape = 20, size = 5, color = &quot;red&quot;, fill = &quot;red&quot;) + scale_fill_brewer(palette=&quot;Blues&quot;) + theme_classic() + coord_flip() Figure 2.5: Box Plots of Sale_Price for each level of Exter_Qual Notice that we’ve highlighted the mean on each box-plot for the purposes of comparison. We now have a hypothesis that we may want to formally test. After all, it is not good practice to look at Figures 2.4 and 2.5 and declare that a statistical difference exists. While we do, over time, get a feel for which visually apparent relationships turn out to be statistically significant, it’s imperative that we conduct formal testing before declaring such insights to a colleague or stakeholder. If we want to test whether the Sale_Price is different for the different values of Exter_Qual, we have to reach for the multi-group alternative to the 2-sample t-test. This is called Analysis of Variance, or ANOVA for short. 2.3.3 Python Code For Continuous-Continuous Associations: ax = sns.relplot(data = train, y = train[&#39;Sale_Price&#39;]/1000, x = &quot;Gr_Liv_Area&quot;) ax.set(ylabel = &#39;Sales Price (Thousands $)&#39;, xlabel = &#39;Greater Living Area (Sqft)&#39;) plt.show() For Continuous-Categorical Associations: train[&#39;Exter_Qual&#39;] = train[&#39;Exter_Qual&#39;].cat.remove_unused_categories() ax = sns.catplot(data = train, y = &quot;Sale_Price&quot;, x = &quot;Exter_Qual&quot;, kind = &quot;bar&quot;) ax.set(ylabel = &#39;Sales Price (Thousands $)&#39;, xlabel = &#39;Exterior Quality&#39;) plt.show() ax = sns.displot(data = ames_py, x = ames_py[&#39;Sale_Price&#39;]/1000, hue = &quot;Exter_Qual&quot;) ax.set(xlabel = &#39;Sales Price (Thousands $)&#39;, ylabel = &#39;Frequency&#39;) plt.show() ax = sns.displot(data = ames_py, x = ames_py[&#39;Sale_Price&#39;]/1000, hue = &quot;Exter_Qual&quot;, common_norm = False, kind = &quot;kde&quot;, fill = True) ax.set(xlabel = &#39;Sales Price (Thousands $)&#39;, ylabel = &#39;Density&#39;) plt.show() ax = sns.catplot(data = ames_py, x = &quot;Exter_Qual&quot;, y = &quot;Sale_Price&quot;, kind = &quot;box&quot;) plt.show() 2.4 One-Way ANOVA One-way ANOVA aims to determine whether there is a difference in the mean of a continuous attribute across levels of a categorical attribute. Sound like a two-sample t-test? Indeed, it’s the extension of that test to more than two groups. Performing ANOVA with a binary input variable is mathematically identical to the two-sample t-test, as are it’s assumptions: The observations are independent The model residuals are normally distributed The variances for each group are equal A one-way ANOVA refers to a single hypothesis test, which is \\(H_{0}: \\mu_{1}=\\mu_{2}=...\\mu_{k}\\) for a predictor variable with \\(k\\) levels against the alternative of at least one difference. Although a one-way ANOVA is designed to assess whether or not there is a significant difference within the mean values of the response with respect to the different levels of the predictor variable, we can draw some parallel to the regression model. For example, if we have \\(k\\)=4, then we can let \\(x_a\\), \\(x_b\\), and \\(x_c\\) be 3 reference-coded dummy variables for the levels: a, b, c, and d. Note that we only have 3 dummy variables because one gets left out for the reference level, in this case it is d. The linear model is of the following form: \\[\\begin{equation} y=\\beta_0 + \\beta_ax_a+\\beta_bx_b+\\beta_cx_c + \\varepsilon \\tag{2.2} \\end{equation}\\] If we define \\(x_a\\) as 1 if the observation belongs to level a and 0 otherwise, and the same definition for \\(x_b\\) and \\(x_c\\), then this is called reference-level coding (this will change for effects-level coding). The predicted values in (2.2) is basically the predicted mean of the response within the 4 levels of the predictor variable. \\(\\beta_0\\) represents the mean of reference group, group d. \\(\\beta_a, \\beta_b, \\beta_c\\) all represent the difference in the respective group means compared to the reference level. Positive values thus reflect a group mean that is higher than the reference group, and negative values reflect a group mean lower than the reference group. \\(\\varepsilon\\) is called the error. A one-way ANOVA model only contains a single input variable of interest. Equation (2.2), while it has 3 dummy variable inputs, only contains a single nominal attribute. In 3, we will add more inputs to the equation via two-way ANOVA and multivariate regression models. ANOVA is used to test the following hypothesis: \\[H_0: \\beta_a=\\beta_b=\\beta_c = 0 \\quad\\text{(i.e. all group means are equal)}\\] \\[H_0: \\beta_a\\neq0\\mbox{ or }\\beta_b\\neq0 \\mbox{ or } \\beta_c \\neq 0 \\quad\\text{(i.e. at least one is different)}\\] Both the lm() function and the aov() function will provide the p-values to test the hypothesis above, the only difference between the two functions is that lm() will also provide the user with the coefficient of determinination, \\(R^2\\), which tells you how much of the variation in \\(y\\) is accounted for by your categorical input. ames_lm &lt;- lm(Sale_Price ~ Exter_Qual, data = train) anova(ames_lm) ## Analysis of Variance Table ## ## Response: Sale_Price ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Exter_Qual 3 6.6913e+12 2.2304e+12 701.83 &lt; 2.2e-16 *** ## Residuals 2047 6.5054e+12 3.1780e+09 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 summary(ames_lm) ## ## Call: ## lm(formula = Sale_Price ~ Exter_Qual, data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -215904 -32910 -6147 24793 516090 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 207785 3176 65.416 &lt; 2e-16 *** ## Exter_Qual.L 215078 8353 25.749 &lt; 2e-16 *** ## Exter_Qual.Q 44553 6353 7.013 3.15e-12 *** ## Exter_Qual.C 6994 3308 2.114 0.0346 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 56370 on 2047 degrees of freedom ## Multiple R-squared: 0.507, Adjusted R-squared: 0.5063 ## F-statistic: 701.8 on 3 and 2047 DF, p-value: &lt; 2.2e-16 # ames_aov &lt;- aov(Sale_Price ~ Exter_Qual, data = train) # Same thing with aov() function instead # summary(ames_aov) # R-squared not reported here. The p-value for the ANOVA hypothesis that all the groups have the same mean sale price is incredibly small, at \\(2.2\\times10^{-16}\\). This means it is extraordinarily improbable that we would have observed these differences in means, or a more extreme difference, if the population group means were equal. Thus, we reject our null hypothesis and conclude that there is an association between the exterior quality of a home and the price of the home. We note, based on the \\(R^2\\) statistics, that the exterior quality rating can account for almost half the variation in sales price! Adjusted \\(R^2\\) is a statistic that takes into account the number of variables in the model. The difference between \\(R^2\\) and adjusted \\(R^2\\) will be more thoroughly discussed in Chapter 3. We can also confirm what we know about the predictions from ANOVA, that there are only \\(k\\) unique predictions from an ANOVA with \\(k\\) groups (the predictions being the group means), using the predict function. train$pred_anova &lt;- predict(ames_lm, data = train) train$resid_anova &lt;- resid(ames_lm, data = train) (model_output = train %&gt;% dplyr::select(Sale_Price, pred_anova, resid_anova)) ## # A tibble: 2,051 × 3 ## Sale_Price pred_anova resid_anova ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 232600 228910. 3690. ## 2 166000 228910. -62910. ## 3 170000 142107. 27893. ## 4 252000 228910. 23090. ## 5 134000 142107. -8107. ## 6 164700 228910. -64210. ## 7 193500 142107. 51393. ## 8 118500 142107. -23607. ## 9 94000 142107. -48107. ## 10 111250 142107. -30857. ## # ℹ 2,041 more rows 2.4.1 Python Code Using statsmodels (linear regression approach to ANOVA): import statsmodels.formula.api as smf model = smf.ols(&quot;Sale_Price ~ C(Exter_Qual)&quot;, data = train).fit() model.summary() sm.api.stats.anova_lm(model, typ=2) Another way of doing it in statsmodels: sm.stats.oneway.anova_oneway(data = train[&#39;Sale_Price&#39;], groups = train[&#39;Exter_Qual&#39;], use_var = &#39;equal&#39;, welch_correction = False) Using Scipy instead of statsmodels: sp.stats.f_oneway(train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Excellent&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Good&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Typical&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Fair&#39;]) train[&#39;pred_anova&#39;] = model.predict() train[&#39;resid_anova&#39;] = model.resid train[[&#39;Sale_Price&#39;, &#39;pred_anova&#39;, &#39;resid_anova&#39;]].head(n = 10) 2.4.2 Testing Assumptions We can use the default plots from the lm() function to check the normality assumption. par(mfrow=c(2,2)) plot(ames_lm) Figure 2.6: Of the 4 default plots from lm(), we are presently interested in the top-right QQ plot that tests our assumption of normally distributed residuals. par(mfrow=c(1,1)) In the top-right plot in Figure 2.6 we verify again the approximate normality of sale price. To test for the third assumption of equal variances, we opt for a formal test like Levene’s (which depends on normality and can be found in the car package) or Fligner’s (which does not depend on normality and exists in the stats package). In both cases, the null hypothesis is equal variances: \\[H_0: \\sigma_a^2 =\\sigma_b^2 =\\sigma_c^2=\\sigma_d^2 \\quad \\text{i.e., the groups have equal variance}\\] \\[H_a: \\text{at least one group&#39;s variance is different}\\] library(car) library(stats) leveneTest(Sale_Price ~ Exter_Qual, data = train) # Most popular, but depends on Normality ## Levene&#39;s Test for Homogeneity of Variance (center = median) ## Df F value Pr(&gt;F) ## group 3 76.879 &lt; 2.2e-16 *** ## 2047 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 fligner.test(Sale_Price ~ Exter_Qual, data = train) # DOES NOT depend on Normality ## ## Fligner-Killeen test of homogeneity of variances ## ## data: Sale_Price by Exter_Qual ## Fligner-Killeen:med chi-squared = 206.26, df = 3, p-value ## &lt; 2.2e-16 And in both cases, we’re forced to reject the null hypothesis of equal variances. A non-parametric version of the ANOVA test, the Kruskal-Wallis test, is more suitable to this particular case. Non-parametric tests do not have the same statistical power to detect differences between groups. Statistical power is the probability of detecting an effect, if there is a true effect present to detect. We should opt for these tests in situations where our data is ordinal or otherwise violates the assumptions of normality or equal variances in ways that cannot be fixed by logarithmic or other similar transformation. 2.4.3 Python Code sm.api.qqplot(train[&#39;resid_anova&#39;]) plt.show() sp.stats.shapiro(model.resid) sp.stats.levene(train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Excellent&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Good&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Typical&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Fair&#39;]) sp.stats.fligner(train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Excellent&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Good&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Typical&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Fair&#39;]) 2.4.4 Kruskal-Wallis The Kruskal-Wallis test, proposed in 1952, is equivalent to a parametric one-way ANOVA where the data values have been replaced with their ranks (i.e. largest value = 1, second largest value = 2, etc.). When the data is not normally distributed but is identically distributed (having the same shape and variance), the Kruskal-Wallis test can be considered a test for differences in medians. If those identical distributions are also symmetric, then Kruskal-Wallis can be interpretted as testing for a difference in means. When the data is not identically distributed, or when the distributions are not symmetric, Kruskal-Wallis is a test of dominance between distributions. Distributional dominance is the notion that one group’s distribution is located at larger values than another, probabilistically speaking. Formally, a random variable A has dominance over random variable B if \\(P(A\\geq x) \\geq P(B\\geq x)\\) for all \\(x\\), and for some \\(x\\), \\(P(A\\geq x) &gt; P(B\\geq x)\\). We summarize this information in the following table: Conditions Interpretation of Significant Kruskal-Wallis Test Group distributions are identical in shape, variance, and symmetric Difference in means Group distributions are identical in shape, variance, but not symmetric Difference in medians Group distributions are not identical in shape, variance, and are not symmetric Difference in location. (distributional dominance) Implementing the Kruskal-Wallis test in R is simple: kruskal.test(Sale_Price ~ Exter_Qual, data = train) ## ## Kruskal-Wallis rank sum test ## ## data: Sale_Price by Exter_Qual ## Kruskal-Wallis chi-squared = 975.98, df = 3, p-value &lt; ## 2.2e-16 Our conclusion would be that the distribution of sale price is different across different levels of exterior quality. 2.4.5 Python Code sp.stats.kruskal(train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Excellent&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Good&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Typical&#39;], train[&#39;Sale_Price&#39;][train[&#39;Exter_Qual&#39;] == &#39;Fair&#39;]) 2.5 ANOVA Post-hoc Testing After performing an ANOVA and learning that there is a difference between the groups of data, our next natural question ought to be which groups of data are different, and how? In order to explore this question, we must first consider the notion of experimentwise error. When conducting multiple hypothesis tests simultaneously, the experimentwise error rate is the proportion of time you expect to make an error in at least one test. Let’s suppose we are comparing grocery spending on 4 different credit card rewards programs. If we’d like to compare the rewards programs pairwise, that entails 6 different hypothesis tests (each is a two-sample t-test). If we keep a confidence level of \\(\\alpha = 0.05\\) and subsequently view “being wrong in one test” as a random event happening with probability \\(p=0.05\\) then our probability of being wrong in at least one test out of 6 could be as great as 0.26! To control this experiment-wise error rate, we must lower our significance thresholds to account for it. Alternatively, we can view this as an adjustment of our p-values higher while keeping our significance threshold fixed as usual. This is typically the approach taken, as we prefer to fix our significance thresholds in accordance with previous literature or industry standards. There are many methods of adjustment that have been proposed over the years for this purpose. Here, we consider two popular methods: Tukey’s test for pairwise comparisons and Dunnett’s test for control group comparisons. If the reader finds themselves in a situation that doesn’t fit the prescription of either of these methods, we suggest looking next at the modified Bonferroni correction or the notion of false discovery rates proposed by Benjamini and Hochberg in 1995. 2.5.1 Tukey-Kramer If our objective is to compare each group to every other group then Tukey’s test of honest significant differences, also known as the Tukey-Kramer test is probably the most widely-available and popular corrections in practice. However, it should be noted that Tukey’s test should not be used if one does not plan to make all pairwise comparisons. If only a subset of comparisons are of interest to the user (like comparisons only to a control group) then one should opt for the Dunnett or a modified Bonferroni correction. To employ Tukey’s HSD in R, we must use the aov() function to create our ANOVA object rather than the lm() function. The output of the test shows the difference in means and the p-value for testing the null hypothesis that the means are equal (i.e. that the differences are equal to 0). ames_aov &lt;- aov(Sale_Price ~ Exter_Qual, data = train) tukey.ames &lt;- TukeyHSD(ames_aov) print(tukey.ames) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = Sale_Price ~ Exter_Qual, data = train) ## ## $Exter_Qual ## diff lwr upr p adj ## Typical-Fair 57887.91 30194.31 85581.52 5e-07 ## Good-Fair 144690.25 116739.87 172640.63 0e+00 ## Excellent-Fair 291684.79 259752.41 323617.16 0e+00 ## Good-Typical 86802.34 79910.03 93694.64 0e+00 ## Excellent-Typical 233796.87 216886.62 250707.12 0e+00 ## Excellent-Good 146994.54 129666.98 164322.10 0e+00 par(mar=c(4,10,4,2)) plot(tukey.ames, las = 1) Figure 2.7: Confidence intervals for mean differences adjusted via Tukey-Kramer The p-values in this table have been adjusted higher to account for the possible experimentwise error rate. For every pairwise comparison shown, we reject the null hypothesis and conclude that the mean sales price of the homes is different for each level of Exter_Qual. Furthermore, Figure 2.7 shows us experiment-wise (family-wise) adjusted confidence intervals for the differences in means for each pair. The plot option las=1 guides the axis labels. Type ?par for a list of plot options for base R, including an explanation of las. 2.5.2 Dunnett’s Test If the plan is to make fewer comparisons, specifically just \\(k-1\\) comparisons where \\(k\\) is the number of groups in your data (indicating you plan to compare all the groups to one specific group, usually the control group), then Dunnett’s test would be preferrable to the Tukey-Kramer test. If all pairwise comparisons are not made, the Tukey-Kramer test is overly conservative, creating a confidence level that is much lower than specified by the user. Dunnett’s test factors in fewer comparisons and thus should not be used for tests of all pairwise comparisons. To use Dunnett’s test, we must add the DescTools package to our library. The control group to which all other groups will be compared is designated by the control= option. library(DescTools) DunnettTest(x = train$Sale_Price, g = train$Exter_Qual, control = &#39;Typical&#39;) ## ## Dunnett&#39;s test for comparing several treatments with a control : ## 95% family-wise confidence level ## ## $Typical ## diff lwr.ci upr.ci pval ## Fair-Typical -57887.91 -83628.55 -32147.28 2.6e-07 *** ## Good-Typical 86802.34 80396.08 93208.59 &lt; 2e-16 *** ## Excellent-Typical 233796.87 218079.15 249514.60 &lt; 2e-16 *** ## ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 In the output from Dunnett’s test, we notice the p-value comparing Fair to Typical exterior qualities is lower than it was in the Tukey-Kramer test. This is consistent with our expectations for a test that isn’t controlling for as many comparisons; it makes a smaller upward adjustment of p-values to satisfy a given experiment-wise error rate. 2.5.3 Python Code Tukey-Kramer test: import statsmodels.stats.multicomp as mc comp = mc.MultiComparison(train[&#39;Sale_Price&#39;], train[&#39;Exter_Qual&#39;]) ph_res = comp.tukeyhsd(alpha = 0.05) ph_res.summary() ph_res.plot_simultaneous() No Dunnett’s test in Python. The team at statsmodels is supposedly “working on it”. 2.6 Pearson Correlation ANOVA is used to formally test the relationship between a categorical variable and a continuous variable. To formally test the (linear) relationship between two continuous attributes, we introduce Pearson correlation, commonly referred to as simply correlation. Correlation is a number between -1 and 1 which measures the strength of a linear relationship between two continuous attributes. Negative values of correlation indicate a negative linear relationship, meaning that as one of the variables increases, the other tends to decrease. Similarly, positive values of correlation indicate a positive linear relationship meaning that as one of the variables increases, the other tends to increase. Absolute values of correlation equal to 1 indicate a perfect linear relationship. For example, if our data had a column for “mile time in minutes” and a column for “mile time in seconds”, these two columns would have a correlation of 1 due to the fact that there are 60 seconds in a minute. A correlation value near 0 indicates that the variables have no linear relationship. It’s important to emphasize that Pearson correlation is only designed to detect linear associations between variables. Even when a correlation between two variables is 0, the two variables may still have a very clear association, whether it be quadratic, cyclical, or some other nonlinear pattern of association. Figure 2.8 illustrates all of these statements. On top of each scatter plot, the correlation coefficient is shown. The middle row of this figure aims to illustrate that a perfect correlation has nothing to do with the magnitude or slope of the relationship. In the center image, middle row, we note that the correlation is undefined for any pair that includes a constant variable. In that image, the value of \\(y\\) is constant across the sample. Equation (2.3) makes this mathematically clear. Figure 2.8: Examples of relationships and their associated correlations The population correlation parameter is denoted \\(\\rho\\) and estimated by the sample correlation, denoted as \\(r\\). The formula for the sample correlation between columns of data \\(\\mathbf{x}\\) and \\(\\mathbf{y}\\) is \\[\\begin{equation} r = \\frac{\\sum_{i=1}^n (x_i-\\bar{x})(y_i-\\bar{x})}{\\sqrt{\\sum_{i=1}^n (x_i-\\bar{x})^2\\sum_{i=1}^n(y_i-\\bar{x})^2}}. \\tag{2.3} \\end{equation}\\] Note that with centered variable vectors \\(\\mathbf{x_c}\\) and \\(\\mathbf{y_c}\\) this formula becomes much cleaner with linear algebra notation: \\[\\begin{equation} r = \\frac{\\mathbf{x_c}^T\\mathbf{y_c}}{\\|\\mathbf{x_c}\\|\\|\\mathbf{y_c}\\|}. \\tag{2.4} \\end{equation}\\] It is interesting to note that Equation (2.4) is identical to the formula for the cosine of the angle between to vectors. While this geometrical relationship does not benefit our intuition1, it is noteworthy nonetheless. Pearson’s correlation can be calculated in R with the built in cor() function, with the two continuous variables as input: cor(train$Gr_Liv_Area,train$Sale_Price) ## [1] 0.698509 2.6.1 Statistical Test To test the statistical significance of correlation, we use a t-test with the null hypothesis that the correlation is equal to 0: \\[H_0: \\rho = 0\\] \\[H_a: \\rho \\neq 0\\] If we can reject the null hypothesis, then we declare a significant linear association between the two variables. The cor.test() function in R will perform the test: cor.test(train$Gr_Liv_Area,train$Sale_Price) ## ## Pearson&#39;s product-moment correlation ## ## data: x and y ## t = 44.185, df = 2049, p-value &lt; 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.6756538 0.7200229 ## sample estimates: ## cor ## 0.698509 We conclude that Gr_Liv_Area has a linear association with Sale_Price. It must be noted that this t-test for Pearson’s correlation is not free from assumptions. In fact, there are 4 assumptions that must be met, and they are detailed in Section 2.7.1. 2.6.2 Effect of Anomalous Observations One final nuance that is important to note is the effect of anomalous observations on correlation. In Figure 2.9 we display 30 random 2-dimensional data points \\((x,y)\\) with no linear relationship. set.seed(11) x &lt;- rnorm(30) y &lt;- rnorm(30) plot(x,y) Figure 2.9: The variables x and y have no correlation The correlation is not exactly zero (we wouldn’t expect perfection from random data) but it is very close at 0.002. cor.test(x,y) ## ## Pearson&#39;s product-moment correlation ## ## data: x and y ## t = 0.012045, df = 28, p-value = 0.9905 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.3582868 0.3622484 ## sample estimates: ## cor ## 0.002276214 Next, we’ll add a single anomalous observation to our data and see how it affects both the correlation value and the correlation test. x[31] = 4 y[31] = 50 cor.test(x,y) ## ## Pearson&#39;s product-moment correlation ## ## data: x and y ## t = 5.803, df = 29, p-value = 2.738e-06 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.5115236 0.8631548 ## sample estimates: ## cor ## 0.7330043 The correlation jumps to 0.73 from 0.002 and is declared strongly significant! Figure 2.10 illustrates the new data. This simple example shows why exploratory data analysis is so important! If we don’t explore our data and detect anomalous observations, we might improperly declare relationships are significant when they are driven by a single observation or a small handful of observations. plot(x,y) Figure 2.10: A single anomalous observation creates strong correlation (0.73) where there previously was none 2.6.3 The Correlation Matrix It’s common to consider and calculate all pairwise correlations between variables in a dataset. If many attributes share a high degree of mutual correlation, this can cause problems for regression as will be discussed in Chapter 5. The pairwise correlations are generally arranged in an array called the correlation matrix, where the \\((i,j)^{th}\\) entry is the correlation between the \\(i^{th}\\) variable and \\(j^{th}\\) variable in your list. To compute the correlation matrix, we again use the cor() function. cor(train[, c(&#39;Year_Built&#39;,&#39;Total_Bsmt_SF&#39;,&#39;First_Flr_SF&#39;,&#39;Gr_Liv_Area&#39;,&#39;Sale_Price&#39;)]) ## Year_Built Total_Bsmt_SF First_Flr_SF Gr_Liv_Area ## Year_Built 1.0000000 0.4037104 0.3095407 0.2454325 ## Total_Bsmt_SF 0.4037104 1.0000000 0.8120419 0.4643838 ## First_Flr_SF 0.3095407 0.8120419 1.0000000 0.5707205 ## Gr_Liv_Area 0.2454325 0.4643838 0.5707205 1.0000000 ## Sale_Price 0.5668889 0.6276502 0.6085229 0.6985090 ## Sale_Price ## Year_Built 0.5668889 ## Total_Bsmt_SF 0.6276502 ## First_Flr_SF 0.6085229 ## Gr_Liv_Area 0.6985090 ## Sale_Price 1.0000000 Not surprisingly, we see strong positive correlation between the square footage of the basement and that of the first floor, and also between all of the area variables and the sale price. As demonstrated by Figures 2.8 and 2.10, raw correlation values can be misleading and it’s unwise to calculate them without a scatter plot for context. The pairs() function in base R provides a simple matrix of scatterplots for this purpose. pairs(train[, c(&#39;Year_Built&#39;,&#39;Total_Bsmt_SF&#39;,&#39;First_Flr_SF&#39;,&#39;Gr_Liv_Area&#39;,&#39;Sale_Price&#39;)]) 2.6.4 Python Code Pearson’s correlation np.corrcoef(train[&#39;Gr_Liv_Area&#39;], train[&#39;Sale_Price&#39;]) Statistical test for Correlation sp.stats.pearsonr(train[&#39;Gr_Liv_Area&#39;], train[&#39;Sale_Price&#39;]) Correlation Matrix np.corrcoef(train[[&#39;Year_Built&#39;, &#39;Total_Bsmt_SF&#39;, &#39;First_Flr_SF&#39;, &#39;Gr_Liv_Area&#39;, &#39;Sale_Price&#39;]], rowvar = False) ax = sns.pairplot(data = train[[&#39;Year_Built&#39;, &#39;Total_Bsmt_SF&#39;, &#39;First_Flr_SF&#39;, &#39;Gr_Liv_Area&#39;, &#39;Sale_Price&#39;]]) plt.show() 2.7 Simple Linear Regression After learning that two variables share a linear relationship, the next question is natural: what is that relationship? How much,on average, should we expect one variable to change as the other changes by a single unit? Simple linear regression answers this question by creating a linear equation that best represents the relationship in the sense that it minimizes the squared error between the observed data and the model predictions (i.e. the sum of the squared residuals). The simple linear regression equation is typically written \\[\\begin{equation} y=\\beta_0 + \\beta_1x + \\varepsilon \\tag{2.5} \\end{equation}\\] where \\(\\beta_0\\), the intercept, gives the expected value of \\(y\\) when \\(x=0\\) and \\(\\beta_1\\), the slope gives the expected change in \\(y\\) for a one-unit increase in \\(x\\). The error, \\(\\varepsilon\\) is the amount each individual \\(y\\) differs from the population line (we would not expect all values of \\(y\\) to fall directly on the line). When we use a sample of data to estimate the true population line, we get our prediction equation or \\(\\hat{y}=\\hat{\\beta}_0 + \\hat{\\beta}_1x\\). Residuals from the predicted line is defined as \\(e=y-\\hat{y}\\). Ordinary Least Squares seeks to minimize the sum of squared residuals or sum of squared error. That objective is known as a loss function. The sum of squared error (SSE) or equivalently the mean squared error (MSE) loss functions are by far the most popular loss functions for continuous prediction problems. We should note that SSE is not the only loss function at our disposal. Minimizing the mean absolute error (MAE) is common in situations with a highly skewed response variable (squaring very large errors gives those observations in the tail too much influence on the regression as we will later discuss). Using MAE to drive our loss function gives us predictions that are conditional medians of the response, given the input data. Other loss functions, like Huber’s M function, are also used to handle problems with influential observations as discussed in Chapter 5. As we mentioned in Section 2.1, a simple linear regression serves two purposes: to predict the expected value of \\(y\\) for each value of \\(x\\) and to explain how \\(y\\) is expected to change for a unit change in \\(x\\). In order to accurately use a regression for the second purpose, however, we must first meet assumptions with our data. 2.7.1 Assumptions of Linear Regression Linear regression, in particular the hypothesis tests that are generally performed as part of linear regression, has 4 assumptions: The expected value of \\(y\\) is linear in \\(x\\) (proper model specification). The random errors are independent. The random errors are normally distributed. The random errors have equal variance (homoskedasticity). It must now be noted that these assumptions are also in effect for the test of Pearson’s correlation in Section 2.6.1, because the tests in simple linear regression are mathematically equivalent to that test. When these assumptions are not met, another approach to testing the significance of a linear relationship should be considered. The most common non-parametric approach to testing for an association between two continuous variables is Spearman’s correlation. Spearman’s correlation does not limit its findings to linear relationships; any monotonic relationship (one that is always increasing or always decreasing) will cause Spearman’s correlation to be significant. Similar to the approach taken by Kruskal-Wallis, Spearman’s correlation replaces the data with its ranks and computes Pearson’s correlation on the ranks. The same cor and cor.test() functions can be used; simply specify the method='spearman' option. cor.test(train$Gr_Liv_Area,train$Sale_Price, method = &#39;spearman&#39;) ## Warning in cor.test.default(x, y, ...): Cannot compute exact ## p-value with ties ## ## Spearman&#39;s rank correlation rho ## ## data: x and y ## S = 408364087, p-value &lt; 2.2e-16 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ## rho ## 0.7160107 2.7.2 Testing for Association The statistical test of correlation is mathematically equivalent to testing the hypothesis that the slope parameter in Equation (2.5) is zero. This t-test is part of the output from any linear regression function, like lm() which we saw in Section 2.4. Let’s confirm this using the example from the Section 2.6.1 where we investigate the relationship between Gr_Liv_Area and Sale_Price. Again, the t-test in the output tests the following hypothesis: \\[H_0: \\beta_1=0\\] \\[H_a: \\beta_1 \\neq 0\\] The first thing we will do after creating the linear model is check our assumption using the default plots from lm() . From these four plots we will be most interested in the first two. In the top left plot, we are visually checking for homoskedasticity. We’d like to see the variability of the points remain constant from left to right on this chart, indicating that the errors have constant variance for each value of y. We do not want to see any fan shapes in this chart. Unfortunately, we do see just that: the variability of the errors is much smaller for smaller values of Sale Price than it is for larger values of Sale Price. In the top right plot, we are visually checking for normality of errors. We’d like to see the QQ-plot indicate normality with all the points roughly following the line. Unfortunately, we do not see that here. The errors do not appear to be normally distributed. slr &lt;- lm(Sale_Price ~ Gr_Liv_Area, data=train) par(mfrow=c(2,2)) plot(slr) Figure 2.11: The variables x and y have no correlation par(mfrow=c(1,1)) Despite the violation of assumptions, let’s continue examining the output from this regression in order to practice our interpretation of it. summary(slr) ## ## Call: ## lm(formula = Sale_Price ~ Gr_Liv_Area, data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -478762 -30030 -1405 22273 335855 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 14045.872 3942.503 3.563 0.000375 *** ## Gr_Liv_Area 110.726 2.506 44.185 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 57430 on 2049 degrees of freedom ## Multiple R-squared: 0.4879, Adjusted R-squared: 0.4877 ## F-statistic: 1952 on 1 and 2049 DF, p-value: &lt; 2.2e-16 The first thing we’re likely to examine in the coefficient table is the p-value for Gr_Liv_Area. It is strongly significant (in fact, it’s the same t-value and p-value as we saw for the cor.test as these tests are mathematically equivalent), indicating that there is an association between the size of the home and the sale price. Furthermore, the parameter estimate is 115.5 indicating that we’d expect the price of a home to increase by $115.5 for every additional square foot of living space. Because of the linearity of the model, we can extend this slope estimate to any unit change in \\(x\\). For example, it might be difficult to think in terms of single square feet when comparing houses, so we might prefer to use a 100 square-foot change and report our conclusion as follows: For each additional 100 square feet of living area, we expect the house price to increase by $11,550. 2.7.3 Python Code Assumptions of Linear Regression sp.stats.spearmanr(train[&#39;Gr_Liv_Area&#39;], train[&#39;Sale_Price&#39;]) Test for Association model_slr = smf.ols(&quot;Sale_Price ~ Gr_Liv_Area&quot;, data = train).fit() model_slr.summary() train[&#39;pred_slr&#39;] = model_slr.predict() train[&#39;resid_slr&#39;] = model_slr.resid train[[&#39;Sale_Price&#39;, &#39;pred_anova&#39;, &#39;pred_slr&#39;]].head(n = 10) sm.api.qqplot(train[&#39;resid_slr&#39;]) plt.show() The n-dimensional “variable vectors” and live in the vast sample space where the \\(i^{th}\\) axis represents the \\(i^th\\) observation in your dataset. In this space, a single point/vector is one possible set of sample values of n observations; this space can be difficult to grasp mentally↩︎ "],["mlr.html", "Chapter 3 Complex ANOVA and Multiple Linear Regression 3.1 Two-Way ANOVA 3.2 Two-Way ANOVA with Interactions 3.3 Randomized Block Design 3.4 Multiple Linear Regression", " Chapter 3 Complex ANOVA and Multiple Linear Regression In the One-Way ANOVA and simple linear regression models, there was only one variable - categorical for ANOVA and continuous for simple linear regression - to explain and predict our target variable. Rarely do we believe that only a single variable will suffice in predicting a variable of interest. Here in this Chapter we will generalize these models to the \\(n\\)-Way ANOVA and multiple linear regression models. These models contain multiple sets of variables to explain and predict our target variable. This Chapter aims to answer the following questions: How do we include multiple variables in ANOVA? Exploration Assumptions Predictions What is an interaction between two predictor variables? Interpretation Evaluation Within Category Effects What is blocking in ANOVA? Nuisance Factors Differences Between Blocking and Two-Way ANOVA How do we include multiple variables in regression? Model Structure Global &amp; Local Inference Assumptions Adjusted \\(R^2\\) Categorical Variables in Regression 3.1 Two-Way ANOVA In the One-Way ANOVA model, we used a single categorical predictor variable with \\(k\\) levels to predict our continuous target variable. Now we will generalize this model to include \\(n\\) categorical variables that each have different numbers of levels (\\(k_1, k_2, ..., k_n\\)). 3.1.1 Exploration Let’s use the basic example of two categorical predictor variables in a Two-Way ANOVA. Previously, we talked about using heating quality as a factor to explain and predict sale price of homes in Ames, Iowa. Now, we also consider whether the home has central air. Although similar in nature, these two factors potentially provide important, unique pieces of information about the home. Similar to previous data science problems, let us first explore our variables and their potential relationships. Now that we have two variables that we will use to explain and predict sale price, here are some summary statistics (mean, standard deviation, minimum, and maximum) for each combination of category. We will use the group_by function on both predictor variables of interest to split the data and then the summarise function to calculate the metrics we are interested in. train %&gt;% group_by(Heating_QC, Central_Air) %&gt;% dplyr::summarise(mean = mean(Sale_Price), sd = sd(Sale_Price), max = max(Sale_Price), min = min(Sale_Price)) ## `summarise()` has grouped output by &#39;Heating_QC&#39;. You can ## override using the `.groups` argument. ## # A tibble: 10 × 6 ## # Groups: Heating_QC [5] ## Heating_QC Central_Air mean sd max min ## &lt;ord&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 Poor N 50050 52255. 87000 13100 ## 2 Poor Y 107000 NA 107000 107000 ## 3 Fair N 84748. 28267. 158000 37900 ## 4 Fair Y 145165. 38624. 230000 50000 ## 5 Typical N 103469. 34663. 209500 12789 ## 6 Typical Y 142003. 39657. 375000 60000 ## 7 Good N 110811. 38455. 214500 59000 ## 8 Good Y 160113. 54158. 415000 52000 ## 9 Excellent N 115062. 33271. 184900 64000 ## 10 Excellent Y 216401. 88518. 745000 58500 We can already see above that there appears to be some differences in average sale price across the categories overall. Within each grouping of heating quality, homes with central air appear to have a higher sale price than homes without. Also, similar to before, homes with higher heating quality appear to have higher sale prices compared to homes with lower heating quality. We also see these relationships in the bar chart in Figure 3.1. CA_heat &lt;- train %&gt;% group_by(Heating_QC, Central_Air) %&gt;% dplyr::summarise(mean = mean(Sale_Price), sd = sd(Sale_Price), max = max(Sale_Price), min = min(Sale_Price)) ## `summarise()` has grouped output by &#39;Heating_QC&#39;. You can ## override using the `.groups` argument. ggplot(data = CA_heat, aes(x = Heating_QC, y = mean/1000, fill = Central_Air)) + geom_bar(stat = &quot;identity&quot;, position = position_dodge()) + labs(y = &quot;Sales Price (Thousands $)&quot;, x = &quot;Heating Quality Category&quot;) + scale_fill_brewer(palette = &quot;Paired&quot;) + theme_minimal() Figure 3.1: Distribution of Variables Heating_QC and Central_Air As before, visually looking at bar charts and mean calculations only goes so far. We need to statistically be sure of any differences that exist between average sale price in categories. 3.1.2 Model We are going to do this with the same approach as in the One-Way ANOVA, just with more variables as shown in the following equation: \\[ Y_{ijk} = \\mu + \\alpha_i + \\beta_j + \\varepsilon_{ijk} \\] where \\(\\mu\\) is the average baseline sales price of a home in Ames, Iowa, \\(\\alpha_i\\) is the variable representing the impacts of the levels of heating quality, and \\(\\beta_j\\) is the variable representing the impacts of the levels of central air. As mentioned previously, the unexplained error in this model is represented as \\(\\varepsilon_{ijk}\\). The same F test approach is also used, just for each one of the variables. Each variable’s test has a null hypothesis assuming all categories have the same mean. The alternative for each test is that at least one category’s mean is different. Let’s view the results of the aov function. ames_aov2 &lt;- aov(Sale_Price ~ Heating_QC + Central_Air, data = train) summary(ames_aov2) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Heating_QC 4 2.891e+12 7.228e+11 147.60 &lt; 2e-16 *** ## Central_Air 1 2.903e+11 2.903e+11 59.28 2.11e-14 *** ## Residuals 2045 1.002e+13 4.897e+09 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 From the above results, we have low p-values for each of the variables’ F test. Heating quality had 4 degrees of freedom, derived from the 5 categories \\((4 = 5-1)\\). Similarly, central air’s 2 categories produce 1 \\((= 2-1)\\) degree of freedom. The F values are calculated the exact same way as described before with the mean square for each variable divided by the mean square error. Based on these tests, at least one category in each variable is statistically different than the rest. 3.1.3 Post-Hoc Testing As with the One-Way ANOVA, the next logical question is which of these categories is different. We will use the same post-hoc tests as before with the TukeyHSD function. tukey.ames2 &lt;- TukeyHSD(ames_aov2) print(tukey.ames2) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = Sale_Price ~ Heating_QC + Central_Air, data = train) ## ## $Heating_QC ## diff lwr upr p adj ## Fair-Poor 49176.42 -63650.448 162003.29 0.7571980 ## Typical-Poor 67781.01 -42800.320 178362.35 0.4506761 ## Good-Poor 87753.89 -23040.253 198548.03 0.1945181 ## Excellent-Poor 146288.89 35818.859 256758.92 0.0028361 ## Typical-Fair 18604.59 -6326.425 43535.61 0.2484556 ## Good-Fair 38577.47 12718.894 64436.04 0.0004622 ## Excellent-Fair 97112.47 72679.867 121545.07 0.0000000 ## Good-Typical 19972.87 7050.230 32895.52 0.0002470 ## Excellent-Typical 78507.88 68746.678 88269.07 0.0000000 ## Excellent-Good 58535.00 46602.229 70467.78 0.0000000 ## ## $Central_Air ## diff lwr upr p adj ## Y-N 43256.57 31508.27 55004.87 0 plot(tukey.ames2, las = 1) Starting with the variable for central air, we can see there is a statistical difference between the two categories. This is the exact same result as the overall F test for the variable since there are only two categories. For the heating quality variable, we can see some categories are different from each other, while others are not. Noticeably, the combination of poor with fair, good, and typical categories are not statistically different. Notice also the different widths of these confidence intervals do to the different combinations of sample sizes for the categories being tested. 3.1.4 Python Code Two-way ANOVA model import statsmodels.formula.api as smf model = smf.ols(&quot;Sale_Price ~ C(Heating_QC) + C(Central_Air)&quot;, data = train).fit() model.summary() sm.api.stats.anova_lm(model, typ=2) Post-hoc testing from statsmodels.stats.multicomp import pairwise_tukeyhsd train[&#39;anova_combo&#39;] = train.Heating_QC.astype(&#39;string&#39;) + &quot; / &quot; + train.Central_Air mcomp = pairwise_tukeyhsd(endog = train[&#39;Sale_Price&#39;], groups = train[&#39;anova_combo&#39;], alpha = 0.05) mcomp.summary() mcomp.plot_simultaneous() 3.2 Two-Way ANOVA with Interactions What if the relationship between a predictor and target variable changed depending on the value of another predictor variable? For our example, we would say that the average difference in sales price between having central air and not having central changed depending on what level of heating quality the home had. In the bar chart in Figure 3.1, a potential interaction effect is displayed when the differences between the two bars within each heating category is different across heating category. If the difference, was the same, then there is no interaction present. In other words, no matter the heating quality rating of the home, the average difference in sales price between having central air and not having central air is the same. This interaction model is represented as follows: \\[ Y_{ijk} = \\mu + \\alpha_i + \\beta_j + (\\alpha \\beta)_{ij} + \\varepsilon_{ijk} \\] with the interaction effect, \\((\\alpha \\beta)_{ij}\\), as the multiplication of the two variables involved in the interaction. Interactions can occur between more than two variables as well. Interactions are good to evaluate as they can mask the effects of individual variables. For example, imagine a hypothetical example as shown in Figure 3.2 where the impact of having central air is opposite depending on which category of heating quality you have. fake_HQ &lt;- c(&quot;Poor&quot;, &quot;Poor&quot;, &quot;Excellent&quot;, &quot;Excellent&quot;) fake_CA &lt;- c(&quot;N&quot;, &quot;Y&quot;, &quot;N&quot;, &quot;Y&quot;) fake_mean &lt;- c(100, 150, 150, 100) fake_df &lt;- as.data.frame(cbind(fake_HQ, fake_CA, fake_mean)) ggplot(data = fake_df, aes(x = fake_HQ, y = as.numeric(fake_mean), fill = fake_CA)) + geom_bar(stat = &quot;identity&quot;, position = position_dodge()) + labs(y = &quot;Fake Sales Price (Thousands $)&quot;, x = &quot;Fake Heating Quality Category&quot;) + scale_fill_brewer(palette = &quot;Paired&quot;) + theme_minimal() Figure 3.2: Distribution of Variables Heating_QC and Central_Air If you were to only look at the average sales price across heating quality, you would notice no difference between the two groups (average for both heating categories is 125). However, when the interaction is accounted for, you can clearly see in the bar heights that sales price is different depending on the value of central air. Let’s evaluate the interaction term in our actual data. To do so, we just incorporate the multiplication of the two variables in the model statement by using the formula Sale_Price ~ Heating_QC + Central_Air + Heating_QC:Central_Air. You could also use the shorthand version of this by using the formula Sale_Price ~ Heating_QC*Central_Air. The * will include both main effects (the individual variables) and the interaction between them. ames_aov_int &lt;- aov(Sale_Price ~ Heating_QC*Central_Air, data = train) summary(ames_aov_int) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Heating_QC 4 2.891e+12 7.228e+11 147.897 &lt; 2e-16 ## Central_Air 1 2.903e+11 2.903e+11 59.403 1.99e-14 ## Heating_QC:Central_Air 4 3.972e+10 9.930e+09 2.032 0.0875 ## Residuals 2041 9.975e+12 4.887e+09 ## ## Heating_QC *** ## Central_Air *** ## Heating_QC:Central_Air . ## Residuals ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 As seen by the output above, the interaction effect between heating quality and central air is not significant at the 0.05 level. Again, this implies that the average difference in sale price of the home between having central air and not does not differ depending on which category of heating quality the home belongs to. If our interaction was significant (say a 0.02 p-value instead) then we would keep it in our model, but here we would remove the interaction term from our model and rerun the analysis. 3.2.1 Post-Hoc Testing Post-hoc tests are also available for interaction models as well to determine where the statistical differences exist in all the combinations of possible categories. We evaluate these post-hoc tests using the same TukeyHSD function and its corresponding plot element. tukey.ames_int &lt;- TukeyHSD(ames_aov_int) print(tukey.ames_int) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = Sale_Price ~ Heating_QC * Central_Air, data = train) ## ## $Heating_QC ## diff lwr upr p adj ## Fair-Poor 49176.42 -63536.973 161889.81 0.7565086 ## Typical-Poor 67781.01 -42689.104 178251.13 0.4496163 ## Good-Poor 87753.89 -22928.822 198436.60 0.1936558 ## Excellent-Poor 146288.89 35929.963 256647.82 0.0027979 ## Typical-Fair 18604.59 -6301.351 43510.54 0.2474998 ## Good-Fair 38577.47 12744.901 64410.03 0.0004543 ## Excellent-Fair 97112.47 72704.440 121520.50 0.0000000 ## Good-Typical 19972.87 7063.227 32882.52 0.0002425 ## Excellent-Typical 78507.88 68756.495 88259.26 0.0000000 ## Excellent-Good 58535.00 46614.230 70455.77 0.0000000 ## ## $Central_Air ## diff lwr upr p adj ## Y-N 43256.57 31520.09 54993.05 0 ## ## $`Heating_QC:Central_Air` ## diff lwr upr ## Fair:N-Poor:N 34698.276 -127178.615 196575.17 ## Typical:N-Poor:N 53419.220 -105046.645 211885.08 ## Good:N-Poor:N 60760.870 -102472.555 223994.29 ## Excellent:N-Poor:N 65011.727 -105195.635 235219.09 ## Poor:Y-Poor:N 56950.000 -214233.733 328133.73 ## Fair:Y-Poor:N 95114.833 -65743.496 255973.16 ## Typical:Y-Poor:N 91952.772 -64912.040 248817.58 ## Good:Y-Poor:N 110062.553 -46997.028 267122.13 ## Excellent:Y-Poor:N 166351.347 9630.224 323072.47 ## Typical:N-Fair:N 18720.944 -29117.117 66559.00 ## Good:N-Fair:N 26062.594 -35761.358 87886.55 ## Excellent:N-Fair:N 30313.451 -48093.155 108720.06 ## Poor:Y-Fair:N 22251.724 -202954.108 247457.56 ## Fair:Y-Fair:N 60416.557 5167.556 115665.56 ## Typical:Y-Fair:N 57254.496 15021.578 99487.41 ## Good:Y-Fair:N 75364.278 32413.584 118314.97 ## Excellent:Y-Fair:N 131653.071 89957.021 173349.12 ## Good:N-Typical:N 7341.650 -44902.998 59586.30 ## Excellent:N-Typical:N 11592.508 -59505.300 82690.32 ## Poor:Y-Typical:N 3530.780 -219235.844 226297.41 ## Fair:Y-Typical:N 41695.614 -2573.500 85964.73 ## Typical:Y-Typical:N 38533.553 12248.163 64818.94 ## Good:Y-Typical:N 56643.334 29219.541 84067.13 ## Excellent:Y-Typical:N 112932.128 87518.295 138345.96 ## Excellent:N-Good:N 4250.858 -76919.452 85421.17 ## Poor:Y-Good:N -3810.870 -229993.738 222372.00 ## Fair:Y-Good:N 34353.964 -24751.665 93459.59 ## Typical:Y-Good:N 31191.903 -15974.214 78358.02 ## Good:Y-Good:N 49301.684 1491.797 97111.57 ## Excellent:Y-Good:N 105590.478 58904.465 152276.49 ## Poor:Y-Excellent:N -8061.727 -239327.991 223204.54 ## Fair:Y-Excellent:N 30103.106 -46178.414 106384.63 ## Typical:Y-Excellent:N 26941.045 -40512.921 94395.01 ## Good:Y-Excellent:N 45050.826 -22854.846 112956.50 ## Excellent:Y-Excellent:N 101339.620 34220.481 168458.76 ## Fair:Y-Poor:Y 38164.833 -186309.978 262639.65 ## Typical:Y-Poor:Y 35002.772 -186627.795 256633.34 ## Good:Y-Poor:Y 53112.553 -168655.909 274881.02 ## Excellent:Y-Poor:Y 109401.347 -112127.544 330930.24 ## Typical:Y-Fair:Y -3162.061 -41305.131 34981.01 ## Good:Y-Fair:Y 14947.720 -23988.593 53884.03 ## Excellent:Y-Fair:Y 71236.514 33688.745 108784.28 ## Good:Y-Typical:Y 18109.781 2387.068 33832.49 ## Excellent:Y-Typical:Y 74398.575 62524.140 86273.01 ## Excellent:Y-Good:Y 56288.794 42071.027 70506.56 ## p adj ## Fair:N-Poor:N 0.9996249 ## Typical:N-Poor:N 0.9876643 ## Good:N-Poor:N 0.9755371 ## Excellent:N-Poor:N 0.9709555 ## Poor:Y-Poor:N 0.9996829 ## Fair:Y-Poor:N 0.6876708 ## Typical:Y-Poor:N 0.6985070 ## Good:Y-Poor:N 0.4435353 ## Excellent:Y-Poor:N 0.0271785 ## Typical:N-Fair:N 0.9659507 ## Good:N-Fair:N 0.9454988 ## Excellent:N-Fair:N 0.9685428 ## Poor:Y-Fair:N 0.9999995 ## Fair:Y-Fair:N 0.0193847 ## Typical:Y-Fair:N 0.0007697 ## Good:Y-Fair:N 0.0000014 ## Excellent:Y-Fair:N 0.0000000 ## Good:N-Typical:N 0.9999894 ## Excellent:N-Typical:N 0.9999620 ## Poor:Y-Typical:N 1.0000000 ## Fair:Y-Typical:N 0.0848888 ## Typical:Y-Typical:N 0.0001576 ## Good:Y-Typical:N 0.0000000 ## Excellent:Y-Typical:N 0.0000000 ## Excellent:N-Good:N 1.0000000 ## Poor:Y-Good:N 1.0000000 ## Fair:Y-Good:N 0.7089196 ## Typical:Y-Good:N 0.5315494 ## Good:Y-Good:N 0.0369201 ## Excellent:Y-Good:N 0.0000000 ## Poor:Y-Excellent:N 1.0000000 ## Fair:Y-Excellent:N 0.9640522 ## Typical:Y-Excellent:N 0.9611660 ## Good:Y-Excellent:N 0.5267698 ## Excellent:Y-Excellent:N 0.0000809 ## Fair:Y-Poor:Y 0.9999458 ## Typical:Y-Poor:Y 0.9999711 ## Good:Y-Poor:Y 0.9990789 ## Excellent:Y-Poor:Y 0.8652766 ## Typical:Y-Fair:Y 0.9999999 ## Good:Y-Fair:Y 0.9699661 ## Excellent:Y-Fair:Y 0.0000001 ## Good:Y-Typical:Y 0.0101482 ## Excellent:Y-Typical:Y 0.0000000 ## Excellent:Y-Good:Y 0.0000000 plot(tukey.ames_int, las = 1) In the giant table above as well as the confidence interval plots, you are able to inspect which combination of categories are statistically different. With interactions present in ANOVA models, post-hoc tests might get overwhelming in trying to find where differences exist. To help guide the exploration of post-hoc tests with interactions, we can do slicing. Slicing is when you perform One-Way ANOVA on subsets of data within categories of other variables. Even though the interaction in our model was not significant, let’s imagine that it was for the sake of example. For example, to help discover differences in the interaction between central air and heating quality, we could subset the data into two groups - homes with central air and homes without. Within these two groups we perform One-Way ANOVA across heating quality to find where differences might exist within subgroups. This can easily be done with the group_by function to subset the data. The nest and mutate functions are also used to applied the aov function to each subgroup. Here we run a One-Way ANOVA for heating quality within each subset of central air being present or not. CA_aov &lt;- train %&gt;% group_by(Central_Air) %&gt;% nest() %&gt;% mutate(aov = map(data, ~summary(aov(Sale_Price ~ Heating_QC, data = .x)))) CA_aov ## # A tibble: 2 × 3 ## # Groups: Central_Air [2] ## Central_Air data aov ## &lt;fct&gt; &lt;list&gt; &lt;list&gt; ## 1 Y &lt;tibble [1,904 × 83]&gt; &lt;summry.v&gt; ## 2 N &lt;tibble [147 × 83]&gt; &lt;summry.v&gt; print(CA_aov$aov) ## [[1]] ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Heating_QC 4 2.242e+12 5.606e+11 108.5 &lt;2e-16 *** ## Residuals 1899 9.809e+12 5.165e+09 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## [[2]] ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## Heating_QC 4 1.774e+10 4.435e+09 3.793 0.00582 ** ## Residuals 142 1.660e+11 1.169e+09 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 We can see that both of these results are significant at the 0.05 level. This implies that there are statistical differences in average sale price across heating quality within homes that have central air as well as those that don’t have central air. 3.2.2 Assumptions The assumptions for the \\(n\\)-Way ANOVA are the same as with the One-Way ANOVA - independence of observations, normality for each category of variable, and equal variances. With the inclusion of two or more variables (\\(n\\)-Way ANOVA with \\(n &gt; 1\\)), these assumptions can be harder to evaluate and test. These assumptions are then applied to the residuals of the model. For equal variances, we can still apply the Levene Test for equal variances using the same leveneTest function as in Chapter 2. leveneTest(Sale_Price ~ Heating_QC*Central_Air, data = train) ## Levene&#39;s Test for Homogeneity of Variance (center = median) ## Df F value Pr(&gt;F) ## group 9 24.17 &lt; 2.2e-16 *** ## 2041 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 From this test, we can see that we do not meet our assumption of equal variance. Let’s explore the normality assumption. Again, we will assume this normality on the random error component, \\(\\varepsilon_{ijk}\\), of the ANOVA model. More details are found for diagnostic testing using the error component in Diagnostic chapter. We can check normality using the same approaches of the QQ-plot or statistical testing as in the section on EDA. Here we will use the plot function on the aov object. Specifically, we want the second plot which is why we have a 2 in the plot function option. We then use the shapiro.test function on the error component. The estimate of the error component is calculated using the residuals function. plot(ames_aov_int, 2) ames_res &lt;- residuals(ames_aov_int) shapiro.test(x = ames_res) ## ## Shapiro-Wilk normality test ## ## data: ames_res ## W = 0.8838, p-value &lt; 2.2e-16 Neither of the normality or equal variance assumptions appear to be met here. This would be a good scenario to have a non-parametric approach. Unfortunately, the Kruskal-Wallis approach is not applicable to \\(n\\)-Way ANOVA where \\(n &gt; 1\\). These approaches would need more non-parametric versions of multiple regression models to account for them. 3.2.3 Python Code Two-way ANOVA with interactions model = smf.ols(&quot;Sale_Price ~ C(Heating_QC)*C(Central_Air)&quot;, data = train).fit() model.summary() sm.api.stats.anova_lm(model, typ=2) train[&#39;resid_anova_2way&#39;] = model.resid Post-hoc testing model_slice1 = smf.ols(&quot;Sale_Price ~ C(Heating_QC)&quot;, data = train[train[&quot;Central_Air&quot;] == &#39;Y&#39;]).fit() model_slice1.summary() sm.api.stats.anova_lm(model_slice1, typ=2) model_slice2 = smf.ols(&quot;Sale_Price ~ C(Heating_QC)&quot;, data = train[train[&quot;Central_Air&quot;] == &#39;N&#39;]).fit() model_slice2.summary() sm.api.stats.anova_lm(model_slice2, typ=2) Assumptions sm.api.qqplot(train[&#39;resid_anova_2way&#39;]) plt.show() sp.stats.shapiro(model.resid) 3.3 Randomized Block Design There are two typical groups of data analysis studies that are conducted. The first are observational/retrospective studies which are the typical data problems people try to solve. The primary characteristic of these analysis are looking at what already happened (retrospective) and potentially inferring those results to further data. These studies have little control over other factors contributing to the target of interest because data is collected after the fact. The other type of data analysis study are controlled experiments. In these situations, you often want to look at the outcome measure prospectively. The focus of the controlled experiment is to control for other factors that might contribute to the target variable. By manipulating these factors of interest, one can more reasonably claim causation. We can more reasonably claim causation when random assignment is used to eliminate potential nuisance factors. Nuisance factors are variables that can potentially impact the target variable, but are not of interest in the analysis directly. 3.3.1 Garlic Bulb Weight Example For this analysis we will use a new dataset. This dataset contains the average garlic bulb weight from different plots of land. We want to compare the effects of fertilizer on average bulb weight. However, different plots of land could have different levels of sun exposure, pH for the soil, and rain amounts. Since we cannot alter the pH of the soil easily, or control the sun and rain, we can use blocking to account for these nuisance factors. Each fertilizer was randomly applied in quadrants of 8 plots of land. These 8 plots have different values for sun exposure, pH, and rain amount. Therefore, if we only put one fertilizer on each plot, we would not know if the fertilizer was the reason the garlic crop grew or if it was one of the nuisance factors. Since we blocked these 8 plots and applied all four fertilizers in each we have essentially accounted for (or removed the effect of) the nuisance factors. Let’s briefly explore this new dataset by looking at all 32 values using the print function. block &lt;- read_csv(file = &quot;garlic_block.csv&quot;) ## Rows: 32 Columns: 6 ## ── Column specification ────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (6): Sector, Position, Fertilizer, BulbWt, Cloves, BedId ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(block, n = 32) ## # A tibble: 32 × 6 ## Sector Position Fertilizer BulbWt Cloves BedId ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 3 0.259 11.6 22961 ## 2 1 2 4 0.207 12.6 23884 ## 3 1 3 1 0.275 12.1 19642 ## 4 1 4 2 0.245 12.1 20384 ## 5 2 1 3 0.215 11.6 20303 ## 6 2 2 4 0.170 12.7 21004 ## 7 2 3 1 0.225 12.0 16117 ## 8 2 4 2 0.168 11.9 19686 ## 9 3 1 4 0.217 12.4 26527 ## 10 3 2 3 0.226 11.7 23574 ## # ℹ 22 more rows How do we account for this blocking in an ANOVA model context? This blocking ANOVA model is the exact same as the Two-Way ANOVA model. The variable that identifies which sector (block) an observation is in serves as another variable in the model. Think about this variable as the variable that accounts for all the nuisance factors in your ANOVA. That means we have two variables in this ANOVA model - fertilizer and sector (the block that accounts for sun exposure, pH level of soil, rain amount, etc.). For this we can use the same aov function we described above. block_aov &lt;- aov(BulbWt ~ factor(Fertilizer) + factor(Sector), data = block) summary(block_aov) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## factor(Fertilizer) 3 0.005086 0.0016954 4.307 0.016222 * ## factor(Sector) 7 0.017986 0.0025695 6.527 0.000364 *** ## Residuals 21 0.008267 0.0003937 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Using the summary function we can see that both the sector (block) and fertilizer variables are significant in the model at the 0.05 level. What are the interpretations of this? First, let’s address the blocking variable. Whether it is significant or not, it should always be included in the model. This is due to the fact that the data is structured in that way. It is a construct of the data that should be accounted for regardless of the significance. However, since the blocking variable (sector) was significant, that implies that different plots of land have different impacts of the average bulb weight of garlic. Again, this is most likely due to the differences between the plots of land - namely sun exposure, pH of soil, rain fall, etc. Second, the variable of interest is the fertilizer variable. It is significant, implying that there is a difference in the average bulb weight of garlic for different fertilizers. To examine which fertilizer pairs are statistically difference we can use post-hos testing as described in the previous parts of this chapter using the TukeyHSD function. tukey.block &lt;- TukeyHSD(block_aov) print(tukey.block) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = BulbWt ~ factor(Fertilizer) + factor(Sector), data = block) ## ## $`factor(Fertilizer)` ## diff lwr upr p adj ## 2-1 -0.02509875 -0.05275125 0.002553751 0.0840024 ## 3-1 -0.01294875 -0.04060125 0.014703751 0.5698678 ## 4-1 -0.03336125 -0.06101375 -0.005708749 0.0144260 ## 3-2 0.01215000 -0.01550250 0.039802501 0.6186232 ## 4-2 -0.00826250 -0.03591500 0.019390001 0.8382800 ## 4-3 -0.02041250 -0.04806500 0.007240001 0.1995492 ## ## $`factor(Sector)` ## diff lwr upr p adj ## 2-1 -0.0520675 -0.099126544 -5.008456e-03 0.0234315 ## 3-1 -0.0145075 -0.061566544 3.255154e-02 0.9634255 ## 4-1 -0.0450550 -0.092114044 2.004044e-03 0.0669646 ## 5-1 -0.0616250 -0.108684044 -1.456596e-02 0.0051483 ## 6-1 -0.0196650 -0.066724044 2.739404e-02 0.8466335 ## 7-1 0.0084950 -0.038564044 5.555404e-02 0.9984089 ## 8-1 -0.0393325 -0.086391544 7.726544e-03 0.1469768 ## 3-2 0.0375600 -0.009499044 8.461904e-02 0.1841786 ## 4-2 0.0070125 -0.040046544 5.407154e-02 0.9995370 ## 5-2 -0.0095575 -0.056616544 3.750154e-02 0.9966777 ## 6-2 0.0324025 -0.014656544 7.946154e-02 0.3337758 ## 7-2 0.0605625 0.013503456 1.076215e-01 0.0061094 ## 8-2 0.0127350 -0.034324044 5.979404e-02 0.9819446 ## 4-3 -0.0305475 -0.077606544 1.651154e-02 0.4025951 ## 5-3 -0.0471175 -0.094176544 -5.845586e-05 0.0495704 ## 6-3 -0.0051575 -0.052216544 4.190154e-02 0.9999400 ## 7-3 0.0230025 -0.024056544 7.006154e-02 0.7227812 ## 8-3 -0.0248250 -0.071884044 2.223404e-02 0.6454690 ## 5-4 -0.0165700 -0.063629044 3.048904e-02 0.9286987 ## 6-4 0.0253900 -0.021669044 7.244904e-02 0.6208608 ## 7-4 0.0535500 0.006490956 1.006090e-01 0.0186102 ## 8-4 0.0057225 -0.041336544 5.278154e-02 0.9998793 ## 6-5 0.0419600 -0.005099044 8.901904e-02 0.1034664 ## 7-5 0.0701200 0.023060956 1.171790e-01 0.0012997 ## 8-5 0.0222925 -0.024766544 6.935154e-02 0.7514897 ## 7-6 0.0281600 -0.018899044 7.521904e-02 0.5004099 ## 8-6 -0.0196675 -0.066726544 2.739154e-02 0.8465530 ## 8-7 -0.0478275 -0.094886544 -7.684559e-04 0.0446174 plot(tukey.block, las = 1) 3.3.2 Assumptions Outside of the typical assumptions for ANOVA that still hold here, there are two additional assumptions to be met: Treatments are randomly assigned within each block The effects of the treatment variable are constant across the levels of the blocking variable The first, new assumption of randomness deals with the reliability of the analysis. Randomness is key to removing the impact of the nuisance factors. The second, new assumption implies there is no interaction between the treatment variable and the blocking variable. For example, we are implying that the fertilizers’ impacts ob garlic bulb weight are not changed depending on what block you are on. In other words, fertilizers have the same impact regardless of sun exposure, pH levels, rain fall, etc. We are not saying these nuisance factors do not impact the target variable or bulb weight of garlic, just that they do not change the effect of the fertilizer on bulb weight. 3.3.3 Python Code block=pd.read_csv(&#39;https://raw.githubusercontent.com/IAA-Faculty/statistical_foundations/master/garlic_block.csv&#39;) block.head(n = 32) import statsmodels.formula.api as smf model_b = smf.ols(&quot;BulbWt ~ C(Fertilizer) + C(Sector)&quot;, data = block).fit() model_b.summary() sm.api.stats.anova_lm(model_b, typ=2) 3.4 Multiple Linear Regression Most practical applications of of regression modeling involve using more complicated models than a simple linear regression with only one predictor variable to predict your target. Additional variables in a model can lead to better explanations and predictions of the target. These linear regressions with more than one variable are called multiple linear regression models. However, as we will see in this section and the following chapters, with more variables comes much more complication. 3.4.1 Model Structure Multiple linear regression models have the same structure as simple linear regression models, only with more variables. The multiple linear regression model with \\(k\\) variables is structured like the following: \\[ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\cdots + \\beta_k x_k + \\varepsilon \\] This model has the predictor variables \\(x_1, x_2, ..., x_k\\) trying to either explain or predict the target variable \\(y\\). The intercept, \\(\\beta_0\\), still gives the expected value of \\(y\\), when all of the predictor variables take a value of 0. With the addition of multiple predictors, the interpretation of the slope coefficients change slightly. The slopes, \\(\\beta_1, \\beta_2, ..., \\beta_k\\), give the expected change in \\(y\\) for a one unit change in the respective predictor variable, holding all other predictor variables constant. The random error term, \\(\\varepsilon\\), is the error between our predicted value, \\(\\hat{y} = \\hat{\\beta}_0 + \\hat{\\beta}_1 x_1 + \\cdots + \\hat{\\beta}_k x_k\\), and our actual value of \\(y\\). Unlike simple linear regression that can be visualized as a line through a 2-dimensional scatterplot of data, a multiple linear regression is better thought of as a multi-dimensional plane through a multi-dimensional scatterplot of data. Let’s visual an example with two predictor variables - the square footage of greater living area and the total number of rooms. These will predict sale price of a home. When none of the variables have any relationship with the target variable, we get a horizontal plane like the one shown below. This is similar in concept to a horizontal line in simple linear regression having a slope of 0, implying that the target variable does not change as the predictor variable changes. Much like if the slope of a simple linear regression line is not 0 (a relationship exists between the predictor and target variable), then a relationship between any of the predictor variables and the target variable shifts and rotates the plane around like the one shown below. To the naive viewer, the shifted plane would still make sense because of the model naming convention of multiple linear regression. However, the linear in linear regression doesn’t have to deal with the visualization of the fitted plane (or line in two dimensions), but instead refers to the linear combination of variables. A linear combination is an expression constructed from a set of terms by multiplying each term by a constant and adding the results. For example, \\(ax + by\\) is a linear combination of \\(x\\) and \\(y\\). Therefore, the linear model \\[ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\cdots + \\beta_k x_k + \\varepsilon \\] is a linear combination of predictor variables in their relationship with the target variable \\(y\\). These predictor variables do not all have to contain linear effects though. For example, let’s look at a linear regression model with four predictor variables: \\[ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\beta_3 x_3 + \\beta_4 x_4 + \\varepsilon \\] One would not be hard pressed to call this model a linear regression. However, what if we defined \\(x_3 = x_1^2\\) and \\(x_4 = x_2^2\\)? This model is still a linear regression model. The structure of the model did not change. The model is still a linear combination of predictor variables related to the target variable. The predictor variables just do not all have a linear effect in terms of their relationship with \\(y\\). However, mathematically, it is still a linear combination and a linear regression model. 3.4.2 Global &amp; Local Inference In simple linear regression we could just look at the t-test for our slope parameter estimate to determine the utility of our model. With multiple parameter estimates comes multiple t-tests. Instead of looking at every individual parameter estimate initially, there is a way to determine the model adequacy for predicting the target variable overall. The utility of a multiple regression model can be tested with a single test that encompasses all the coefficients from the model. This kind of test is called a global test since it tests all \\(\\beta\\)’s simultaneously. The Global F-Test uses the F-distribution to do just that for multiple linear regression models. The hypotheses for this test are the following: \\[ H_0: \\beta_1 = \\beta_2 = \\cdots = \\beta_k = 0 \\\\ H_A: \\text{at least one } \\beta \\text{ is nonzero} \\] In simpler terms, the null hypothesis is that none of the variables are useful in predicting the target variable. The alternative hypothesis is that at least one of these variables is useful in predicting the target variable. The F-distribution is a distribution that has the following characteristics: Bounded below by 0 Right-skewed Both numerator and denominator degrees of freedom A plot of a variety of F distributions is shown here: ## Warning: Removed 1500 rows containing missing values ## (`geom_line()`). If the global test is significant, the next step would be to examine the individual t-tests to see which variables are significant and which ones are not. This is similar to post-hoc testing in ANOVA where we explored which of the categories was statistically different when we knew at least one was. These tests are all available using the summary function on an lm function for linear regression. To build a multiple linear regression in R using the lm function, you just add another variable to the formula element. Here we will predict the sales price (Sale_Price) based on the square footage of the greater living area of the home (Gr_Liv_Area) as well as total number of rooms above ground (TotRms_AbvGrd). ames_lm2 &lt;- lm(Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd, data = train) summary(ames_lm2) ## ## Call: ## lm(formula = Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd, data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -528656 -30077 -1230 21427 361465 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 42562.657 5365.721 7.932 3.51e-15 *** ## Gr_Liv_Area 136.982 4.207 32.558 &lt; 2e-16 *** ## TotRms_AbvGrd -10563.324 1370.007 -7.710 1.94e-14 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 56630 on 2048 degrees of freedom ## Multiple R-squared: 0.5024, Adjusted R-squared: 0.5019 ## F-statistic: 1034 on 2 and 2048 DF, p-value: &lt; 2.2e-16 At the bottom of the above output is the result of the global F-test. Since the p-value on this test is lower than the significance level of 0.05, we have statistical evidence that at least of the two variables - Gr_Liv_Area and TotRms_AbvGrd - is significant at predicting the sale price of the home. By looking at the individual t-tests in the output above, we can see that both variables are actually significant. 3.4.3 Assumptions The main assumptions for the multiple linear regression model are the same as with the simple linear regression model: The expected value of \\(y\\) is linear in the \\(x\\)’s (proper model specification). The random errors are independent. The random errors are normally distributed. The random errors have equal variance (homoskedasticity). However, with multiple variables there is an additional assumption that people tend to add to multiple linear regression modeling: No perfect collinearity (also called multicollinearity) The new assumption means that no combination of predictor variables is a perfect linear combination with any other predictor variables. Collinearity, also called multicollinearity, occurs when predictor variables are correlated with each other. People often misstate this additional assumption as having no collinearity at all. This is too restrictive and basically impossible to meet in a realistic setting. Only when collinearity has a drastic impact on the linear regression do we need to concern ourselves. In fact, linear regression only completely breaks when that collinearity is perfect. Dealing with multicollinearity is discussed later. Similar to simple linear regression, we can evaluate the assumptions by looking at residual plots. The plot function on the lm object provides these. par(mfrow=c(2,2)) plot(ames_lm2) par(mfrow=c(1,1)) These will again be covered in much more detail in Diagnostic Chapter. 3.4.4 Multiple Coefficients of Determination One of the main advantages of multiple linear regression is that the complexity of the model enables us to investigate the relationship among \\(y\\) and several predictor variables simultaneously. However, this increased complexity makes it more difficult to not only interpret the models, but also ascertain which model is “best.” One example of this would be the coefficient of determination, \\(R^2\\), that we discussed earlier. The calculation for \\(R^2\\) is the exact same: \\[ R^2 = 1 - \\frac{SSE}{TSS} \\] However, the problem with the calculation of \\(R^2\\) in a multiple linear regression is that the addition of any variable (useful or not) will never make the \\(R^2\\) decrease. In fact, it typically increases even with the addition of a useless variable. The reason is rather intuitive. When adding information to a regression model, your predictions can only get better, not worse. If a new predictor variable has no impact on the target variable, then the predictions can not get any worse than what they already were before the addition of the useless variable. Therefore, the \\(SSE\\) would never increase, making the \\(R^2\\) never decrease. To account for this problem, there is the adjusted coefficient of determination, \\(R^2_a\\). The calculation is the following: \\[ R^2_a = 1 - [(\\frac{n-1}{n-(k+1)})\\times (\\frac{SSE}{TSS})] \\] Notice what the calculation is doing. It takes the original ratio on the right hand side of the \\(R^2\\) equation, \\(SSE/TSS\\), and penalizes it. It multiplies this number by a ratio that is always greater than 1 if \\(k &gt; 0\\). Remember, \\(k\\) is the number of variables in the model. Therefore, as the number of variables increases, the calculation penalizes the model more and more. However, if the reduction of SSE from adding a useful variable is low enough, then even with the additional penalization, the \\(R^2_a\\) will increase if the variable is a useful addition to the model. If the variable is not a useful addition to the model, the \\(R^2_a\\) will decrease. The \\(R^2_a\\) is only one of many ways to select the “best” model for multiple linear regression. One downside of this new metric is that the \\(R^2_a\\) loses its interpretation. Since \\(R^2_a \\le R^2\\), it is no longer bounded below by zero. Therefore, it can no longer be the proportion of variation explained in the target variable by the model. However, we can easily use \\(R^2_a\\) to select a model correctly and interpret that model with \\(R^2\\). Both of these numbers can be found using the summary function on the lm object from the previous model. summary(ames_lm2) ## ## Call: ## lm(formula = Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd, data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -528656 -30077 -1230 21427 361465 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 42562.657 5365.721 7.932 3.51e-15 *** ## Gr_Liv_Area 136.982 4.207 32.558 &lt; 2e-16 *** ## TotRms_AbvGrd -10563.324 1370.007 -7.710 1.94e-14 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 56630 on 2048 degrees of freedom ## Multiple R-squared: 0.5024, Adjusted R-squared: 0.5019 ## F-statistic: 1034 on 2 and 2048 DF, p-value: &lt; 2.2e-16 From this output we can say that the combination of Gr_Liv_Area and TotRmsAbvGrd account for 50.24% of the variation in Sale_Price. Now let’s add a random variable to the model. This random variable will take random values from a normal distribution with mean of 0 and standard deviation of 1 and has no impact on the target variable. set.seed(1234) ames_lm3 &lt;- lm(Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd + rnorm(length(Sale_Price), 0, 1), data = train) summary(ames_lm3) ## ## Call: ## lm(formula = Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd + rnorm(length(Sale_Price), ## 0, 1), data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -527926 -29943 -1298 21427 363925 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) 42589.091 5364.877 7.939 ## Gr_Liv_Area 136.927 4.207 32.548 ## TotRms_AbvGrd -10552.425 1369.808 -7.704 ## rnorm(length(Sale_Price), 0, 1) 1629.854 1259.478 1.294 ## Pr(&gt;|t|) ## (Intercept) 3.34e-15 *** ## Gr_Liv_Area &lt; 2e-16 *** ## TotRms_AbvGrd 2.05e-14 *** ## rnorm(length(Sale_Price), 0, 1) 0.196 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 56620 on 2047 degrees of freedom ## Multiple R-squared: 0.5028, Adjusted R-squared: 0.502 ## F-statistic: 689.9 on 3 and 2047 DF, p-value: &lt; 2.2e-16 Notice that the \\(R^2\\) of this model actually increased to 0.5028 from 0.5024. However, the \\(R^2_a\\) value stayed approximately the same at 0.502 since the addition of this new variable did not provide enough predictive power to outweigh the penalty of adding it. 3.4.5 Categorical Predictor Variables As mentioned in EDA Section, there are two types of variables typically used in modeling: Quantitative (or numeric) Qualitative (or categorical) Categorical variables need to be coded differently because they are not numerical in nature. As mentioned in EDA Section, two common coding techniques for linear regression are reference and effects coding. The interpretation of the coefficients (\\(\\beta\\)’s) of these variables in a regression model depend on the specific coding used. The predictions from the model, however, will remain the same regardless of the specific coding that is used. Let’s use the example of the Central_Air variable with 2 categories - Y and N. Using reference coding, the reference coded variable to describe these 2 categories (with N as the reference level) would be the following: Central Air X1 Y 1 N 0 Table 3.1: Reference variable coding for the categorical attribute Central Air The linear regression equation would be: \\[ \\hat{y} = \\hat{\\beta}_0 + \\hat{\\beta}_1 X_1 \\] Let’s see the mathematical interpretation of the coefficient \\(\\hat{\\beta}_1\\). To do this, let’s get the average sale price of a home prediction for a home with central air (\\(\\hat{y}_Y\\)) and without central air (\\(\\hat{y}_N\\)): \\[ \\hat{y}_Y = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\cdot 1 = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\\\ \\hat{y}_N = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\cdot 0 = \\hat{\\beta}_0 \\] By subtracting these two equations (\\(\\hat{y}_Y - \\hat{y}_N = \\hat{\\beta}_1\\)), we can get the prediction for the average difference in price between a home with central air and without central air. This shows that in reference coding, the coefficient on each dummy variable is the average difference between that category and the reference category (the category not represented with its own variable). The math can be extended to as many categories as needed. Using effects coding, the effects coded variable to describe these 2 categories (with N as the reference level) would be the following: Central Air X1 Y 1 N -1 Table 3.1: Effects variable coding for the categorical attribute Central Air The linear regression equation would be: \\[ \\hat{y} = \\hat{\\beta}_0 + \\hat{\\beta}_1 X_1 \\] Let’s see the mathematical interpretation of the coefficient \\(\\hat{\\beta}_1\\). To do this, let’s get the average sale price of a home prediction for a home with central air (\\(\\hat{y}_Y\\)) and without central air (\\(\\hat{y}_N\\)): \\[ \\hat{y}_Y = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\cdot 1 = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\\\ \\hat{y}_N = \\hat{\\beta}_0 + \\hat{\\beta}_1 \\cdot -1 = \\hat{\\beta}_0 - \\hat{\\beta}_1 \\] Similar to reference coding, the coefficient \\(\\hat{\\beta}_1\\) is the average difference between homes with central air and \\(\\hat{\\beta}_0\\). However, what is \\(\\hat{\\beta}_0\\)? By taking the average of our two predictions: \\[ \\frac{1}{2} \\times (\\hat{y}_Y + \\hat{y}_N) = \\frac{1}{2} \\times (\\hat{\\beta}_0 + \\hat{\\beta}_1 + \\hat{\\beta}_0 - \\hat{\\beta}_1) = \\frac{1}{2} \\times (2\\hat{\\beta}_0) = \\hat{\\beta}_0 \\] From this average we can get the prediction for the average difference in price between a home with central air and the average price across all homes. This shows that in effects coding, the coefficient on each dummy variable is the average difference between that category and the average price across all homes (including both with and without central air). The math can be extended to as many categories as needed. Let’s see an example with Central_Air as a variable added to our multiple linear regression model as a reference coded variable. ames_lm4 &lt;- lm(Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd + Central_Air, data = train) summary(ames_lm4) ## ## Call: ## lm(formula = Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd + Central_Air, ## data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -510745 -28984 -2317 20273 356742 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -7169.259 6778.879 -1.058 0.29 ## Gr_Liv_Area 129.594 4.131 31.374 &lt; 2e-16 *** ## TotRms_AbvGrd -8980.938 1335.669 -6.724 2.29e-11 *** ## Central_AirY 54513.082 4762.926 11.445 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 54910 on 2047 degrees of freedom ## Multiple R-squared: 0.5323, Adjusted R-squared: 0.5316 ## F-statistic: 776.6 on 3 and 2047 DF, p-value: &lt; 2.2e-16 With these results we estimate the average difference in sales price between homes with central air and without central air to be $54,513.08. 3.4.6 Python Code Global and Local Inference model_mlr = smf.ols(&quot;Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd&quot;, data = train).fit() model_mlr.summary() Assumptions train[&#39;pred_mlr&#39;] = model_mlr.predict() train[&#39;resid_mlr&#39;] = model_mlr.resid train[[&#39;Sale_Price&#39;, &#39;pred_mlr&#39;, &#39;resid_mlr&#39;]].head(n = 10) sm.api.qqplot(train[&#39;resid_mlr&#39;]) plt.show() Multiple Coefficient of Determination model_mlr.summary() Categorical Predictor Variables model_mlr2 = smf.ols(&quot;Sale_Price ~ Gr_Liv_Area + TotRms_AbvGrd + C(Central_Air)&quot;, data = train).fit() model_mlr2.summary() "],["model-selection.html", "Chapter 4 Model Selection 4.1 Selection Criteria 4.2 Stepwise Selection 4.3 Significance Levels", " Chapter 4 Model Selection This section will dive into some basic foundations in model selection, or finding the best model for a data set. In most data sets, there will most likely be variables that are informative and ones that are uninformative in predicting the response. With many explanatory variables, it could be extremely time consuming to try all potential models by hand, and the use of automatic procedures can greatly assist in obtaining subsets of variables in which to focus your attention. This Chapter aims to answer the following questions: What are the different selection criteria that can be used in model selection? How to perform a stepwise search algorithm. Forward Selection Backward Elimination Stepwise Selection Considerations when looking at p-values. CAUTION: you should NEVER just use the final model created from an automatic procedure! Always explore your data (both automatically selected and excluded variables), and use domain knowledge, diagnostics, and critical thought to decide on your final model. We will focus on two techniques for automatic variable selection: stepwise procedures and LASSO. Within the stepwise procedures, we will discuss forward, backward and stepwise searches using several different selection criteria. We will end this section discussing important considerations in use of p-values when dealing with large data sets. 4.1 Selection Criteria When trying to find the best model, there are many selection criteria at our disposal. For example, you have already been introduced to \\(R^{2}\\) (the larger the value of \\(R^{2}\\), the better the model). However, when comparing multivariate models, the adjusted \\(R^{2}\\) is better due to the fact that \\(R^{2}\\) can potentially increase even when adding noise. The adjusted \\(R^{2}\\) can be thought of as \\(R^{2}\\) with penalty (for every additional variable added to the model, we add a penalty). This allows us to weigh the contribution of adding new variables against the added complexity of more variables in the model. There are other selection criteria that are also used in selecting the “best model” (or variable selection). As you will notice, these selection criteria also have a penalty to take into account the addition of variables. We will use two of the most common ones: AIC and BIC (can also be referred to as SBC). The AIC, or Akaike Information Criterion, was developed by statistician Hirotugu Akaike in the 1970’s and is defined by \\[ AIC = -2log(Likelihood) + 2p. \\] In this case, “Likelihood” is the likelihood of the data and \\(2p\\) is the “penalty”, where \\(p\\) is the number of parameters in the model. A smaller AIC indicates a better model. BIC, also known as the Bayesian Information Criterion (also called SBC or Schwarz Bayesian Information) was first developed by Gideon E. Schwarz, also back in the 1970’s and is defined by \\[BIC = -2log(Likelihood) + plog(n). \\] In this case, “Likelihood” is the likelihood of the data and \\(plog(n)\\) is the “penalty”, where \\(p\\) is the number of parameters in the model and \\(n\\) is the sample size. A smaller BIC indicates a better model. Notice that both penalties have a common term of \\(p\\) in them (this will be important to remember when we start discussing the R code). 4.2 Stepwise Selection The three different algorithms in the stepwise selection search are forward, backward and stepwise. Each of these algorithms either add or take away one variable at a time based on a given criterion until this criterion can no longer be met. At which point the algorithm stops. Forward For forward selection, we start with a null model (only the intercept) and add one variable at a time until no other variables can be added based on a given criterion. The algorithm is as follows: Start with a null model, this is the base model (just the intercept) For each variable not in model, create a linear regression model with the base model plus this one variable See which linear regression is best (based on criterion) Is this regression better than the base model? Yes, then continue on to step 4 No, exit the algorithm with the base model as the chosen model The base model is now the previous base model plus the variable selected in step 3. Using this as your new base model, go back to step 1 and continue. To do forward selection in R, you will use the step function. The “empty model” should be used as your initial model (which is just the intercept). For the scope of the model, you need to put the “smallest model” (just the intercept) to the “largest model” (full model). The direction is forward. The penalty can be controlled by defining “\\(k\\)”. Using a value of 2 for “\\(k\\)” will use the AIC criterion (remember AIC penalty was \\(2p\\)) and using \\(log(n)\\) for “\\(k\\)” will use the BIC criterion (remember BIC penalty was \\(plog(n)\\)). If you do not specify anything for “\\(k\\)”, the default is AIC. You can also define “\\(k\\)” as the upper \\(\\alpha\\)-quantile of a \\(\\chi^{2}\\) distribution with one degree of freedom, which will use p-value for its selection of variables. In this case, the best “model” is the one with the lowest p-value for the new variable. In order to enter the model, the p-value of this variable will need to be lower than the “cut-off” for the p-values (\\(\\alpha\\)), which means that the criterion to enter the model would be that the variable has a p-value smaller than \\(\\alpha\\). # Create full model and empty model full.model &lt;- lm(Sale_Price ~ . , data = train_sel) empty.model &lt;- lm(Sale_Price ~ 1, data = train_sel) # k = 2 for AIC selection for.model &lt;- step(empty.model, scope = list(lower = empty.model, upper = full.model), direction = &quot;forward&quot;, k = 2) Below is edited output with comments to lead you through the forward selection. Notice that the above code has \\(k\\)=2, which means we are using AIC as our selection criterion. The first information R provides is for the initial model, which is \\[Y_{i}=\\beta_{0} + \\varepsilon_{i}.\\] The “empty model” has an AIC of 46,323.64 (in order for ANY variable to be added, that model must be better, or in other words have a smaller AIC than this initial model). Start: AIC=46323.64 Sale_Price ~ 1 R then displays all simple linear regressions with their corresponding AIC values. Notice that R puts the information in ascending AIC values (so, the best simple linear regression is 43,817 which is indeed smaller than 46,323.64). You will also see a line with a blank for the “variable”, this is the current “base model”. In this first step, it is just the intercept. Therefore, we will add the variable Overall_Qual. Df Sum of Sq RSS AIC +Overall_Qual 9 9.3437e+12 3.8531e+12 43817 +Gr_Liv_Area 1 6.4389e+12 6.7578e+12 44953 +Garage_Area 1 5.3561e+12 7.8407e+12 45258 +First_Flr_SF 1 4.8867e+12 8.3100e+12 45377 +Full_Bath 1 3.7827e+12 9.4141e+12 45633 +TotRms_AbvGrd 1 3.2304e+12 9.9663e+12 45750 +Fireplaces 1 2.9715e+12 1.0225e+13 45802 +Half_Bath 1 1.1209e+12 1.2076e+13 46144 +Roof_Style 5 1.0724e+12 1.2124e+13 46160 +Central_Air 1 9.6147e+11 1.2235e+13 46170 +House_Style 7 1.0245e+12 1.2172e+13 46172 +Second_Flr_SF 1 9.4611e+11 1.2251e+13 46173 +Lot_Area 1 9.0332e+11 1.2293e+13 46180 +Bldg_Type 4 4.6434e+11 1.2732e+13 46258 +Street 1 3.1752e+10 1.3165e+13 46321 1.3197e+13 46324 Now, R shows you the new “base model”, which includes Overall_Qual (and of course the intercept is still included) and the new AIC value to beat which is 43816.66. Step: AIC=43816.66 Sale_Price ~ Overall_Qual Using this as our base model, we now try adding each of the remaining variables in separate regression models, output is shown below: Df Sum of Sq RSS AIC +Gr_Liv_Area 1 9.8905e+11 2.8640e+12 43210 +First_Flr_SF 1 5.2665e+11 3.3264e+12 43517 +Garage_Area 1 4.6644e+11 3.3866e+12 43554 +TotRms_AbvGrd 1 4.6123e+11 3.3918e+12 43557 +Full_Bath 1 4.1206e+11 3.4410e+12 43587 +Fireplaces 1 4.0551e+11 3.4476e+12 43591 +Lot_Area 1 3.8148e+11 3.4716e+12 43605 +Bldg_Type 4 2.3715e+11 3.6159e+12 43694 +Second_Flr_SF 1 1.7555e+11 3.6775e+12 43723 +Half_Bath 1 1.3948e+11 3.7136e+12 43743 +Central_Air 1 9.1322e+10 3.7617e+12 43769 +House_Style 7 6.1815e+10 3.7912e+12 43797 +Roof_Style 5 5.1448e+10 3.8016e+12 43799 3.8531e+12 43817 +Street 1 1.9573e+06 3.8531e+12 43819 Best model includes Gr_Liv_Area (in addition to the intercept and Overall_Qual). The AIC is 43210, which beats the previous one of 43817. So, we will add Gr_Liv_Area to the model. Our new base model includes the intercept, Overall_Qual and Gr_Liv_Area with an AIC of 43210. Step: AIC=43210.24 Sale_Price ~ Overall_Qual + Gr_Liv_Area We continue in this fashion until adding a new variable does NOT decrease the AIC. The last step is shown below: Step: AIC=42676.1 Sale_Price ~ Overall_Qual + Gr_Liv_Area + House_Style + Garage_Area + Bldg_Type + Fireplaces + Full_Bath + Half_Bath + Lot_Area + Roof_Style + Central_Air + Second_Flr_SF + TotRms_AbvGrd + First_Flr_SF Df Sum of Sq RSS AIC 2.1542e+12 42676 +Street 1 1.028e+09 2.1532e+12 42677 Notice that the previous step had a model with the intercept, Overall_Qual, Gr_Liv_Area, House_Style, Garage_Area, Bldg_Type, Fireplaces, Full_Bath, Half_Bath, Lot_Area, Roof_Style, Central_Air, Second_Flr_SF, TotRms_AbvGrd, and First_Flr_SF (as illustrated by the above formula). The AIC for this model is 42676.1. There is only one variable left that could be added (Street). However, when we add street to the model, the AIC now becomes 42677 (in other words AIC increases, which is a worse model). The algorithm stops here. The code below illustrates how to do forward selection with BIC and p-values. In the output from R, it still says “AIC”, but now these values are calculated by using the BIC formula or the corresponding “\\(k\\)” values for p-values (take a look at the values R has for the “AIC” column and you will see that it has changed!). # k = log(n) for BIC selection for.model2 &lt;- step(empty.model, scope = list(lower = empty.model, upper = full.model), direction = &quot;forward&quot;, k = log(nrow(train_sel))) # k = qchisq(alpha, 1, lower.tail = FALSE) for p-value with alpha selection alpha.f=0.05 for.model3 &lt;- step(empty.model, scope = list(lower = empty.model, upper = full.model), direction = &quot;forward&quot;, k = qchisq(alpha.f, 1, lower.tail = FALSE)) Backward Backward elimination starts with the “base” model as the full model (i.e. all variables are contained within the model). We remove only one variable and we do this for each variable in the model. We want to see if the any of the models improve over the “base model” (in other words, is the model better with that one variable removed based on a given criterion?). If this new model (with that one variable removed) is better than the previous model, then we remove that variable and this new model now becomes the base model. We are looking for the best improvement, therefore we look at the model that would be the best over the base model. The algorithm continues in this fashion until no other variables can be removed, based on the chosen criterion. Start with full model with all predictor variables in it, this is the base model and calculate the criterion on this model Create models such that each model has exactly one predictor variable removed from it and calculate the criterion for each model In step 1, find the best model based on the criterion Is this regression model better than the base model? Yes, then continue on to step 4 No, exit the algorithm with the base model as the chosen model The base model is now the model with the variable removed. Using this as your new base model, go back to step 1 and continue. To do backward elimination in R, you will use the step function. The “full model” should be used as your initial model (which is the model with all the predictor variables in it). For the scope of the model, you need to put the “smallest model” (just the intercept) to the “largest model” (full model). The direction is backward. The penalty (which indicates the criteria) can be controlled by defining “\\(k\\)”. As discussed before, a value of 2 will use the AIC criterion, a value of \\(log(n)\\) will produce the BIC penalty, and finally the upper \\(\\alpha\\)-quantile of a \\(\\chi^{2}\\) distribution with one degree of freedom will use p-value for its removal of variables. # Create full model and empty model full.model &lt;- lm(Sale_Price ~ . , data = train_sel) empty.model &lt;- lm(Sale_Price ~ 1, data = train_sel) # k = 2 for AIC selection back.model &lt;- step(full.model, scope = list(lower = empty.model, upper = full.model), direction = &quot;backward&quot;, k = 2) Below is edited output with comments to lead you through the backward elimination. Notice that the above code has \\(k\\)=2, which means we are using AIC as our selection criterion. The first information R provides is for the initial model, which is \\[Y_{i}=\\beta_{0} + \\beta_{1}x_{i,1}+\\beta_{2}x_{i,2}+\\beta_{3}x_{i,3}+\\beta_{4}x_{i,4}+\\beta_{5}x_{i,5}+\\beta_{6}x_{i,6}+\\beta_{i,7}x_{7}+\\beta_{8}x_{i,8}+\\beta_{9}x_{i,9}+\\beta_{10}x_{i,10}+\\beta_{11}x_{i,11}+\\beta_{12}x_{i,12}+\\beta_{13}x_{i,13}+\\beta_{14}x_{i,14}+\\beta_{15}x_{i,15}+\\varepsilon_{i}.\\] The “full model” has an AIC of 42,677.12 (in order for ANY variable to be removed, that model must be better, or in other words have a smaller AIC than this initial model). R then displays linear regression models with one variable removed and their corresponding AIC values. For example, if we remove Street (just that one variable), the AIC of that model will be 42675. Notice that R put the information in ascending AIC values (so, best linear regression is at the top with an AIC value of 42,675 which is indeed smaller than 42,677.12, so Street will be removed). You will also see a line with . This is the “base model”, or in this case the full model. Df Sum of Sq RSS AIC - Gr_Liv_Area 1 4.9138e+08 2.1537e+12 42676 - Street 1 1.0280e+09 2.1542e+12 42676 2.1532e+12 42677 - First_Flr_SF 1 3.1548e+09 2.1563e+12 42678 - TotRms_AbvGrd 1 3.4112e+09 2.1566e+12 42678 - Second_Flr_SF 1 6.4939e+09 2.1597e+12 42681 - Central_Air 1 1.6533e+10 2.1697e+12 42691 - Roof_Style 5 2.8786e+10 2.1820e+12 42694 - Half_Bath 1 3.5009e+10 2.1882e+12 42708 - Lot_Area 1 3.5997e+10 2.1892e+12 42709 - Fireplaces 1 3.6853e+10 2.1900e+12 42710 - House_Style 7 7.0980e+10 2.2241e+12 42730 - Garage_Area 1 6.4143e+10 2.2173e+12 42735 - Bldg_Type 4 7.1274e+10 2.2244e+12 42736 - Full_Bath 1 6.8198e+10 2.2214e+12 42739 - Overall_Qual 9 1.7183e+12 3.8715e+12 43862 Once Street is removed, the new “base model” (without this variable) has an AIC value of 42,674.6. This is now the new value to beat. Repeating this process with removing the other variables one at a time, we see the output: Df Sum of Sq RSS AIC 2.1547e+12 42675 - TotRms_AbvGrd 1 2.9784e+09 2.1577e+12 42675 - Central_Air 1 1.7247e+10 2.1720e+12 42689 - Roof_Style 5 2.8560e+10 2.1833e+12 42692 - Half_Bath 1 3.4751e+10 2.1895e+12 42705 - Lot_Area 1 3.5041e+10 2.1898e+12 42706 - Fireplaces 1 3.6680e+10 2.1914e+12 42707 - House_Style 7 7.3149e+10 2.2279e+12 42729 - Garage_Area 1 6.3520e+10 2.2182e+12 42732 - Bldg_Type 4 7.3044e+10 2.2278e+12 42735 - Full_Bath 1 6.8973e+10 2.2237e+12 42737 - Second_Flr_SF 1 1.2513e+11 2.2798e+12 42788 - First_Flr_SF 1 1.4221e+11 2.2969e+12 42804 - Overall_Qual 9 1.7202e+12 3.8749e+12 43860 Notice that none of the removal of variables is better than the “base model” based on the AIC (best one is TotRms_AbvGrd and that has an AIC of 42675, which is not better than the base model). Since none of the removals improve the model, the algorithm stops here with all variables in the model except Street. A quick note here: notice that backward elimination selected the same model as forward selection. This will not always be the case! Therefore, the final model is: Step: AIC=42674.6 Sale_Price ~ Lot_Area + Bldg_Type + House_Style + Overall_Qual + Roof_Style + Central_Air + First_Flr_SF + Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + Garage_Area + TotRms_AbvGrd The code below illustrates how to do backward elimination with BIC and p-values. # k = log(n) for BIC selection back.model2 &lt;- step(full.model, scope = list(lower = empty.model, upper = full.model), direction = &quot;backward&quot;, k = log(nrow(train_sel))) # k = qchisq(alpha, 1, lower.tail = FALSE) for p-value with alpha selection alpha.f=0.05 back.model3 &lt;- step(full.model, scope = list(lower = empty.model, upper = full.model), direction = &quot;backward&quot;, k = qchisq(alpha.f, 1, lower.tail = FALSE)) Stepwise Stepwise selection is a combination of both of these methods. In this algorithm, we start with the “base model” as the empty model (i.e. just the intercept) and will add variables (as in forward selection). However, as we add new variables, we will also check that the variables in the model are still contributing (in other words, after a new variable is added, we check to see if the model would be better if we drop one of the other variables in the model). Keep in mind that this algorithm is similar to forward selection and backward elimination in that only one variable may either enter or be removed at each step. The algorithm stops when no more variables can be added to nor taken away from the model (in other words, the current “base model” is better than adding any single addition of one variable or any single extraction of one variable). The addition and removal of variables is again based upon the criteria specified. See the algorithm below: Start with empty model with only the intercept in it, this is the base model and calculate the criterion on this model For each variable not in model, create a linear regression model with the base model plus this variable; create additional models with the base model taking away one variable at a time See which linear regression is best (based on criterion) Is this regression better than the base model? Yes, then continue on to step 4 No, exit the algorithm with the base model as the chosen model The base model is now the best model selected in step 3. Using this as your new base model, go back to step 1 and continue. To do stepwise selection in R, you will use the step function. The “empty model” should be used as your initial model. For the scope of the model, you need to put the “smallest model” (just the intercept) to the “largest model” (full model). The direction is both. The penalty (which indicates the criteria) can be controlled by defining “\\(k\\)”. As discussed before, a value of 2 will use the AIC criterion, a value of \\(log(n)\\) will produce the BIC penalty, and finally the upper \\(\\alpha\\)-quantile of a \\(\\chi^{2}\\) distribution with one degree of freedom will use p-value for its removal of variables. # Create full model and empty model full.model &lt;- lm(Sale_Price ~ . , data = train_sel) empty.model &lt;- lm(Sale_Price ~ 1, data = train_sel) # k = 2 for AIC selection step.model &lt;- step(empty.model, scope = list(lower = empty.model, upper = full.model), direction = &quot;both&quot;, k = 2) As you can see, the initial base model is just the intercept (AIC=46,323.64). From this initial model, all simple linear regressions are created and the AIC is observed. Start: AIC=46323.64 Sale_Price ~ 1 Df Sum of Sq RSS AIC + Overall_Qual 9 9.3437e+12 3.8531e+12 43817 + Gr_Liv_Area 1 6.4389e+12 6.7578e+12 44953 + Garage_Area 1 5.3561e+12 7.8407e+12 45258 + First_Flr_SF 1 4.8867e+12 8.3100e+12 45377 + Full_Bath 1 3.7827e+12 9.4141e+12 45633 + TotRms_AbvGrd 1 3.2304e+12 9.9663e+12 45750 + Fireplaces 1 2.9715e+12 1.0225e+13 45802 + Half_Bath 1 1.1209e+12 1.2076e+13 46144 + Roof_Style 5 1.0724e+12 1.2124e+13 46160 + Central_Air 1 9.6147e+11 1.2235e+13 46170 + House_Style 7 1.0245e+12 1.2172e+13 46172 + Second_Flr_SF 1 9.4611e+11 1.2251e+13 46173 + Lot_Area 1 9.0332e+11 1.2293e+13 46180 + Bldg_Type 4 4.6434e+11 1.2732e+13 46258 + Street 1 3.1752e+10 1.3165e+13 46321 1.3197e+13 46324 As you can see from the above output, the “best” model is the one containing Overall_Qual. Therefore, the new base model is the one containing just this variable.   Using this as the new base model, we look at adding each of the individual variables to this model (see output below), as well as taking away the variables in the model (in this case, just Overall_Qual). From the output, you can see a “+” for when a variable is being added and a “-” for when a variable is being taken away. Step: AIC=43816.66 Sale_Price ~ Overall_Qual Df Sum of Sq RSS AIC + Gr_Liv_Area 1 9.8905e+11 2.8640e+12 43210 + First_Flr_SF 1 5.2665e+11 3.3264e+12 43517 + Garage_Area 1 4.6644e+11 3.3866e+12 43554 + TotRms_AbvGrd 1 4.6123e+11 3.3918e+12 43557 + Full_Bath 1 4.1206e+11 3.4410e+12 43587 + Fireplaces 1 4.0551e+11 3.4476e+12 43591 + Lot_Area 1 3.8148e+11 3.4716e+12 43605 + Bldg_Type 4 2.3715e+11 3.6159e+12 43694 + Second_Flr_SF 1 1.7555e+11 3.6775e+12 43723 + Half_Bath 1 1.3948e+11 3.7136e+12 43743 + Central_Air 1 9.1322e+10 3.7617e+12 43769 + House_Style 7 6.1815e+10 3.7912e+12 43797 + Roof_Style 5 5.1448e+10 3.8016e+12 43799 3.8531e+12 43817 + Street 1 1.9573e+06 3.8531e+12 43819 - Overall_Qual 9 9.3437e+12 1.3197e+13 46324 The best model is now the one adding Gr_Liv_Area to the old base model that just included Overall_Qual. This becomes the new base model and the algorithm continues below.. Step: AIC=43210.24 Sale_Price ~ Overall_Qual + Gr_Liv_Area Df Sum of Sq RSS AIC + House_Style 7 2.5351e+11 2.6105e+12 43034 + Garage_Area 1 2.1638e+11 2.6476e+12 43051 + Lot_Area 1 1.3097e+11 2.7330e+12 43116 + First_Flr_SF 1 1.2210e+11 2.7419e+12 43123 + Fireplaces 1 1.1069e+11 2.7533e+12 43131 + Central_Air 1 1.1050e+11 2.7535e+12 43132 + Second_Flr_SF 1 1.0207e+11 2.7619e+12 43138 + Bldg_Type 4 1.0299e+11 2.7610e+12 43143 + Roof_Style 5 6.0726e+10 2.8033e+12 43176 + Full_Bath 1 3.2970e+10 2.8310e+12 43188 + TotRms_AbvGrd 1 2.4688e+10 2.8393e+12 43194 2.8640e+12 43210 + Half_Bath 1 4.0261e+07 2.8640e+12 43212 + Street 1 2.2632e+07 2.8640e+12 43212 - Gr_Liv_Area 1 9.8905e+11 3.8531e+12 43817 - Overall_Qual 9 3.8938e+12 6.7578e+12 44953 Skipping ahead to the final step, we see that the base model includes the variables Overall_Qual, House_Style, Garage_Area, Bldg_Type, Fireplaces, Full_Bath, Half_Bath, Lot_Area, Roof_Style, Central_Air, Second_Flr_SF, TotRms_AbvGrd and First_Flr_SF. Looking at the output below, this is the “best model” (no other model, either inputting one more variable nor removing one variable can beat it based on this criteria). Step: AIC=42674.6 Sale_Price ~ Overall_Qual + House_Style + Garage_Area + Bldg_Type + Fireplaces + Full_Bath + Half_Bath + Lot_Area + Roof_Style + Central_Air + Second_Flr_SF + TotRms_AbvGrd + First_Flr_SF Df Sum of Sq RSS AIC 2.1547e+12 42675 - TotRms_AbvGrd 1 2.9784e+09 2.1577e+12 42675 + Street 1 1.0581e+09 2.1537e+12 42676 + Gr_Liv_Area 1 5.2156e+08 2.1542e+12 42676 - Central_Air 1 1.7247e+10 2.1720e+12 42689 - Roof_Style 5 2.8560e+10 2.1833e+12 42692 - Half_Bath 1 3.4751e+10 2.1895e+12 42705 - Lot_Area 1 3.5041e+10 2.1898e+12 42706 - Fireplaces 1 3.6680e+10 2.1914e+12 42707 - House_Style 7 7.3149e+10 2.2279e+12 42729 - Garage_Area 1 6.3520e+10 2.2182e+12 42732 - Bldg_Type 4 7.3044e+10 2.2278e+12 42735 - Full_Bath 1 6.8973e+10 2.2237e+12 42737 - Second_Flr_SF 1 1.2513e+11 2.2798e+12 42788 - First_Flr_SF 1 1.4221e+11 2.2969e+12 42804 - Overall_Qual 9 1.7202e+12 3.8749e+12 43860 As you can see from the above stepwise procedures of forward, backward and stepwise, the algorithms attempt to find the “best model” by either adding one variable or taking away one variable at at a time. There is no guarantee that these algorithms will find the best model, but they do provide some guidance in terms of potential significance variables and can provide assistance when the number of variables under consideration is very large. As a caution though, you should always do further investigation once you have found models through these algorithms. These algorithms can give the same models or different models as their final selection based on the algorithm selected and the criteria used. 4.3 Significance Levels If you are going to use the “p-value” method, you need to be aware of some considerations due to sample size. The larger the sample size, the smaller the p-values will be and the more likely it is that you will end up seeing many “significant” p-values due to the relationship between p-values and sample size (not necessarily because that variable was informative). The paper by Raftery on the Moodle page sums up the problem nicely and provides at least some guidance in terms of potential alpha-levels to use for different sample sizes. A summary of the table is provided below. Evidence 30 50 100 1000 Weak 0.076 0.53 0.032 0.009 Fair 0.028 0.019 0.010 0.003 Strong 0.005 0.003 0.001 0.0003 Very Strong 0.001 0.0005 0.0001 0.00004 You can quickly see that for even sample sizes of 1000, one should consider the value of alpha that is used to determine significance. One thing that most researchers agree on is that considerations need to be taken for larger sample size. However, what those considerations should be and exactly how to do that is not agreed upon. You should consider your sample size when you are determining what level of significance you want to choose for your analysis (also take into account which is worse….a type I error or a type II error). There is no quick answer to this question and each decision will depend on the analysis being conducted. 4.3.1 Python Code Python does NOT have nice capabilities to do this automatically in statsmodels, scikitlearn, or scipy. All resources I can find involve downloading and installing a package (mlxtend) that is not included by default in anaconda or writing your own function. Scikit learn has something similar but uses the model’s coefficients (!!!) to select, not p-values. Scikit learn can do this by evaluating a metric on cross-validation, but that is not covered until machine learning in Fall 3. "],["diag.html", "Chapter 5 Diagnostics 5.1 Examining Residuals 5.2 Misspecified Model 5.3 Constant Variance 5.4 Normality 5.5 Correlated Errors 5.6 Influential Observations and Outliers 5.7 Multicollinearity", " Chapter 5 Diagnostics In this Chapter, we will take a look at each of the assumptions in a linear model. We will discuss what tools you will use to assess these assumptions, how to diagnose if the assumptions are met, some common problems often encountered when these assumptions do not hold and finally some remedies to fix these common issues. You will notice that a variety of data sets are used throughout this Chapter. This is to help visualize and test for various assumptions and how to identify when these assumptions are not met. This Chapter aims to answer the following questions: How to use residuals from a multiple linear regression model to assess the assumptions. Does the mean of the response have a linear pattern in the explanatory variables? Do the residuals have a constant variance? Are the residuals normally distributed? Are the residuals independent? How to identify potential outliers and influential points. How to identify potential multicolliearity. In multiple linear regression, the assumptions are as follows: The mean of the Y’s is accurately modeled by a linear function of the X’s. The random error term, \\(\\varepsilon\\), is assumed to have a normal distribution with a mean of zero. The random error term, \\(\\varepsilon\\), is assumed to have a constant variance, \\(\\sigma^{2}\\). The errors are independent. No perfect collinearity. Before exploring the assumptions of a linear model, it is always good to visually take a look at your data (if it is not too large). The pairs command in R allows you to look at all scatterplots between the variables in a data set. To illustrate this, we will use the Salaries data set in the package carData in R that has 397 observations of salaries for professors. The explanatory variables include: rank: a factor with levels AssocProf, AsstProf, Prof discipline: a factor with levels A (“theoretical” departments) or B (“applied” departments) yrs.since.phd: years since PhD yrs.service: years of service sex: a factor with levels Female and Male salary: nine-month salary, in dollars Using this data set, let’s take a look at the relationship between each pair of variables in Figure 5.1. library(carData) library(ggplot2) library(gridExtra) library(grid) library(lattice) library(nortest) library(MASS) library(TSA) library(lmtest) library(car) pairs(Salaries) Figure 5.1: Matrix of Scatter Plots for the Salaries Data If there are not too many variables, this plot is a nice way to see all the relationships in the data set. The variables are listed along the diagonal and each off diagonal plot is a scatterplot of the variables represented by that row and column. For example, the first row of plots have rank on the y-axis. The first column of plots have rank along the x-axis. 5.0.1 Python Code Salaries = r.Salaries Salaries = Salaries.rename(columns={&quot;yrs.since.phd&quot;: &quot;yrs_since_phd&quot;, &quot;yrs.service&quot;: &quot;yrs_service&quot;}) ax = sns.pairplot(data = Salaries[[&#39;rank&#39;, &#39;discipline&#39;, &#39;yrs_since_phd&#39;, &#39;yrs_service&#39;, &#39;salary&#39;]]) plt.show() 5.1 Examining Residuals As you can see from the above list of assumptions that most of them involve the error term which is estimated by the residuals. We will be using the residuals for many of these diagnostics. One of the most useful plot is referred as the residual plot. This plot will have the residuals along the y-axis and either the predicted values or individual x-values along the x-axis. The following figure is an example using the residuals from a linear model predicting salary using all of the explanatory variables. lm.model=lm(salary~.,data=Salaries) ggplot(lm.model,aes(x=fitted(lm.model),y=resid(lm.model)))+geom_point(color=&quot;blue&quot;)+labs(x=&quot;Predicted Values&quot;,y=&quot;Residuals&quot;) Figure 5.2: Residuals vs. Predicted Values for Salary Model 5.1.1 Python Code model_mlr = smf.ols(&quot;salary ~ C(rank) + C(discipline) + yrs_since_phd + yrs_service + C(sex)&quot;, data = Salaries).fit() model_mlr.summary() Salaries[&#39;pred_mlr&#39;] = model_mlr.predict() Salaries[&#39;resid_mlr&#39;] = model_mlr.resid Salaries[[&#39;salary&#39;, &#39;pred_mlr&#39;, &#39;resid_mlr&#39;]].head(n = 10) ax = sns.relplot(data = Salaries, y = &quot;resid_mlr&quot;, x = &quot;pred_mlr&quot;) ax.set(ylabel = &#39;Residuals&#39;, xlabel = &#39;Predicted Salary&#39;) plt.show() 5.2 Misspecified Model One of the assumptions assumes that the expected value of the response is accurately modeled by a linear function of the explanatory variables. If this is true, then we would expect our residual plots to be random scatter (in other words, all of the “signal” was correctly captured in the model and there is just noise left over). Figure 5.3: Ideal residual plot showing residual values randomly distributed with equal variance Looking at the plot in Figure 5.3, we see that there is no pattern. If you did see some type of pattern in this residual plot, it would indicate that you are missing something and need to do some more modeling. For example, a quadratic shape or curvilinear pattern to the residuals would indicate that one of our input variables has a nonlinear relationship to the response and transformations should be made to that input accordingly. For example, a residual scatter plot like Figure 5.4 would prompt us to consider a quadratic term. Figure 5.4: Residual plot indicating that a quadratic term is required If your model has more than one x, it is easier to see if an individual input variable has a quadratic relationship with the response when looking at plots like Figure 5.4 where the input variable is on the x-axis. Example Let’s take a look at an example of where a quadratic linear regression is needed. This example is studying the effect of a chemical additive on paper strength. The response variable is the amount of force required to break the paper (strength) and the explanatory variable is the amount of chemical additive (amount). amount=c(1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5) strength=c(2.4,2.6,2.7,2.5,2.6,2.6,2.7,2.8,2.8,2.8,3.0,3.0,3.0,2.9,2.9,3.0,3.1,2.9,2.9,3.0,2.9,2.8) lm.quad=lm(strength~amount) summary(lm.quad) ## ## Call: ## lm(formula = strength ~ amount) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.199780 -0.091850 0.004185 0.101707 0.206167 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.50176 0.06920 36.154 &lt; 2e-16 *** ## amount 0.09802 0.01998 4.907 8.52e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.1283 on 20 degrees of freedom ## Multiple R-squared: 0.5462, Adjusted R-squared: 0.5236 ## F-statistic: 24.08 on 1 and 20 DF, p-value: 8.518e-05 ggplot(lm.quad,aes(x=amount,y=resid(lm.quad)))+geom_point(color=&quot;blue&quot;,size=3)+labs( x=&quot;Amount&quot;, y=&quot;Residuals&quot;) Figure 5.5: Residual Plot Showing a Quadratic Relationship The above fitted model is \\[\\hat{Y}_{i} = 2.5 + 0.1x_{i}.\\] However, after looking at the residual plot and noticing the quadratic shape, we realize that we need a higher order term for amount. lm.quad=lm(strength~amount + I(amount^2)) summary(lm.quad) ## ## Call: ## lm(formula = strength ~ amount + I(amount^2)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.22276 -0.06562 -0.02763 0.07602 0.19466 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.21334 0.13399 16.519 9.97e-13 *** ## amount 0.32928 0.09690 3.398 0.00302 ** ## I(amount^2) -0.03728 0.01535 -2.428 0.02526 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.115 on 19 degrees of freedom ## Multiple R-squared: 0.6537, Adjusted R-squared: 0.6173 ## F-statistic: 17.93 on 2 and 19 DF, p-value: 4.212e-05 ggplot(lm.quad,aes(x=amount,y=resid(lm.quad)))+geom_point(color=&quot;orange&quot;,size=2)+labs(title=&quot;Residual plot&quot;, x=&quot;Amount&quot;, y=&quot;Residuals&quot;) Figure 5.6: New Residual Plot after Fitting a Quadratic Term The second order polynomial model is \\[\\hat{Y}_{i} = 2.21 + 0.33x_{i}-0.04x^{2}_{i}\\] and the residuals from this model are shown in Figure 5.6. If you think there might still be some pattern in Figure 5.6, you could try a third degree polynomial: lm.3=lm(strength~amount+I(amount^2)+I(amount^3)) summary(lm.3) ## ## Call: ## lm(formula = strength ~ amount + I(amount^2) + I(amount^3)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.15941 -0.06360 0.00272 0.08579 0.14142 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.73280 0.26060 10.487 4.28e-09 *** ## amount -0.36900 0.32208 -1.146 0.2669 ## I(amount^2) 0.22339 0.11651 1.917 0.0712 . ## I(amount^3) -0.02862 0.01270 -2.254 0.0369 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.1044 on 18 degrees of freedom ## Multiple R-squared: 0.7299, Adjusted R-squared: 0.6849 ## F-statistic: 16.22 on 3 and 18 DF, p-value: 2.344e-05 ggplot(lm.3,aes(x=amount,y=resid(lm.3)))+geom_point(color=&quot;orange&quot;,size=2)+labs(x=&quot;Amount&quot;, y=&quot;Residuals&quot;) Figure 5.7: New Residual Plot after Fitting a Cubic Term The new regression equation is now \\[\\hat{Y}_{i} = 2.73 - 0.37x_{i}+0.22x^{2}_{i}-0.03x^{3}_{i}.\\] In wrapping up the misspecified model, if a linear model does not look appropriate (there is a pattern in the residual plot), then you can try the following remedies: Fit a polynomial or more complex regression model. Transform the dependent and/or independent variables to obtain linearity. Fit a nonlinear regression model, if appropriate (will need to decide the shape of a nonlinear model). Fit a nonparametric regression model (for example splines or a LOESS regression). 5.2.1 Python Code chemical = pd.DataFrame({&#39;amount&#39;: [1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5], &#39;strength&#39;: [2.4,2.6,2.7,2.5,2.6,2.6,2.7,2.8,2.8,2.8,3.0,3.0,3.0,2.9,2.9,3.0,3.1,2.9,2.9,3.0,2.9,2.8]}) model_quad = smf.ols(&quot;strength ~ amount&quot;, data = chemical).fit() model_quad.summary() chemical[&#39;pred_mlr&#39;] = model_quad.predict() chemical[&#39;resid_mlr&#39;] = model_quad.resid ax = sns.relplot(data = chemical, y = &quot;resid_mlr&quot;, x = &quot;amount&quot;) ax.set(ylabel = &#39;Residuals&#39;, xlabel = &#39;Amount&#39;) plt.show() model_quad2 = smf.ols(&quot;strength ~ amount + I(amount**2)&quot;, data = chemical).fit() model_quad2.summary() chemical[&#39;pred_mlr2&#39;] = model_quad2.predict() chemical[&#39;resid_mlr2&#39;] = model_quad2.resid ax = sns.relplot(data = chemical, y = &quot;resid_mlr2&quot;, x = &quot;amount&quot;) ax.set(ylabel = &#39;Residuals&#39;, xlabel = &#39;Amount&#39;) plt.show() model_quad3 = smf.ols(&quot;strength ~ amount + I(amount**2) + I(amount**3)&quot;, data = chemical).fit() model_quad3.summary() chemical[&#39;pred_mlr3&#39;] = model_quad3.predict() chemical[&#39;resid_mlr3&#39;] = model_quad3.resid ax = sns.relplot(data = chemical, y = &quot;resid_mlr3&quot;, x = &quot;amount&quot;) ax.set(ylabel = &#39;Residuals&#39;, xlabel = &#39;Amount&#39;) plt.show() 5.3 Constant Variance Another assumption for linear regression is that the variance is constant about the line. Looking at Figure 5.8, you see that the variation about the line is constant across the line (notice the bands that have been drawn around the line). Figure 5.8: Residual Plot Showing Non-Constant Variance However, an example of where this is not true is shown in Figure 5.9. Figure 5.9: Residual Plot Showing Non-Constant Variance Notice how the variability increases as the predicted values increase (the bands get wider). This is referred to as heteroskedasticity in the variance, which violates the constant variance assumption (homoskedasticity). The homoskedastic assumption is about the regression line, so it is best to look at the plot of residuals versus predicted values (not individual x-values). There are a few tests for this assumption, but they are limited in what they are able to test. Best way to evaluate this assumption is by visualizing the residual plot and make a judgement call. If the variance appears to be heteroskadastic, any inferences under the traditional assumptions will be incorrect. In other words, hypothesis tests and confidence intervals based on the t, F, and \\(\\chi^{2}\\) distributions will not be valid. Example The following fictious salary data set is from the online textbook Applied Statistics with R. The explanatory variable is number of years employment and the response variable is annual salary. years=c(1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25) salary=c(41504,32619,44322,40038,46147,38447,38163,42104,25597,39599,55698,47220,65929,55794,45959,52460,60308,61458,56951,56174,59363,57642,69792,59321,66379,64282,48901,100711,59324,54752,73619,65382,58823,65717,92816,72550,71365,88888,62969,45298,111292,91491,106345,99009,73981,72547,74991,139249,119948,128962,98112,97159,125246,89694,73333,108710,97567,90359,119806,101343,147406,153020,143200,97327,184807,146263,127925,159785,174822,177610,210984,160044,137044,182996,184183,168666,121350,193627,142611,170131,134140,129446,201469,202104,220556,166419,149044,247017,247730,252917,235517,241276,197229,175879,253682,262578,207715,221179,212028,312549) lm.var=lm(salary~years) ggplot(lm.var,aes(x=fitted(lm.var),y=resid(lm.var)))+geom_point(color=&quot;blue&quot;)+labs(title=&quot;Residual Plot&quot;, x=&quot;Predicted Values&quot;,y=&quot;Residuals&quot;) Figure 5.10: Residuals With Heteroskedasticity As you can see from the residual plot in Figure 5.10, the graph exhibits a fan-shape and the variance is increasing as the predicted values get larger. We can apply a logarithmic transform to try to stabilize the variance, the result of which is shown in Figure 5.11. Figure 5.11: Residual Plot Showing Stabilized Variance after Log Transform The log transform stabilized the variance and produces a better residual plot. If the assumption of Homoskadicity of variance is violated, there are a few remedies you can try: Use Weighted Least Squares (WLS) or iteratively reweighted least squares (IRLS). Transform data. Use a different distribution (for example if the response is count data, use Poisson distribution). 5.3.1 Python Code experience = pd.DataFrame({&#39;salary&#39;: [41504,32619,44322,40038,46147,38447,38163,42104,25597,39599,55698,47220,65929,55794,45959,52460,60308,61458,56951,56174,59363,57642,69792,59321,66379,64282,48901,100711,59324,54752,73619,65382,58823,65717,92816,72550,71365,88888,62969,45298,111292,91491,106345,99009,73981,72547,74991,139249,119948,128962,98112,97159,125246,89694,73333,108710,97567,90359,119806,101343,147406,153020,143200,97327,184807,146263,127925,159785,174822,177610,210984,160044,137044,182996,184183,168666,121350,193627,142611,170131,134140,129446,201469,202104,220556,166419,149044,247017,247730,252917,235517,241276,197229,175879,253682,262578,207715,221179,212028,312549], &#39;years&#39;: [1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25]}) model_var = smf.ols(&quot;salary ~ years&quot;, data = experience).fit() model_var.summary() experience[&#39;pred_mlr&#39;] = model_var.predict() experience[&#39;resid_mlr&#39;] = model_var.resid ax = sns.relplot(data = experience, y = &quot;resid_mlr&quot;, x = &quot;years&quot;) ax.set(ylabel = &#39;Residuals&#39;, xlabel = &#39;Years&#39;) plt.show() experience[&#39;log_salary&#39;] = np.log(experience[&#39;salary&#39;]) model_var2 = smf.ols(&quot;log_salary ~ years&quot;, data = experience).fit() model_var2.summary() experience[&#39;pred_mlr2&#39;] = model_var2.predict() experience[&#39;resid_mlr2&#39;] = model_var2.resid ax = sns.relplot(data = experience, y = &quot;resid_mlr2&quot;, x = &quot;years&quot;) ax.set(ylabel = &#39;Residuals&#39;, xlabel = &#39;Years&#39;) plt.show() 5.4 Normality Another assumption is that the residuals are normally distributed. We can test this assumption through use of visual aids or formal hypothesis tests. visual aids include a histogram of the residuals or Q-Q plot of residuals. A few tests of normality of residuals, include (but not limited to) Shapiro-Wilk, Anderson-Darling, Kolmogorov-Smirnov tests. In addition to the base R package, you should also install and library the nortest package. Visualization To visually inspect whether or not the residuals are normally distributed, we can either graph the historgram of residuals or create a Q-Q plot of the residuals. In the histogram, we are looking for a bell-shaped curve and in the Q-Q plot, we are looking for a straight line. Figure 5.12: Histogram and Q-Q Plot of Residuals Formal Hypothesis tests You can also run a formal hypothesis test. The hypotheses are \\(H_{0}:\\) Residuals are normally distributed \\(H_{A}:\\) Residuals are not normally distributed. There are MANY different tests for normality. Only two will be covered here. Anderson-Darling is based on the empirical cumulative distribution function of the data and gives more weight to the tails. Shapiro-Wilk test uses the idea of correlation between the sample data and normal scores. The Shapiro-Wilk is better for smaller data sets. With large samples, you will most likely end up rejecting these hypothesis tests (using corrected significance levels is recommended). Keep in mind that you can also get different result from different tests. It is up to you to make the decision on whether or not you are comfortable in the assumption for normality holding in different situations. set.seed(55402) x=rnorm(1000,0,4) ad.test(x) ## ## Anderson-Darling normality test ## ## data: x ## A = 0.30275, p-value = 0.5742 shapiro.test(x) ## ## Shapiro-Wilk normality test ## ## data: x ## W = 0.99889, p-value = 0.814 Using a simulated data set (so the “TRUE” distribution is actually normal indicating that we should “Fail to reject” the null hypothesis). The p-values from both of these test illustrate that they would indicate the distribution is not significantly different from normal (which it should). Box-cox Transformation If the residuals are not normally distributed, one solution is to transform them to normality. However, the exact transformation might be difficult to identify. George Box and Sir David Cox developed an algorithm back in the 1960’s to assist in identifying “power” transformations to make a variable normally distributed (think…“what power should I raise this variable to?”). Their algorithm tries out different values of \\(\\lambda\\) or powers of the response variable in the following way: \\[y = \\begin{array} {rr} \\frac{y^{\\lambda}-1}{\\lambda} &amp; if \\lambda \\ne 0 \\\\ log(y) &amp; if \\lambda = 0 \\end{array}\\] Example Using the residuls from the originally salary data, we can take a look at the box-cox transformation. lm.var=lm(salary~years) boxcox(lm.var) The output from the graph clearly incates that \\(\\lambda\\) should be 0, which indicates a log transform. In conclusion, to deal with data that is NOT normally distributed, we can either Use a robust regression (quantile regression or nonparametric) Transform either response or predictor variables or both to obtain normality in the residuals. 5.4.1 Python Code sm.api.qqplot(experience[&#39;resid_mlr&#39;]) plt.show() sp.stats.shapiro(model_var.resid) bc = sp.stats.boxcox(experience[&#39;salary&#39;], alpha = 0.05) bc[1] # maxlog lambda value bc[2] # CI for lambda value 5.5 Correlated Errors Another important assumption is that the observations are independent. There are a couple of ways in which we assess this assumtpion: Experimental design or collection of data Explore residual plots Depending on how the data was collected or the experimental design, there could be potential correlation in the observations. For example, if the data collected information on multiple family members (include husband and wife and kids). Or if multiple observations were collected on the same subject. There are various models that exists that can account for this dependence (longitudinal analysis, hierarchical models, etc). However, this type of analysis will be covered later throughout the year. There is no diagnostic measures to indicate this correlation structure. Your best way of knowing it is there is to know the experimental design or collection of data.  We will focus our attention on a form of dependence that is evident from the residual plots, which is autocorrelation. This happens when ordered observations are dependent on prior observations. One of the most common instances of this correlation structure is through data that is collected over time, also referred to as time series. You will learn more about time series data in the Fall semester, but for now, let’s explore how to recognize if it is an issue in the analysis. To diagnose autocorrelation in data, you can Visually inspect the plot of residuals by time (see a pattern over time…usually cyclical) Conduct a Durbin-Watson test In visually inspecting a plot of residuals across time, you would expect to see a type of cyclical pattern if autocorrelation exists as it does in Figure 5.13. Figure 5.13: Residuals vs Time: Autocorrelation Present In using the Durbin-Watson test, the hypotheses are: \\(H_{0}:\\) No residual correlation \\(H_{A}:\\) Residual Correlation The Durbin-Watson test statistic is calculated by \\[ d=\\frac{\\sum_{t=2}^T(e_{t}-e_{t-1})^2}{\\sum_{t=1}^T e_{t}^2}\\] where \\(e\\) represents the error terms, or residuals. The statistic d ranges from 0 to 4, with a value of 2 indicating no residual correlation. Values of d smaller than 2 may indicate a positive autocorrelation and a value of d larger than 2 may indicate a negative autocorrelation. However, the question becomes when is it “significantly different” than 2? Unless there is good reason to assume a negative autocorrelation, testing for positive autocorrelation would be the preferred test. The Durbin-Watson test is in the lmtest package of R. If you want to test for positive autocorrelation, you will need to specify the alternative of “greater” (even though the test statistic is testing for a value LESS than 2!!). Example The following data set illustrates this test using the Google data set in the TSA package (returns of Google stock from 08/20/04 - 09/13/06). data(google) x=seq(1,length(google)) lm.model=lm(google~x) dwtest(lm.model,alternative=&quot;greater&quot;) ## ## Durbin-Watson test ## ## data: lm.model ## DW = 1.842, p-value = 0.0321 ## alternative hypothesis: true autocorrelation is greater than 0 In running this test, you either need to have the data sorted by the correct date (it assumes the observations are correctly ordered by time). If they are not, there is an order.by option in which you can use. For this example, the p-value is 0.0321, which if we use an \\(\\alpha\\) of 0.05, we would reject the null hypothesis and conclude there appears to be significant positive autocorrelation. If your data has significant autocorrelation, then the error terms will not be correct. We will discuss in the Fall semester how to model time series data appropriately. 5.5.1 Python Code google = r.google returns = pd.DataFrame({&#39;returns&#39;: google, &#39;time&#39;: range(1, len(google)+1)}) model_dw = smf.ols(&quot;returns ~ time&quot;, data = returns).fit() model_dw.summary() Durbin-Watson test statistic is reported by default in summary of linear regression, but there is no way of getting a p-value for this metric in Python. 5.6 Influential Observations and Outliers Influential points and outliers play a large role in the estimation of the model and its prediction. Influential points are usually those points on the edges of the x-values and can greatly impact the slopes in the regression equation. Outliers tend to be those values that do not follow the trend of the data and are generally found by large deviations in the y direction. For multiple linear regression, outliers are found by using residuals. These can be standardize residuals or studentized residuals. Influential points can be discovered by Cook’s D, dffits, dfbetas or Hat values. These points are important to identify and recognize their influence on the regression, however, it does NOT mean that these points should be removed. Removal of data should be taken very seriously. We would obviously want to omit any observations made in error, due to typos or reporting inaccuracies, but we do not remove data points just because they are outside the scope of our expectations. We have many tools at our disposal for modeling with such observations, and we should always develop a deep understanding of the application-specific risks and rewards associated with data removal. In the this section we will cover the following statistics to help us detect outliers and influential observations respectively. Outliers rstandard rstudent Influential observations dffits dfbetas cooks.distance hatvalues Outliers In using residuals to detect outliers, we first need to “standardize” them, or divide by their standard errors. In this sense, we can think of these “standardized” residuals as an approximate z-score. Therefore, we look for residuals greater in magnitude than 3 as potential outliers. R calculates two different types of standardized residuals: 1. internally studentized residuals and 2. externally studentized residuals. Internally studentized residuals are definied as \\[ r_{i}=\\frac{e_{i}}{\\hat\\sigma\\sqrt{1-H_{ii}}},\\] where \\(\\hat\\sigma\\) is the square root of the MSE and \\(H_{ii}\\) is from the diagonal of the hat matrix (hat matrix will be discussed in influential observations). In R, these are denoted by rstandard. Externally studentized residuals are definied as \\[ t_{i}=\\frac{e_{i}}{\\hat\\sigma_{(i)}\\sqrt{1-H_{ii}}},\\] where \\(\\hat\\sigma_{(i)}\\) is the square root of the MSE calculated when observation i is deleted and \\(H_{ii}\\) is from the diagonal of the hat matrix. The externally studentized residuals follow a t-distribution with \\(n-k-2\\), where \\(k\\) is the number of explanatory variables(notice that this has one less degree of freedom than the usual error in regression which is due to the one deleted observation). The R code to obtain externally studentized residuals is rstudent. Influential observations Influential observations are observations that can dramatically change the model’s estimates. It is important to identify and understand these where these observations are. There are a number of different measures to aid in identifying influential observations, which will be discussed below. Cook’s distance, also referred to as Cook’s D, measures the difference in the regression estimates when the \\(i^{th}\\) observation is left out. A rough rule of thumb used as a cutoff is if \\(D_{i}\\) is greater than \\(\\frac{4}{n-p-1}\\). Dffits calculates the difference of fitted values for each point in the regression versus the fit of the regression line for that point if it was removed. Large values of dffits indicate that the point is influential in the calculation of the estimated regression line. As a general rule of thumb, a cutoff of \\(2\\sqrt{(p+1)/n}\\) is used to identify potential influential points. Dfbetas follows the same idea as dffits. The difference in the estimated betas is calculated for each observation (observation included in the estimated beta and observation NOT included in estimating the beta). This is done for each individual observation and each estimated beta. For small data sets, a value greater than 1 is suspect of an influential observation. For large data sets, the cutoff is \\(\\frac{2}{\\sqrt{n}}\\). The hat values \\(H_{ii}\\) are the diagonal values of \\[\\boldsymbol{X(X^{T}X)^{-1.}X^{T}}.\\] Hat values can identify high leverage points in a regression. A general rule of thumb are hat values greater than \\(\\frac{2(p+1)}{n}\\). Example We will use the Scottish hill races as an example to illustrate how to calculate and visualize these values. The Scottish hill races include the following variables: Time: Record time to complete course Distance: Distance in the course Climb: Vertical climb in the course url = &#39;http://www.statsci.org/data/general/hills.txt&#39; races_table = read.table(url, header=TRUE, sep=&#39;\\t&#39;) n.index=seq(1,nrow(races_table)) races.table=cbind(races_table,n.index) lm.model=lm(Time~Distance+Climb,data=races_table) ##Plots of outliers a = ggplot(lm.model,aes(x=n.index,y=rstandard(lm.model)))+geom_point(color=&quot;orange&quot;)+geom_line(y=-3)+geom_line(y=3)+labs(title = &quot;Internal Studentized Residuals&quot;,x=&quot;Observation&quot;,y=&quot;Residuals&quot;) b = ggplot(lm.model,aes(x=n.index,y=rstudent(lm.model)))+geom_point(color=&quot;orange&quot;)+geom_line(y=-3)+geom_line(y=3)+labs(title = &quot;External Studentized Residuals&quot;,x=&quot;Observation&quot;,y=&quot;Residuals&quot;) ##Influential points c = ggplot(lm.model,aes(x=n.index,y=rstandard(lm.model)))+geom_point(color=&quot;orange&quot;)+geom_line(y=-3)+geom_line(y=3)+labs(title = &quot;Internal Studentized Residuals&quot;,x=&quot;Observation&quot;,y=&quot;Residuals&quot;) ##Cook&#39;s D D.cut=4/(nrow(races_table)-3-1) d =ggplot(lm.model,aes(x=n.index,y=cooks.distance(lm.model)))+geom_point(color=&quot;orange&quot;)+geom_line(y=D.cut)+labs(title = &quot;Cook&#39;s D&quot;,x=&quot;Observation&quot;,y=&quot;Cook&#39;s Distance&quot;) ##Dffit df.cut=2*(sqrt((3+1)/nrow(races_table))) e =ggplot(lm.model,aes(x=n.index,y=dffits(lm.model)))+geom_point(color=&quot;orange&quot;)+geom_line(y=df.cut)+geom_line(y=-df.cut)+labs(title = &quot;DFFITS&quot;,x=&quot;Observation&quot;,y=&quot;DFFITS&quot;) db.cut=2/sqrt(nrow(races_table)) f =ggplot(lm.model,aes(x=n.index,y=dfbetas(lm.model)[,&#39;Climb&#39;]))+geom_point(color=&quot;orange&quot;)+geom_line(y=db.cut)+geom_line(y=-db.cut)+labs(title = &quot;DFBETA for Climb&quot;,x=&quot;Observation&quot;,y=&quot;DFBETAS&quot;) g =ggplot(lm.model,aes(x=n.index,y=dfbetas(lm.model)[,&#39;Distance&#39;]))+geom_point(color=&quot;orange&quot;)+geom_line(y=db.cut)+geom_line(y=-db.cut)+labs(title = &quot;DFBETA for Distance&quot;,x=&quot;Observation&quot;,y=&quot;DFBETAS&quot;) ##Hat hat.cut=2*(3+1)/nrow(races_table) h = ggplot(lm.model,aes(x=n.index,y=hatvalues(lm.model)))+geom_point(color=&quot;orange&quot;)+geom_line(y=hat.cut)+labs(title = &quot;Hat values&quot;,x=&quot;Observation&quot;,y=&quot;Hat Values&quot;) grid.arrange(a,b,c,d,e,f,g,ncol=2) Figure 5.14: Plots for Exploring Outliers and Influential Points Figure 5.14 shows a number of useful graphics that help us explore outliers and influential points. A good graph to explore is looking at the external studentized residuals versus the hat values. An observation that is high leverage AND an outlier is one that needs to be explored. ggplot(lm.model,aes(x=hatvalues(lm.model),y=rstudent(lm.model))) + geom_point(color=&quot;orange&quot;)+ labs(x=&quot;Hat values&quot;,y=&quot;Residuals&quot;) Figure 5.15: Influential and Outlier Observations 5.6.1 Python Code races_table = r.races_table model_io = smf.ols(&quot;Time ~ Distance + Climb&quot;, data = races_table).fit() model_io.summary() sma.graphics.influence_plot(model_io) plt.show() sma.graphics.plot_leverage_resid2(model_io) plt.show() from statsmodels.stats.outliers_influence import OLSInfluence outliers_inf = OLSInfluence(model_io) outliers_inf.cooks_distance outliers_inf.resid_studentized outliers_inf.dfbetas 5.7 Multicollinearity Multicollinearity occurs when one or more predictor variables are linearly related to each other and will create issues with the regression. The parameter estimates will not be stable and the standard errors will be inflated (making it more difficult to find significant explantory variables). The two most common ways to identify multicollinearity is by looking at the correlation among the predictor variables and calculating the variance inflation factor. The variance inflation factor (also referred to as VIF) will take each explanatory variable and model it as a linear regression of the remaining explanatory variables. For example, let’s say we have the following regression equation: \\[\\widehat{Y}_{i}=b_{0} + b_{1}x_{1}+ b_{2}x_{2}+ b_{3}x_{3}.\\] There are only 3 explanatory variables in this regression. A VIF will be calculated on each \\(x_{i}\\) in the following manner: A regression is fit on each \\(x_{i}\\) with the remaining \\(x_{i}\\)’s as the explanatory variables. For example, to calculate the VIF for \\(x_{1}\\), we fit the following model: \\[\\widehat{x}_{1}=b_{0} + b_{1}x_{2}+ b_{2}x_{3},\\] and obtain the \\(R^2\\) value from this model (call it \\(R_{1}^2\\)). 2. The VIF for \\(x_{1}\\) is calculated by \\[VIF=\\frac{1}{1-R_{1}^2}.\\] Repeat this process for each of the other explanatory variables. If a VIF value is larger than 10, then we say that multicollinearity is an issue. Example We will use the mtcars data set dealing with fuel consumption and automobile design. The data set consists of the following variables: A data frame with 32 observations on 11 (numeric) variables. mpg: Miles/(US) gallon cyl: Number of cylinders disp: Displacement (cu.in.) hp: Gross horsepower drat: Rear axle ratio wt: Weight (1000 lbs) qsec: 1/4 mile time vs: Engine (0 = V-shaped, 1 = straight) am: Transmission (0 = automatic, 1 = manual) gear: Number of forward gears cor(mtcars) ## mpg cyl disp hp drat ## mpg 1.0000000 -0.8521620 -0.8475514 -0.7761684 0.68117191 ## cyl -0.8521620 1.0000000 0.9020329 0.8324475 -0.69993811 ## disp -0.8475514 0.9020329 1.0000000 0.7909486 -0.71021393 ## hp -0.7761684 0.8324475 0.7909486 1.0000000 -0.44875912 ## drat 0.6811719 -0.6999381 -0.7102139 -0.4487591 1.00000000 ## wt -0.8676594 0.7824958 0.8879799 0.6587479 -0.71244065 ## qsec 0.4186840 -0.5912421 -0.4336979 -0.7082234 0.09120476 ## vs 0.6640389 -0.8108118 -0.7104159 -0.7230967 0.44027846 ## am 0.5998324 -0.5226070 -0.5912270 -0.2432043 0.71271113 ## gear 0.4802848 -0.4926866 -0.5555692 -0.1257043 0.69961013 ## carb -0.5509251 0.5269883 0.3949769 0.7498125 -0.09078980 ## wt qsec vs am gear ## mpg -0.8676594 0.41868403 0.6640389 0.59983243 0.4802848 ## cyl 0.7824958 -0.59124207 -0.8108118 -0.52260705 -0.4926866 ## disp 0.8879799 -0.43369788 -0.7104159 -0.59122704 -0.5555692 ## hp 0.6587479 -0.70822339 -0.7230967 -0.24320426 -0.1257043 ## drat -0.7124406 0.09120476 0.4402785 0.71271113 0.6996101 ## wt 1.0000000 -0.17471588 -0.5549157 -0.69249526 -0.5832870 ## qsec -0.1747159 1.00000000 0.7445354 -0.22986086 -0.2126822 ## vs -0.5549157 0.74453544 1.0000000 0.16834512 0.2060233 ## am -0.6924953 -0.22986086 0.1683451 1.00000000 0.7940588 ## gear -0.5832870 -0.21268223 0.2060233 0.79405876 1.0000000 ## carb 0.4276059 -0.65624923 -0.5696071 0.05753435 0.2740728 ## carb ## mpg -0.55092507 ## cyl 0.52698829 ## disp 0.39497686 ## hp 0.74981247 ## drat -0.09078980 ## wt 0.42760594 ## qsec -0.65624923 ## vs -0.56960714 ## am 0.05753435 ## gear 0.27407284 ## carb 1.00000000 lm.model=lm(mpg~.,data=mtcars) vif(lm.model) ## cyl disp hp drat wt qsec ## 15.373833 21.620241 9.832037 3.374620 15.164887 7.527958 ## vs am gear carb ## 4.965873 4.648487 5.357452 7.908747 From the correlation output and VIF output, it is clear that multicollinearity is an issue. To deal with multicollinearity, we can do either of the following: Remove one or more variables that are co-linearly related to another variable(s). Create new transformed variables (take linear combinations of variables; create ratio of variables, etc). 5.7.1 Python Code mtcars = r.mtcars np.corrcoef(mtcars, rowvar = False) X = mtcars.loc[:, mtcars.columns!=&#39;mpg&#39;] X = X.assign(const=1) vif = pd.DataFrame() vif[&#39;VIF&#39;] = [sm.stats.outliers_influence.variance_inflation_factor(X.values, i) for i in range(X.shape[1])] vif[&#39;variable&#39;] = X.columns print(vif) "],["model-building-and-scoring-for-prediction.html", "Chapter 6 Model Building and Scoring for Prediction 6.1 Regularized Regression 6.2 Optimizing Penalties 6.3 Model Comparisons", " Chapter 6 Model Building and Scoring for Prediction In the preceding chapters, we have only scratched the surface of model building. Linear regression is a great initial approach to take to model building. In fact, in the realm of statistical models, linear regression (calculated by ordinary least squares) is the best linear unbiased estimator. The two key pieces to that previous statement are “best” and “unbiased.” What does it mean to be unbiased? Each of the sample coefficients (\\(\\hat{\\beta}\\)’s) in the regression model are estimates of the true coefficients. Just like the statistics back in the EDA section, these sample coefficients have sampling distributions - specifically, normally distributed sampling distributions. The mean of the sampling distribution of \\(\\hat{\\beta}_j\\) is the true (known) coefficient \\(\\beta_j\\). This means the coefficient is unbiased. What does it mean to be best? IF the assumptions of ordinary least squares are met fully, then the sampling distributions of the coefficients in the model have the minimum variance of all unbiased estimators. These two things combined seem like what we want in a model - estimating what we want (unbiased) and doing it in a way that has the minimum amount of variation (best among the unbiased). Again, these rely on the assumptions of linear regression holding true. Another approach to regression would be to use regularized regression instead as a different approach to building the model. This Chapter aims to answer the following questions: What is regularized regression? Penalties in Modeling Ridge Regression LASSO Elastic Net How do you optimize the penalty term? Overfitting Cross-Validation (CV) CV in Regularized Regression How do you compare different types of models? Model Metric Model Scoring Test Dataset Comparison 6.1 Regularized Regression As the number of variables in a linear regression model increase, the chances of having a model that meets all of the assumptions starts to diminish. Multicollinearity can pose a large problem with bigger regression models. As previously discussed, the coefficients of a linear regression vary widely in the presence of multicollinearity. These variations lead to overfitting of a regression model. Overfitting occurs when a dataset predicts the training data it was built off of really well, but does not generalize to the test dataset or the population in general. More formally, these models have higher variance than desired. In those scenarios, moving out of the realm of unbiased estimates may provide a lower variance in the model, even though the model is no longer unbiased as described above. We wouldn’t want to be too biased, but some small degree of bias might improve the model’s fit overall. Another potential problem for linear regression is when we have more variables than observations in our dataset. This is a common problem in the space of genetic modeling. In this scenario, the ordinary least squares approach leads to multiple solutions instead of just one. Unfortunately, most of these infinite solutions overfit the problem at hand anyway. Regularized (or penalized or shrinkage) regression techniques potentially alleviate these problems. Regularized regression puts constraints on the estimated coefficients in our model and shrink these estimates to zero. This helps reduce the variation in the coefficients (improving the variance of the model), but at the cost of biasing the coefficients. The specific constraints that are put on the regression inform the three common approaches - ridge regression, LASSO, and elastic nets. 6.1.1 Penalties in Models In ordinary least squares linear regression, we minimize the sum of the squared residuals (or errors) . \\[ min(\\sum_{i=1}^n(y_i - \\hat{y}_i)^2) = min(SSE) \\] In regularized regression, however, we add a penalty term to the \\(SSE\\) as follows: \\[ min(\\sum_{i=1}^n(y_i - \\hat{y}_i)^2 + Penalty) = min(SSE + Penalty) \\] As mentioned above, the penalties we choose constrain the estimated coefficients in our model and shrink these estimates to zero. Different penalties have different effects on the estimated coefficients. Two common approaches to adding penalties are the ridge and LASSO approaches. The elastic net approach is a combination of these two. Let’s explore each of these in further detail! 6.1.2 Ridge Regression Ridge regression adds what is commonly referred to as an “\\(L_2\\)” penalty: \\[ min(\\sum_{i=1}^n(y_i - \\hat{y}_i)^2 + \\lambda \\sum_{j=1}^p \\hat{\\beta}^2_j) = min(SSE + \\lambda \\sum_{j=1}^p \\hat{\\beta}^2_j) \\] This penalty is controlled by the tuning parameter \\(\\lambda\\). If \\(\\lambda = 0\\), then we have typical OLS linear regression. However, as \\(\\lambda \\rightarrow \\infty\\), the coefficients in the model shrink to zero. This makes intuitive sense. Since the estimated coefficients, \\(\\hat{\\beta}_j\\)’s, are the only thing changing to minimize this equation, then as \\(\\lambda \\rightarrow \\infty\\), the equation is best minimized by forcing the coefficients to be smaller and smaller. We will see how to optimize this penalty term in a later section. Let’s build a regularized regression for our Ames dataset. To build a ridge regression we need separate data matrices for our predictors and our target variable. First, we isolate out the variables we are interested in using the select function. From there the model.matrix function will create any categorical dummy variables needed. We also isolate the target variable into its own vector. train_reg &lt;- train %&gt;% dplyr::select(Sale_Price, Lot_Area, Street, Bldg_Type, House_Style, Overall_Qual, Roof_Style, Central_Air, First_Flr_SF, Second_Flr_SF, Full_Bath, Half_Bath, Fireplaces, Garage_Area, Gr_Liv_Area, TotRms_AbvGrd) %&gt;% replace(is.na(.), 0) train_x &lt;- model.matrix(Sale_Price ~ ., data = train_reg)[, -1] train_y &lt;- train_reg$Sale_Price We will want to do the same thing for the test dataset as well. test_reg &lt;- test %&gt;% dplyr::select(Sale_Price, Lot_Area, Street, Bldg_Type, House_Style, Overall_Qual, Roof_Style, Central_Air, First_Flr_SF, Second_Flr_SF, Full_Bath, Half_Bath, Fireplaces, Garage_Area, Gr_Liv_Area, TotRms_AbvGrd) %&gt;% replace(is.na(.), 0) test_x &lt;- model.matrix(Sale_Price ~ ., data = test_reg)[, -1] test_y &lt;- test_reg$Sale_Price From there we use the glmnet function with the x = option where we specify the predictor model matrix and the y = option where we specify the target variable. The alpha = 0 option specifies that a ridge regression will be used as defined in more detail below in the elastic net section. The plot function allows us to see the impact of the penalty on the coefficients in the model. library(glmnet) ames_ridge &lt;- glmnet(x = train_x, y = train_y, alpha = 0) plot(ames_ridge, xvar = &quot;lambda&quot;) The glmnet function automatically standardizes the variables before fitting the regression model. This is important so that all of the variables are on the same scale before adjustments are made to the estimated coefficients. Even with this standardization we can see the large coefficient values for some of the variables. The top of the plot lists how many variables are in the model at each value of penalty. This will never change for ridge regression, but does for LASSO. What \\(\\lambda\\) term is best? That will be discussed in the optimizing section below, but let’s discuss other possible penalties first. 6.1.3 LASSO Least absolute shrinkage and selection operator (LASSO) regression adds what is commonly referred to as an “\\(L_1\\)” penalty: \\[ min(\\sum_{i=1}^n(y_i - \\hat{y}_i)^2 + \\lambda \\sum_{j=1}^p |\\hat{\\beta}_j|) = min(SSE + \\lambda \\sum_{j=1}^p |\\hat{\\beta}_j|) \\] This penalty is controlled by the tuning parameter \\(\\lambda\\). If \\(\\lambda = 0\\), then we have typical OLS linear regression. However, as \\(\\lambda \\rightarrow \\infty\\), the coefficients in the model shrink to zero. This makes intuitive sense. Since the estimated coefficients, \\(\\hat{\\beta}_j\\)’s, are the only thing changing to minimize this equation, then as \\(\\lambda \\rightarrow \\infty\\), the equation is best minimized by forcing the coefficients to be smaller and smaller. We will see how to optimize this penalty term in a later section. However, unlike ridge regression that has the coefficient estimates approach zero asymptotically, in LASSO regression the coefficients can actually equal zero. This may not be as intuitive when initially looking at the penalty terms themselves. It becomes easier to see when dealing with the solutions to the coefficient estimates. Without going into too much mathematical detail, this is done by taking the derivative of the minimization function (objective function) and setting it equal to zero. From there we can determine the optimal solution for the estimated coefficients. In OLS regression the estimates for the coefficients can be shown to equal the following (in matrix form): \\[ \\hat{\\beta} = (X^TX)^{-1}X^TY \\] This changes in the presence of penalty terms. For ridge regression, the solution becomes the following: \\[ \\hat{\\beta} = (X^TX + \\lambda I)^{-1}X^TY \\] There is no value for \\(\\lambda\\) that can force the coefficients to be zero by itself. Therefore, unless the data makes the coefficient zero, the penalty term can only force the estimated coefficient to zero asymptotically as \\(\\lambda \\rightarrow \\infty\\). However, for LASSO, the solution becomes the following: \\[ \\hat{\\beta} = (X^TX)^{-1}(X^TY - \\lambda I) \\] Notice the distinct difference here. In this scenario, there is a possible penalty value (\\(\\lambda = X^TY\\)) that will force the estimated coefficients to equal zero. There is some benefit to this. This makes LASSO also function as a variable selection criteria as well. Let’s build a regularized regression for our Ames dataset using the LASSO approach. To build a LASSO regression we need separate data matrices for our predictors and our target variable just like we did for ridge. From there we use the glmnet function with the x = option where we specify the predictor model matrix and the y = option where we specify the target variable. The alpha = 1 option specifies that a LASSO regression will be used as defined in more detail below in the elastic net section. The plot function allows us to see the impact of the penalty on the coefficients in the model. ames_lasso &lt;- glmnet(x = train_x, y = train_y, alpha = 1) plot(ames_lasso, xvar = &quot;lambda&quot;) The glmnet function automatically standardizes the variables before fitting the regression model. This is important so that all of the variables are on the same scale before adjustments are made to the estimated coefficients. Even with this standardization we can see the large coefficient values for some of the variables. The top of the plot lists how many variables are in the model at each value of penalty. Notice as the penalty increases, the number of variables decreases as variables are forced to zero. What \\(\\lambda\\) term is best? That will be discussed in the optimizing section below, but let’s discuss the last possible penalty first - the combination of both ridge and LASSO. 6.1.4 Elastic Net Which approach is better, ridge or LASSO? Both have advantages and disadvantages. LASSO performs variable selection while ridge keeps all variables in the model. However, reducing the number of variables might impact minimum error. Also, if you have two correlated variables, which one LASSO chooses to zero out is relatively arbitrary to the context of the problem. Elastic nets were designed to take advantage of both penalty approaches. In elastic nets, we are using both penalties in the minimization: \\[ min(SSE + \\lambda_1 \\sum_{j=1}^p |\\hat{\\beta}_j| + \\lambda_2 \\sum_{j=1}^p \\hat{\\beta}^2_j) \\] In R, the glmnet function takes a slightly different approach to the elastic net implementation with the following: \\[ min(SSE + \\lambda[ \\alpha \\sum_{j=1}^p |\\hat{\\beta}_j| + (1-\\alpha) \\sum_{j=1}^p \\hat{\\beta}^2_j]) \\] R still has one penalty \\(\\lambda\\), however, it includes the \\(\\alpha\\) parameter to balance between the two penalty terms. This is why in glmnet, the alpha = 1 option gives a LASSO regression and alpha = 0 gives a ridge regression. Any value in between zero and one will provide an elastic net. Let’s build a regularized regression for our Ames dataset using the elastic net approach with an \\(\\alpha = 0.5\\). To build am elastic net we need separate data matrices for our predictors and our target variable just like we did for ridge and LASSO. From there we use the glmnet function with the x = option where we specify the predictor model matrix and the y = option where we specify the target variable. The alpha = 0.5 option specifies that an elastic net will be used since it is between zero and one. The plot function allows us to see the impact of the penalty on the coefficients in the model. ames_en &lt;- glmnet(x = train_x, y = train_y, alpha = 0.5) plot(ames_en, xvar = &quot;lambda&quot;) The glmnet function automatically standardizes the variables before fitting the regression model. This is important so that all of the variables are on the same scale before adjustments are made to the estimated coefficients. Even with this standardization we can see the large coefficient values for some of the variables. The top of the plot lists how many variables are in the model at each value of penalty. Notice as the penalty increases, the number of variables decreases as variables are forced to zero using the LASSO piece of the elastic net penalty. What \\(\\lambda\\) term is best? What is the proper balance between ridge and LASSO penalties when building an elastic net? That will be discussed in the following section. 6.1.5 Python Code Ridge Regression train = train[[&#39;Sale_Price&#39;, &#39;Lot_Area&#39;, &#39;Street&#39;, &#39;Bldg_Type&#39;, &#39;House_Style&#39;, &#39;Overall_Qual&#39;, &#39;Roof_Style&#39;, &#39;Central_Air&#39;, &#39;First_Flr_SF&#39;, &#39;Second_Flr_SF&#39;, &#39;Full_Bath&#39;, &#39;Half_Bath&#39;, &#39;Fireplaces&#39;, &#39;Garage_Area&#39;, &#39;Gr_Liv_Area&#39;, &#39;TotRms_AbvGrd&#39;]] train = train.fillna(0) test = test[[&#39;Sale_Price&#39;, &#39;Lot_Area&#39;, &#39;Street&#39;, &#39;Bldg_Type&#39;, &#39;House_Style&#39;, &#39;Overall_Qual&#39;, &#39;Roof_Style&#39;, &#39;Central_Air&#39;, &#39;First_Flr_SF&#39;, &#39;Second_Flr_SF&#39;, &#39;Full_Bath&#39;, &#39;Half_Bath&#39;, &#39;Fireplaces&#39;, &#39;Garage_Area&#39;, &#39;Gr_Liv_Area&#39;, &#39;TotRms_AbvGrd&#39;]] test = test.fillna(0) train_dummy = pd.get_dummies(train, columns = [&#39;Street&#39;, &#39;Bldg_Type&#39;, &#39;House_Style&#39;, &#39;Overall_Qual&#39;, &#39;Roof_Style&#39;, &#39;Central_Air&#39;]) print(train_dummy) y = train_dummy[&#39;Sale_Price&#39;] X = train_dummy.loc[:, train_dummy.columns != &#39;Sale_Price&#39;] ames_ridge = Ridge(alpha = 1.0).fit(X, y) n_alphas = 200 alphas = np.logspace(0.1, 5, n_alphas) coefs = [] for a in alphas: ridge = Ridge(alpha=a) ridge.fit(X, y) coefs.append(ridge.coef_) ax = plt.gca() ax.plot(alphas, coefs) ax.set_xscale(&quot;log&quot;) plt.xlabel(&quot;alpha&quot;) plt.ylabel(&quot;weights&quot;) plt.title(&quot;Ridge coefficients as a function of the regularization&quot;) plt.axis(&quot;tight&quot;) plt.show() LASSO Regression ames_lasso = Lasso(alpha = 2, max_iter = 5000).fit(X, y) n_alphas = 100 alphas2 = np.logspace(2, 5, n_alphas) coefs2 = [] for a in alphas2: lasso = Lasso(alpha = a, max_iter = 5000) lasso.fit(X, y) coefs2.append(lasso.coef_) plt.cla() ax2 = plt.gca() ax2.plot(alphas2, coefs2) ax2.set_xscale(&quot;log&quot;) plt.xlabel(&quot;alpha&quot;) plt.ylabel(&quot;weights&quot;) plt.title(&quot;LASSO coefficients as a function of the regularization&quot;) plt.axis(&quot;tight&quot;) plt.show() Elastic Net* ames_en = ElasticNet(alpha = 1, l1_ratio=0.5) n_alphas = 100 alphas3 = np.logspace(1, 8, n_alphas) coefs3 = [] for a in alphas3: en = ElasticNet(alpha = a, l1_ratio=0.5) en.fit(X, y) coefs3.append(en.coef_) plt.cla() ax3 = plt.gca() ax3.plot(alphas3, coefs3) ax3.set_xscale(&quot;log&quot;) plt.xlabel(&quot;alpha&quot;) plt.ylabel(&quot;weights&quot;) plt.title(&quot;ElasticNet coefficients as a function of the regularization&quot;) plt.axis(&quot;tight&quot;) plt.show() 6.2 Optimizing Penalties No matter the approach listed above, a penatly term \\(\\lambda\\) needs to be picked. However, we do not want to get caught overfitting our training data by minimizing the variance so much that it is not generalizable to the overall pattern and other similar data. Take the following plot: The red line is overfitted to the dataset and picks up too much of the unimportant pattern. The orange dotted line is underfit as it does not pick up enough of the pattern. The light blue, solid line is fit well to the dataset as it picks up the general pattern while not overfitting to the dataset. 6.2.1 Cross-Validation Cross-validation is a common approach in modeling to prevent overfitting of data when you need to tune a parameter. The idea of cross-validation is to split the training data into multiple pieces, build the model on a majority of the pieces while evaluating it on the remaining piece. Then we do the same process again, but switch out which pieces the model is built and evaluated on. A common cross-validation (CV) approach is the \\(k\\)-fold CV. In the \\(k\\)-fold CV approach, the model is built \\(k\\) times. The data is initially split into \\(k\\) equally sized pieces. Each time the model is built, it is built off of \\(k-1\\) pieces of the data and evaluated on the last piece. This process is repeated until each piece is left out for evaluation. This is diagrammed below in Figure 6.1. Figure 6.1: Example of a 10-fold Cross-Validation 6.2.2 CV in Regularized Regression In R, the cv.glmnet function will automatically implement a 10-fold CV (by default, but can be adjusted through options) to help evaluate and optimize the \\(\\lambda\\) values for our regularized regression models. Let’s perform an example using the LASSO regression. The cv.glmnet function takes the same inputs as the glmnet function above. Again, we will use the plot function, but this time we get a different plot. ames_lasso_cv &lt;- cv.glmnet(x = train_x, y = train_y, alpha = 1) plot(ames_lasso_cv) ames_lasso_cv$lambda.min ## [1] 49.69435 ames_lasso_cv$lambda.1se ## [1] 3588.334 The above plot shows the results from our cross-validation. Here the models are evaluated based on their mean-squared error (MSE). The MSE is defined as \\(\\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2\\). The \\(\\lambda\\) value that minimizes the MSE is 49.69435 (with a \\(\\log(\\lambda)\\) = 3.91). This is highlighted by the first, vertical dashed line. The second vertical dashed line is the largest \\(\\lambda\\) value that is one standard error above the minimum value. This value is especially useful in LASSO regressions. The largest \\(\\lambda\\) within one standard error would provide approximately the same MSE, but with a further reduction in the number of variables. Notice that to go from the first line to the second, the change in MSE is very small, but the reduction of variables is from 36 variables to around 12 variables. Let’s look at the impact on the coefficients under this penalty using the glmnet function as before. plot(ames_lasso, xvar = &quot;lambda&quot;) abline(v = log(ames_lasso_cv$lambda.1se), col = &quot;red&quot;, lty = &quot;dashed&quot;) abline(v = log(ames_lasso_cv$lambda.min), col = &quot;black&quot;, lty = &quot;dashed&quot;) To investigate which variables are important at a \\(\\lambda\\) value, we can view the coefficients using the coef function. They are ranked here: library(broom) coef(ames_lasso, s = ames_lasso_cv$lambda.1se) #%&gt;% ## 37 x 1 sparse Matrix of class &quot;dgCMatrix&quot; ## s1 ## (Intercept) 84886.87520 ## Lot_Area 0.34825 ## StreetPave . ## Bldg_TypeTwoFmCon . ## Bldg_TypeDuplex . ## Bldg_TypeTwnhs -32.78428 ## Bldg_TypeTwnhsE . ## House_StyleOne_and_Half_Unf . ## House_StyleOne_Story . ## House_StyleSFoyer . ## House_StyleSLvl . ## House_StyleTwo_and_Half_Fin . ## House_StyleTwo_and_Half_Unf . ## House_StyleTwo_Story . ## Overall_Qual.L 194210.25872 ## Overall_Qual.Q 106215.77903 ## Overall_Qual.C . ## Overall_Qual^4 . ## Overall_Qual^5 -3363.19922 ## Overall_Qual^6 . ## Overall_Qual^7 . ## Overall_Qual^8 . ## Overall_Qual^9 . ## Roof_StyleGable . ## Roof_StyleGambrel . ## Roof_StyleHip 2802.76818 ## Roof_StyleMansard . ## Roof_StyleShed . ## Central_AirY 10542.22209 ## First_Flr_SF 14.63109 ## Second_Flr_SF . ## Full_Bath 3700.51328 ## Half_Bath . ## Fireplaces 6361.93458 ## Garage_Area 43.01506 ## Gr_Liv_Area 33.04945 ## TotRms_AbvGrd . # broom::tidy() %&gt;% # filter(row != &quot;(Intercept)&quot;) %&gt;% # ggplot(aes(value, reorder(row, value))) + # geom_point() + # ggtitle(&quot;Influential Variables&quot;) + # xlab(&quot;Coefficient&quot;) + # ylab(NULL) The variable describing the overall quality of the home is the driving factor of this model as well as the other variables listed above. A similar approach can be taken for CV with ridge regression using the same structure of code. That will not be covered here. Elastic nets are more complicated in that they have multiple parameters to optimize. For that approach, an optimization grid will need to be structured to evaluate different \\(\\lambda\\) values across different \\(\\alpha\\) values. A loop can be set up to run the cv.glmnet function across many different values of \\(\\alpha\\). That will not be covered in detail here. 6.3 Model Comparisons Now we have multiple models built for our dataset. To help evaluate which model is better, we will use the test dataset as described in Chapter 2. The models we have built are nothing but formulas. All we have to do is put the test dataset in the formula to predict/score the test data. We do not rerun the algorithm as the goal is not to fit the test dataset, but to just score it. We need to make sure that we have the same structure to the test dataset that we do with the training dataset. Any variable transformations, new variable creations, and missing value imputations done on the training dataset must be done on the test dataset in the same way. 6.3.1 Model Metrics Once the predicted values are obtained from each model we need to evaluate good these predictions are. There are many different metrics to evaluate models depending on what type of target variable that you have. Some common metrics for continuous target variables are the square root of the mean squared error (RMSE), the mean absolute error (MAE), and mean absolute percentage error (MAPE). The RMSE is evaluated as follows: \\[ RMSE = \\sqrt {\\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2} \\] The RMSE is an approximation of the standard deviation of the prediction errors of the model. The downside of the RMSE is a lack of interpretability. The MAE is evaluated as follows: \\[ MAE = \\frac{1}{n} \\sum_{i=1}^n |y_i - \\hat{y}_i| \\] The MAE gives the average absolute difference between our predictions and the actual values. This is a symmetric measure with great interpretability. The main disadvantage of this metric is that it depends on the scale of the data. For comparing two models evaluated on the same data, this isn’t important. However, when comparing across different datasets, this may not be as helpful. For example, in temperature predictions, having an MAE of five degrees for a model built on Honolulu, Hawaii weather might not be comparable to a model built on weather in Raleigh, North Carolina. The MAPE is evaluated as follows: \\[ MAPE = 100 \\times \\frac{1}{n} \\sum_{i=1}^n |\\frac{y_i - \\hat{y}_i}{y_i}| \\] The MAPE gives the average absolute percentage difference between our predictions and the actual values. This metric is very interpretable and not dependent on the scale of the data. However, it is not symmetric like the MAE. 6.3.2 Test Dataset Comparison The final model we had from Chapter 5 had the variables . From this model we can use the predict function with the newdata = option to use score the test dataset. test$pred_lm &lt;- predict(ames_lm, newdata = test) head(test$pred_lm) ## 1 2 3 4 5 6 ## 142107.3 142107.3 228909.6 142107.3 142107.3 142107.3 To get predictions from the regularized regression models, a \\(\\lambda\\) value must be selected. For the previous LASSO regression we will choose the largest \\(\\lambda\\) value within one standard error of the minimum \\(\\lambda\\) value to help reduce the number of variables. Again, we will use the predict function. The s = option is where we input the \\(\\lambda\\) value. The newx = option is where we specify the test dataset. test_reg$pred_lasso &lt;- predict(ames_lasso, s = ames_lasso_cv$lambda.1se, newx = test_x) head(test_reg$pred_lasso) ## s1 ## 1 156677.8 ## 2 172432.5 ## 3 239922.1 ## 4 105713.6 ## 5 200908.8 ## 6 124913.5 Now we need to calculate the MAE and MAPE for each model for comparison. test %&gt;% mutate(lm_APE = 100*abs((Sale_Price - pred_lm)/Sale_Price)) %&gt;% dplyr::summarise(MAPE_lm = mean(lm_APE)) ## # A tibble: 1 × 1 ## MAPE_lm ## &lt;dbl&gt; ## 1 23.2 test_reg %&gt;% mutate(lasso_APE = 100*abs((Sale_Price - pred_lasso)/Sale_Price)) %&gt;% dplyr::summarise(MAPE_lasso = mean(lasso_APE)) ## # A tibble: 1 × 1 ## MAPE_lasso ## &lt;dbl&gt; ## 1 13.4 From the above results, the linear regression from LASSO has a lower MAPE. Once we have scored models with the test dataset, we should not go back to try and rebuild any models. We will use the model with the lowest MAE or MAPE. This number is also the number that we report on how well our model performs. No metrics on the training dataset should be reported for the performance of the model. 6.3.3 Python Code CV in Regularized Regression from sklearn.linear_model import LassoCV ames_lasso2 = LassoCV(cv = 10, random_state = 0).fit(X, y) ames_lasso2.alpha_ import time from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LassoLarsIC from sklearn.pipeline import make_pipeline start_time = time.time() model = make_pipeline(StandardScaler(), LassoCV(cv = 10)).fit(X, y) fit_time = time.time() - start_time lasso = model[-1] plt.semilogx(lasso.alphas_, lasso.mse_path_, linestyle=&quot;:&quot;) plt.plot( lasso.alphas_, lasso.mse_path_.mean(axis=-1), color=&quot;black&quot;, label=&quot;Average across the folds&quot;, linewidth=2, ) plt.axvline(lasso.alpha_, linestyle=&quot;--&quot;, color=&quot;black&quot;, label=&quot;alpha: CV estimate&quot;) plt.xlabel(r&quot;$\\alpha$&quot;) plt.ylabel(&quot;Mean square error&quot;) plt.legend() _ = plt.title( f&quot;Mean square error on each fold: coordinate descent (train time: {fit_time:.2f}s)&quot; ) plt.show() "],["categorical-data-analysis.html", "Chapter 7 Categorical Data Analysis 7.1 Describing Categorical Data 7.2 Tests of Association 7.3 Measures of Association 7.4 Introduction to Logistic Regression", " Chapter 7 Categorical Data Analysis Everything analysis covered so far has used a continuous variable as a target variable of interest. What if our target variable was categorical instead of continuous? Our analysis must change to adjust. This Chapter aims to answer the following questions: How do you explore categorical variables? Nominal vs. Ordinal Tests of Association Measures of Association How do you model a categorical target variable? Logistic Regression Interpreting Logistic Regression Assessing Logistic Regression 7.1 Describing Categorical Data We need to first explore our data before building any models to try and explain/predict our categorical target variable. With categorical variables, we can look at the distribution of the categories as well as see if this distribution has any association with other variables. For this analysis we are going to still use our Ames housing data. Imagine you worked for a real estate agency and got a bonus check if you sold a house above $175,000 in value. Let’s create this variable in our data: library(dplyr) train &lt;- train %&gt;% mutate(Bonus = ifelse(Sale_Price &gt; 175000, 1, 0)) You are interested in what variables might be associated with obtaining a higher chance of getting a bonus (selling a house above $175,000). An association exists between two categorical variables if the distribution of one variable changes when the value of the other categorical changes. If there is no association, the distribution of the first variable is the same regardless of the value of the other variable. For example, if we wanted to know if obtaining a bonus on selling a house in Ames, Iowa was associated with whether the house had central air we could look at the distribution of bonus eligible houses. If we observe that 42% of homes with central air are bonus eligible and 42% of homes without central air are bonus eligible, then it appears that central air has no bearing on whether the home is bonus eligible. However, if instead we observe that only 3% of homes without central air are bonus eligible, but 44% of home with central air are bonus eligible, then it appears that having central air might be related to a home being bonus eligible. To understand the distribution of categorical variables we need to look at frequency tables. A frequency table shows the number of observations that occur in certain categories or intervals. A one way frequency table examines all the categories of one variable. These are easily visualized with bar charts. Let’s look at the distribution of both bonus eligibility and central air using the table function. The ggplot function with the geom_bar function allows us to view our data in a bar chart. table(train$Bonus) ## ## 0 1 ## 1187 864 ggplot(data = train) + geom_bar(mapping = aes(x = Bonus)) table(train$Central_Air) ## ## N Y ## 139 1912 ggplot(data = train) + geom_bar(mapping = aes(x = Central_Air)) Frequency tables show single variables, but if we want to explore two variables together we look at cross-tabulation tables. A cross-tabulation table shows the number of observations for each combination of the row and column variables. Let’s again examine bonus eligibility, but this time across levels of central air. Again, we can use the table function. The prop.table function allows us to compare two variables in terms of proportions instead of frequencies. table(train$Central_Air, train$Bonus) ## ## 0 1 ## N 132 7 ## Y 1055 857 prop.table(table(train$Central_Air, train$Bonus)) ## ## 0 1 ## N 0.064358849 0.003412969 ## Y 0.514383228 0.417844954 ggplot(data = train) + geom_bar(mapping = aes(x = Bonus, fill = Central_Air)) From the above output we can see that 147 homes have no central air with only 5 of them being bonus eligible. However, there are 1904 homes that have central air with 835 of them being bonus eligible. For an even more detailed breakdown we can use the CrossTable function. library(gmodels) CrossTable(train$Central_Air, train$Bonus) ## ## ## Cell Contents ## |-------------------------| ## | N | ## | Chi-square contribution | ## | N / Row Total | ## | N / Col Total | ## | N / Table Total | ## |-------------------------| ## ## ## Total Observations in Table: 2051 ## ## ## | train$Bonus ## train$Central_Air | 0 | 1 | Row Total | ## ------------------|-----------|-----------|-----------| ## N | 132 | 7 | 139 | ## | 33.040 | 45.392 | | ## | 0.950 | 0.050 | 0.068 | ## | 0.111 | 0.008 | | ## | 0.064 | 0.003 | | ## ------------------|-----------|-----------|-----------| ## Y | 1055 | 857 | 1912 | ## | 2.402 | 3.300 | | ## | 0.552 | 0.448 | 0.932 | ## | 0.889 | 0.992 | | ## | 0.514 | 0.418 | | ## ------------------|-----------|-----------|-----------| ## Column Total | 1187 | 864 | 2051 | ## | 0.579 | 0.421 | | ## ------------------|-----------|-----------|-----------| ## ## The advantage of the CrossTable function is that we can easily get not only the frequencies, but the cell, row, and column proportions. For example, the third number in each cell gives us the row proportion. For homes without central air, 96.6% of them are not bonus eligible, while 3.4% of them are. For homes with central air, 56.1% of the homes are not bonus eligible, while 43.9% of them are. This would appear that the distribution of bonus eligible homes changes across levels of central air - a relationship between the two variables. This expected relationship needs to be tested statistically for verification. 7.1.1 Python Code train[&#39;Bonus&#39;] = np.where(train[&#39;Sale_Price&#39;] &gt; 175000, 1, 0) train[&#39;Bonus&#39;].value_counts() ax = sns.countplot(x = &quot;Bonus&quot;, data = train, color = &quot;blue&quot;) ax.set(xlabel = &#39;Bonus Eligible&#39;, ylabel = &#39;Frequency&#39;, title = &#39;Bar Graph of Bonus Eligibility&#39;) plt.show() train[&#39;Central_Air&#39;].value_counts() plt.cla() ax = sns.countplot(x = &quot;Central_Air&quot;, data = train, color = &quot;blue&quot;) ax.set(xlabel = &#39;Central Air&#39;, ylabel = &#39;Frequency&#39;, title = &#39;Bar Graph of Central Air Availability&#39;) plt.show() plt.cla() ax = sns.countplot(x = &quot;Bonus&quot;, data = train, hue = &quot;Central_Air&quot;) ax.set(xlabel = &#39;Central Air&#39;, ylabel = &#39;Frequency&#39;, title = &#39;Bar Graph of Central Air Availability&#39;) plt.show() pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;]) 7.2 Tests of Association Much like in Chapter 2 we have statistical tests to evaluate relationships between two categorical variables. The null hypothesis for these statistical tests is that the two variables have no association - the distribution of one variable does not change across levels of another variable. The alternative hypothesis is an association between the two variables - the distribution of one variable changes across levels of another variable. These statistical tests follow a \\(\\chi^2\\)-distribution. The \\(\\chi^2\\)-distribution is a distribution that has the following characteristics: Bounded below by 0 Right-skewed One set of degrees of freedom A plot of a variety of \\(\\chi^2\\)-distributions is shown here: Two common \\(\\chi^2\\) tests are the Pearson and Likelihood Ratio \\(\\chi^2\\) tests. They compare the observed count of observations in each cell of a cross-tabulation table between two variables to their expected count if there was no relationship. The expected cell count applies the overall distribution of one variable across all the levels of the other variable. For example, overall 59% of all homes are not bonus eligible. If that were to apply to every level of central air, then the 140 homes without central air would be expected to have 86.73 ( $ = 147 $ ) of them would be bonus eligible while 60.27 ( $ = 147 $ ) of them would not be bonus eligible. We actually observe 142 and 5 homes for each of these categories respectively. The further the observed data is from the expected data, the more evidence we have that there is a relationship between the two variables. The test statistic for the Pearson \\(\\chi^2\\) test is the following: \\[ \\chi^2_P = \\sum_{i=1}^R \\sum_{j=1}^C \\frac{(Obs_{i,j} - Exp_{i,j})^2}{Exp_{i,j}} \\] From the equation above, the closer that the observed count of each cross-tabulation table cell to the expected count, the smaller the test statistic. As with all previous hypothesis tests, the smaller the test statistic, the larger the p-value, implying less evidence for the alternative hypothesis. Let’s examine the relationship between central air and bonus eligibility using the chisq.test function. chisq.test(table(train$Central_Air, train$Bonus)) ## ## Pearson&#39;s Chi-squared test with Yates&#39; continuity ## correction ## ## data: table(train$Central_Air, train$Bonus) ## X-squared = 82.509, df = 1, p-value &lt; 2.2e-16 The above results shows an extremely small p-value that is below any reasonable significance level. This implies that we have statistical evidence for a relationship between having central air and bonus eligibility of homes. The p-value comes from a \\(\\chi^2\\)-distribution with degrees of freedom that equal the product of the number of rows minus one and the number of columns minus one. Another common test is the Likelihood Ratio test. The test statistic for this is the following: \\[ \\chi^2_L = 2 \\times \\sum_{i=1}^R \\sum_{j=1}^C Obs_{i,j} \\times \\log(\\frac{Obs_{i,j}}{Exp_{i,j}}) \\] The p-value comes from a \\(\\chi^2\\)-distribution with degrees of freedom that equal the product of the number of rows minus one and the number of columns minus one. Both of the above tests have a sample size requirement. The sample size requirement is 80% or more of the cells in the cross-tabulation table need expected count larger than 5. For smaller sample sizes, this might be hard to meet. In those situations, we can use a more computationally expensive test called Fisher’s exact test. This test calculates every possible permutation of the data being evaluated to calculate the p-value without any distributional assumptions. To perform this test we can use the fisher.test function. fisher.test(table(train$Central_Air, train$Bonus)) ## ## Fisher&#39;s Exact Test for Count Data ## ## data: table(train$Central_Air, train$Bonus) ## p-value &lt; 2.2e-16 ## alternative hypothesis: true odds ratio is not equal to 1 ## 95 percent confidence interval: ## 7.170439 39.018479 ## sample estimates: ## odds ratio ## 15.30751 We see the same results as with the Pearson test because the assumptions were met for sample size. Both the Pearson and Likelihood Ratio \\(\\chi^2\\) tests can handle any type of categorical variable either ordinal, nominal, or both. However, ordinal variables provide us extra information since the order of the categories actually matters compared to nominal. We can test for even more with ordinal variables against other ordinal variables whether two ordinal variables have a linear relationship as compared to just a general one. An ordinal test for association is the Mantel-Haenszel \\(\\chi^2\\) test. The test statistic for the Mantel-Haenszel \\(\\chi^2\\) test is the following: \\[ \\chi^2_{MH} = (n-1)r^2 \\] where \\(r^2\\) is the Pearson correlation between the column and row variables. This test follows a \\(\\chi^2\\)-distribution with only one degree of freedom. Since both the central air and bonus eligibility variables are binary, they are ordinal. Since they are both ordinal, we should use the Mantel-Haenszel \\(\\chi^2\\) test with the CMHtest function. In the main output table, the first row is the Mantel-Haenszel \\(\\chi^2\\) test. library(vcdExtra) CMHtest(table(train$Central_Air, train$Bonus))$table[1,] ## Chisq Df Prob ## 8.409247e+01 1.000000e+00 4.721656e-20 From here we can see another extremely small p-value as we saw in earlier, more general \\(\\chi^2\\) tests. 7.2.1 Python Code from scipy.stats import chi2_contingency chi2_contingency(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;]), correction = True) from scipy.stats import fisher_exact fisher_exact(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;])) No real Mantel-Haenszel options in Python that work for anything more than a 2x2 table so I wouldn’t trust them. 7.3 Measures of Association Tests of association are best designed for just that, testing the existence of an association between two categorical variables. However, just like we saw in Chapter 1.1, hypothesis tests are impacted by sample size. When we have the same sample size, tests of association can rank significance of variables with p-values. However, when sample sizes are not the same between two tests, the tests of association are not best for comparing the strength of an association. In those scenarios, we have measures of strength of association that can be compared across any sample size. Measures of association were not designed to test if an association exists, as that is what statistical testing is for. They are designed to measure the strength of association. There are dozens of these measures. Three of the most common are the following: Odds Ratios (only for comparing two binary variables) Cramer’s V (able to compare nominal variables with any number of categories) Spearman’s Correlation (able to compare ordinal variables with any number of categories) An odds ratio indicates how much more likely, with respect to odds, a certain event occurs in one group relative to its occurrence in another group. The odds of an event occurring is not the same as the probability that an event occurs. The odds of an event occurring is the probability the event occurs divided by the probability that event does not occur. \\[ Odds = \\frac{p}{1-p} \\] Let’s again examine the cross-tabulation table between central air and bonus eligibility. ## ## ## Cell Contents ## |-------------------------| ## | N | ## | Chi-square contribution | ## | N / Row Total | ## | N / Col Total | ## | N / Table Total | ## |-------------------------| ## ## ## Total Observations in Table: 2051 ## ## ## | train$Bonus ## train$Central_Air | 0 | 1 | Row Total | ## ------------------|-----------|-----------|-----------| ## N | 132 | 7 | 139 | ## | 33.040 | 45.392 | | ## | 0.950 | 0.050 | 0.068 | ## | 0.111 | 0.008 | | ## | 0.064 | 0.003 | | ## ------------------|-----------|-----------|-----------| ## Y | 1055 | 857 | 1912 | ## | 2.402 | 3.300 | | ## | 0.552 | 0.448 | 0.932 | ## | 0.889 | 0.992 | | ## | 0.514 | 0.418 | | ## ------------------|-----------|-----------|-----------| ## Column Total | 1187 | 864 | 2051 | ## | 0.579 | 0.421 | | ## ------------------|-----------|-----------|-----------| ## ## Let’s look at the row without central air. The probability that a home without central air is not bonus eligible is 96.6%. That implies that the odds of not being bonus eligible in homes without central air is 28.41 (= 0.966/0.034). For homes with central air, the odds of not being bonus eligible are 1.28 (= 0.561/0.439). The odds ratio between these two would be approximately 22.2 (= 28.41/1.28). In other words, homes without central air are 22.2 times more likely (in terms of odds) to not be bonus eligible as compared to homes with central air. This relationship is intuitive based on the numbers we have seen. Without going into details, it can also be shown that homes with central air are 22.2 times as likely (in terms of odds) to be bonus eligible. We can use the OddsRatio function to get these same results. library(DescTools) OddsRatio(table(train$Central_Air, train$Bonus)) ## [1] 15.31808 Cramer’s V is another measure of strength of association. Cramer’s V is calculated as follows: \\[ V = \\sqrt{\\frac{\\chi^2_P/n}{\\min(Rows-1, Columns-1)}} \\] Cramer’s V is bounded between 0 and 1 for every comparison other than two binary variables. For two binary variables being compared the bounds are -1 to 1. The idea is still the same for both. The further the value is from 0, the stronger the relationship. Unfortunately, unlike \\(R^2\\), Cramer’s V has no interpretative value. It can only be used for comparison. We use the assocstats function to get the Cramer’s V value. This function also provides the Pearson and Likelihood Ratio \\(\\chi^2\\) tests as well. assocstats(table(train$Central_Air, train$Bonus)) ## X^2 df P(&gt; X^2) ## Likelihood Ratio 106.675 1 0 ## Pearson 84.133 1 0 ## ## Phi-Coefficient : 0.203 ## Contingency Coeff.: 0.199 ## Cramer&#39;s V : 0.203 Lastly, we have Spearman’s correlation. Much like the Mantel-Haenszel test of association was specifically designed for comparing two ordinal variables, Spearman correlation measures the strength of association between two ordinal variables. Spearman is not limited to only categorical data analysis as it was also seen back in Chapter 5 with detecting heteroskedasticity. Remember, Spearman correlation is a correlation on the ranks of the observations as compared to the actual values of the observations. The cor.test function that gave us Pearson’s correlation also provides Spearman’s correlation. cor.test(x = as.numeric(ordered(train$Central_Air)), y = as.numeric(ordered(train$Bonus)), method = &quot;spearman&quot;) ## ## Spearman&#39;s rank correlation rho ## ## data: x and y ## S = 1146718629, p-value &lt; 2.2e-16 ## alternative hypothesis: true rho is not equal to 0 ## sample estimates: ## rho ## 0.2025357 As previously mentioned, these are only a few of the dozens of different measures of association that exist. However, they are the most used ones. 7.3.1 Python Code Odds Ratios are the statistic calculated from the Fisher’s Exact test from the previous code: from scipy.stats import fisher_exact fisher_exact(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;])) from scipy.stats import fisher_exact fisher_exact(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;])) from scipy.stats.contingency import association association(pd.crosstab(index = train[&#39;Central_Air&#39;], columns = train[&#39;Bonus&#39;]), method = &quot;cramer&quot;) from scipy.stats import spearmanr spearmanr(train[&#39;Central_Air&#39;], train[&#39;Bonus&#39;]) 7.4 Introduction to Logistic Regression After exploring the categorical target variable, we can move on to modeling the categorical target variable. Logistic regression is a fundamental statistical analysis for data science and analytics. It part of a class of modeling techniques known as classification models since they are trying to predict categorical target variables. This target variable can be binary, ordinal, or even nominal in its structure. The primary focus will be binary logistic regression. It is the most common type of logistic regression, and sets up the foundation for both ordinal and nominal logistic regression. Ordinary least squares regression is not the best approach to modeling categorical target variables. Mathematically, it can be shown that with a binary target variable coded as 0 and 1, an OLS linear regression model will produce the linear probability model. 7.4.1 Linear Probability Model The linear probability model is not as widely used since probabilities do not tend to follow the properties of linearity in relation to their predictors. Also, the linear probability model possibly produces predictions outside of the bounds of 0 and 1 (where probabilities should be!). For completeness sake however, here is the linear probability model using the lm function to try and predict bonus eligibility. lp.model &lt;- lm(Bonus ~ Gr_Liv_Area, data = train) with(train, plot(x = Gr_Liv_Area, y = Bonus, main = &#39;OLS Regression?&#39;, xlab = &#39;Greater Living Area (Sqft)&#39;, ylab = &#39;Bonus Eligibility&#39;)) abline(lp.model) Even though it doesn’t appear to really look like our data, let’s fit this linear probability model anyway for completeness sake. lp.model &lt;- lm(Bonus ~ Gr_Liv_Area, data = train) summary(lp.model) ## ## Call: ## lm(formula = Bonus ~ Gr_Liv_Area, data = train) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.32077 -0.27657 -0.08698 0.36907 0.88491 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -4.758e-01 2.737e-02 -17.39 &lt;2e-16 *** ## Gr_Liv_Area 5.981e-04 1.731e-05 34.56 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.3926 on 2049 degrees of freedom ## Multiple R-squared: 0.3682, Adjusted R-squared: 0.3679 ## F-statistic: 1194 on 1 and 2049 DF, p-value: &lt; 2.2e-16 qqnorm(rstandard(lp.model), ylab = &quot;Standardized Residuals&quot;, xlab = &quot;Normal Scores&quot;, main = &quot;QQ-Plot of Residuals&quot;) qqline(rstandard(lp.model)) plot(predict(lp.model), resid(lp.model), ylab=&quot;Residuals&quot;, xlab=&quot;Predicted Values&quot;, main=&quot;Residuals of Linear Probability Model&quot;) abline(0, 0) As we can see from the charts above, the assumptions of ordinary least squares don’t really hold in this situation. Therefore, we should be careful interpreting the results of the model. Maybe a better model won’t have these problems? 7.4.2 Binary Logistic Regression Due to the limitations of the linear probability model, people typically just use the binary logistic regression model. The logistic regression model does not have the limitations of the linear probability model. The outcome of the logistic regression model is the probability of getting a 1 in a binary variable. That probability is calculated as follows: \\[ p_i = \\frac{1}{1+e^{-(\\beta_0 + \\beta_1x_{1,i} + \\cdots + \\beta_k x_{k,i})}} \\] This function has the desired properties for predicting probabilities. The predicted probability from the above equation will always be between 0 and 1. The parameter estimates do not enter the function linearly (this is a non-linear regression model), and the rate of change of the probability varies as the predictor variables vary as seen in Figure 7.1. Figure 7.1: Example of a Logistic Curve To create a linear model, a link function is applied to the probabilities. The specific link function for logistic regression is called the logit function. \\[ logit(p_i) = \\log(\\frac{p_i}{1-p_i}) = \\beta_0 + \\beta_1x_{1,i} + \\cdots + \\beta_k x_{k,i} \\] The relationship between the predictor variables and the logits are linear in nature as the logits themselves are unbounded. This structure looks much more like our linear regression model structure. However, logistic regression does not use OLS to estimate the coefficients in our model. OLS requires residuals which the logistic regression model does not provide. The target variable is binary in nature, but the predictions are probabilities. Therefore, we cannot calculate a traditional residual. Instead, logistic regression uses maximum likelihood estimation. This is not covered here. There are two main assumptions for logistic regression: Independence of observations Linearity of the logit The first assumption of independence is the same as we had for linear regression. The second assumption implies that the logistic function transformation (the logit) actually makes a linear relationship with our predictor variables. This assumption can be tested, but will not be covered in this brief introduction to logistic regression. Let’s build a logistic regression model. We will use the glm function to do this. The glm function has a similar structure to the lm function. The main difference is the family = binomial(link = \"logit\") option to specify that we are uses a logistic regression model. Again, there are many different link functions, but only the logistic link function (the logit) is being used here. ames_logit &lt;- glm(Bonus ~ Gr_Liv_Area, data = train, family = binomial(link = &quot;logit&quot;)) summary(ames_logit) ## ## Call: ## glm(formula = Bonus ~ Gr_Liv_Area, family = binomial(link = &quot;logit&quot;), ## data = train) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -6.7458627 0.2976119 -22.67 &lt;2e-16 *** ## Gr_Liv_Area 0.0042721 0.0001943 21.98 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2792.2 on 2050 degrees of freedom ## Residual deviance: 1822.8 on 2049 degrees of freedom ## AIC: 1826.8 ## ## Number of Fisher Scoring iterations: 5 Let’s examine the above output. Scanning down the output, you can see the actual logistic regression equation for the variable Gr_Liv_Area. Here we can see that it appears to be a significant variable at predicting bonus eligibility. However, the coefficient reported does not have the same usable interpretation as in linear regression. An increase of one unit of greater living area square footage is linearly related to the logit not the probability of bonus eligibility. We can transform this coefficient to make it more interpretable. A single unit increase in greater living area square footage does have a \\(100 \\times (e^\\hat{\\beta}-1)\\%\\) increase in the average odds of bonus eligibility. We can use a combination of the exp and coef functions to obtain this number. 100*(exp(cbind(coef(ames_logit), confint(ames_logit)))-1) ## Waiting for profiling to be done... ## 2.5 % 97.5 % ## (Intercept) -99.8824266 -99.9353803 -99.7923687 ## Gr_Liv_Area 0.4281269 0.3908381 0.4673827 In other words, every additional square foot in greater living area in the home leads to an average increase in odds of 0.385% to be bonus eligible. 7.4.3 Adding Categorical Variables Similar to linear regression as we learned in Chapter 3, logistic regression can have both continuous and categorical predictors for our categorical target variable. Let’s add both central air as well as number of fireplaces to our logistic regression model. ames_logit2 &lt;- glm(Bonus ~ Gr_Liv_Area + Central_Air + factor(Fireplaces), data = train, family = binomial(link = &quot;logit&quot;)) summary(ames_logit2) ## ## Call: ## glm(formula = Bonus ~ Gr_Liv_Area + Central_Air + factor(Fireplaces), ## family = binomial(link = &quot;logit&quot;), data = train) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.000e+01 6.341e-01 -15.771 &lt; 2e-16 *** ## Gr_Liv_Area 4.106e-03 2.141e-04 19.179 &lt; 2e-16 *** ## Central_AirY 3.026e+00 4.971e-01 6.088 1.15e-09 *** ## factor(Fireplaces)1 1.092e+00 1.292e-01 8.451 &lt; 2e-16 *** ## factor(Fireplaces)2 6.016e-01 2.419e-01 2.487 0.0129 * ## factor(Fireplaces)3 -4.183e-01 9.345e-01 -0.448 0.6544 ## factor(Fireplaces)4 8.676e+00 3.247e+02 0.027 0.9787 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 2792.2 on 2050 degrees of freedom ## Residual deviance: 1662.8 on 2044 degrees of freedom ## AIC: 1676.8 ## ## Number of Fisher Scoring iterations: 11 Just like with linear regression, categorical predictor variables are a comparison between two categories. Again, the coefficients from the logistic regression model need to be transformed to be interpreted. 100*(exp(cbind(coef(ames_logit2), confint(ames_logit2)))-1) ## 2.5 % 97.5 % ## (Intercept) -9.999547e+01 -99.9987897 -99.9852995 ## Gr_Liv_Area 4.114595e-01 0.3703791 0.4546903 ## Central_AirY 1.961924e+03 736.7096319 5882.6956323 ## factor(Fireplaces)1 1.978790e+02 131.4232518 284.0534117 ## factor(Fireplaces)2 8.250396e+01 13.6156598 193.6738150 ## factor(Fireplaces)3 -3.418652e+01 -89.1376591 419.4010973 ## factor(Fireplaces)4 5.860965e+05 -100.0000000 NA Let’s use the first fireplace variable as an example. A home with one fireplace has, on average, 167.04% higher odds of being bonus eligible as compared to a home with zero fireplaces. 7.4.4 Model Assessment There are dozens of different ways to evaluate a logistic regression model. We will cover one popular way here - concordance. Counting the number of concordant, discordant, and tied pairs is a way to to assess how well the model fits the data. To find concordant, discordant, and tied pairs, we must compare all of the 0’s in the target variable to all of the 1’s. For our example, we will compare every pair of homes where one home is bonus eligible and one is not (every 0 and 1 pair). A concordant pair is a 0 and 1 pair where the bonus eligible home (the 1 in our model) has a higher predicted probability than the non-bonus eligible home (the 0 in our model) - our model successfully ordered these two observations by probability. It does not matter what the actual predicted probability values are as long as the bonus eligible home has a higher predicted probability than the non-bonus eligible home. A discordant pair is a 0 and 1 pair where the bonus eligible home (the 1 in our model) has a lower predicted probability than the non-bonus eligible home (the 0 in our model) - our model unsuccessfully ordered the homes. It does not matter what the actual predicted probability values are as long as the bonus eligible home has a lower predicted probability than the non-bonus eligible home. A tied pair is a 0 and 1 pair where the bonus eligible home has the same predicted probability as the non-bonus eligible home - the model is confused and sees these two different things as the same. In general, you want a high percentage of concordant pairs and low percentages of discordant and tied pairs. We can use the Concordance function to obtain these values on our predictions from the predict function. library(survival) survival::concordance(ames_logit) ## Call: ## concordance.lm(object = ames_logit) ## ## n= 2051 ## Concordance= 0.8765 se= 0.007326 ## concordant discordant tied.x tied.y tied.xy ## 898616 126370 582 1074637 2070 From the above output we have a concordance of 86.3% for our model. There is no good or bad value as this can only be compared with another model to see which is better. Let’s compare this to our model with the categorical variables. survival::concordance(ames_logit2) ## Call: ## concordance.lm(object = ames_logit2) ## ## n= 2051 ## Concordance= 0.8953 se= 0.006677 ## concordant discordant tied.x tied.y tied.xy ## 918066 107238 264 1075521 1186 We can see that the model with categorical predictors added to it has a higher concordance at 88.4%. That implies that our model is correctly able to rank our observations 88.4% of the time. This is NOT the same thing as saying our model is 88.4% accurate. Accuracy (which is not covered here) deals with a prediction being correct or incorrect. Concordance is only measuring how often we are able to predict 1’s with higher probability than 0’s - again, correctly ranking the observations. 7.4.5 Variable Selection and Regularized Regression As with linear regression in Chapters ?? and ??, logistic regression uses the same approaches to doing variable selection. In fact, the same function are used as well. Let’s use the step function to apply a forward and backward selection to the logistic regression model. train_sel_log &lt;- train %&gt;% dplyr::select(Bonus, Lot_Area, Street, Bldg_Type, House_Style, Overall_Qual, Roof_Style, Central_Air, First_Flr_SF, Second_Flr_SF, Full_Bath, Half_Bath, Fireplaces, Garage_Area, Gr_Liv_Area, TotRms_AbvGrd) %&gt;% replace(is.na(.), 0) full.model &lt;- glm(Bonus ~ . , data = train_sel_log) empty.model &lt;- glm(Bonus ~ 1, data = train_sel_log) for.model &lt;- step(empty.model, scope = list(lower = formula(empty.model), upper = formula(full.model)), direction = &quot;forward&quot;, k = log(dim(train_sel_log)[1])) ## Start: AIC=2935.31 ## Bonus ~ 1 ## ## Df Deviance AIC ## + Overall_Qual 9 232.38 1432.3 ## + Gr_Liv_Area 1 315.90 2001.0 ## + Full_Bath 1 322.17 2041.3 ## + Garage_Area 1 362.92 2285.6 ## + First_Flr_SF 1 384.98 2406.6 ## + TotRms_AbvGrd 1 414.37 2557.5 ## + Fireplaces 1 415.58 2563.5 ## + Half_Bath 1 458.95 2767.1 ## + House_Style 7 449.42 2769.8 ## + Second_Flr_SF 1 459.79 2770.8 ## + Lot_Area 1 474.11 2833.8 ## + Central_Air 1 479.52 2857.0 ## + Bldg_Type 4 483.24 2895.8 ## &lt;none&gt; 500.03 2935.3 ## + Street 1 499.16 2939.4 ## + Roof_Style 5 494.32 2949.9 ## ## Step: AIC=1432.29 ## Bonus ~ Overall_Qual ## ## Df Deviance AIC ## + Gr_Liv_Area 1 201.93 1151.8 ## + Full_Bath 1 203.53 1168.0 ## + First_Flr_SF 1 214.05 1271.3 ## + Lot_Area 1 216.67 1296.3 ## + TotRms_AbvGrd 1 219.78 1325.5 ## + Fireplaces 1 220.87 1335.7 ## + Garage_Area 1 221.72 1343.5 ## + Bldg_Type 4 225.06 1397.1 ## + Second_Flr_SF 1 228.07 1401.5 ## + Half_Bath 1 229.45 1413.9 ## + Central_Air 1 231.20 1429.5 ## &lt;none&gt; 232.38 1432.3 ## + Street 1 232.38 1439.9 ## + House_Style 7 227.39 1441.1 ## + Roof_Style 5 231.04 1458.5 ## ## Step: AIC=1151.82 ## Bonus ~ Overall_Qual + Gr_Liv_Area ## ## Df Deviance AIC ## + Full_Bath 1 192.70 1063.5 ## + Lot_Area 1 195.87 1097.0 ## + First_Flr_SF 1 195.95 1097.8 ## + Second_Flr_SF 1 196.64 1105.0 ## + House_Style 7 192.48 1106.9 ## + Garage_Area 1 197.51 1114.1 ## + Fireplaces 1 198.62 1125.6 ## + Bldg_Type 4 198.14 1143.5 ## + TotRms_AbvGrd 1 200.64 1146.3 ## + Central_Air 1 200.72 1147.2 ## &lt;none&gt; 201.93 1151.8 ## + Half_Bath 1 201.75 1157.6 ## + Street 1 201.91 1159.2 ## + Roof_Style 5 200.63 1176.7 ## ## Step: AIC=1063.48 ## Bonus ~ Overall_Qual + Gr_Liv_Area + Full_Bath ## ## Df Deviance AIC ## + Lot_Area 1 186.26 1001.4 ## + First_Flr_SF 1 187.37 1013.6 ## + Fireplaces 1 187.77 1018.0 ## + Second_Flr_SF 1 187.92 1019.6 ## + Bldg_Type 4 186.51 1027.1 ## + House_Style 7 185.13 1034.7 ## + Garage_Area 1 189.34 1035.0 ## + TotRms_AbvGrd 1 190.75 1050.3 ## + Central_Air 1 191.66 1060.0 ## &lt;none&gt; 192.70 1063.5 ## + Half_Bath 1 192.65 1070.6 ## + Street 1 192.67 1070.8 ## + Roof_Style 5 191.44 1088.1 ## ## Step: AIC=1001.43 ## Bonus ~ Overall_Qual + Gr_Liv_Area + Full_Bath + Lot_Area ## ## Df Deviance AIC ## + Fireplaces 1 182.91 971.79 ## + First_Flr_SF 1 182.96 972.34 ## + Second_Flr_SF 1 183.35 976.69 ## + Bldg_Type 4 181.35 977.07 ## + Garage_Area 1 183.95 983.40 ## + House_Style 7 180.20 986.97 ## + TotRms_AbvGrd 1 184.44 988.88 ## + Central_Air 1 185.43 999.86 ## &lt;none&gt; 186.26 1001.43 ## + Half_Bath 1 186.02 1006.36 ## + Street 1 186.12 1007.46 ## + Roof_Style 5 185.31 1029.05 ## ## Step: AIC=971.79 ## Bonus ~ Overall_Qual + Gr_Liv_Area + Full_Bath + Lot_Area + Fireplaces ## ## Df Deviance AIC ## + Garage_Area 1 180.58 953.15 ## + First_Flr_SF 1 180.59 953.22 ## + Bldg_Type 4 178.81 955.84 ## + Second_Flr_SF 1 180.89 956.60 ## + TotRms_AbvGrd 1 181.41 962.48 ## + House_Style 7 177.49 963.48 ## &lt;none&gt; 182.91 971.79 ## + Central_Air 1 182.34 972.97 ## + Half_Bath 1 182.61 976.04 ## + Street 1 182.80 978.24 ## + Roof_Style 5 182.01 999.85 ## ## Step: AIC=953.15 ## Bonus ~ Overall_Qual + Gr_Liv_Area + Full_Bath + Lot_Area + Fireplaces + ## Garage_Area ## ## Df Deviance AIC ## + Bldg_Type 4 176.89 941.30 ## + First_Flr_SF 1 178.97 942.38 ## + Second_Flr_SF 1 179.19 944.87 ## + TotRms_AbvGrd 1 179.24 945.49 ## &lt;none&gt; 180.58 953.15 ## + House_Style 7 176.22 956.41 ## + Half_Bath 1 180.26 957.08 ## + Central_Air 1 180.33 957.94 ## + Street 1 180.44 959.21 ## + Roof_Style 5 179.47 978.59 ## ## Step: AIC=941.3 ## Bonus ~ Overall_Qual + Gr_Liv_Area + Full_Bath + Lot_Area + Fireplaces + ## Garage_Area + Bldg_Type ## ## Df Deviance AIC ## + First_Flr_SF 1 175.26 929.97 ## + Second_Flr_SF 1 175.51 932.90 ## + TotRms_AbvGrd 1 175.78 936.06 ## &lt;none&gt; 176.89 941.30 ## + House_Style 7 172.53 943.47 ## + Half_Bath 1 176.46 943.88 ## + Central_Air 1 176.82 948.09 ## + Street 1 176.84 948.38 ## + Roof_Style 5 175.65 964.96 ## ## Step: AIC=929.97 ## Bonus ~ Overall_Qual + Gr_Liv_Area + Full_Bath + Lot_Area + Fireplaces + ## Garage_Area + Bldg_Type + First_Flr_SF ## ## Df Deviance AIC ## + Half_Bath 1 173.16 912.81 ## + TotRms_AbvGrd 1 174.48 928.40 ## &lt;none&gt; 175.26 929.97 ## + Second_Flr_SF 1 175.00 934.56 ## + Central_Air 1 175.22 937.05 ## + Street 1 175.24 937.29 ## + House_Style 7 172.23 947.58 ## + Roof_Style 5 173.59 948.48 ## ## Step: AIC=912.81 ## Bonus ~ Overall_Qual + Gr_Liv_Area + Full_Bath + Lot_Area + Fireplaces + ## Garage_Area + Bldg_Type + First_Flr_SF + Half_Bath ## ## Df Deviance AIC ## + TotRms_AbvGrd 1 172.38 911.27 ## &lt;none&gt; 173.16 912.81 ## + Second_Flr_SF 1 173.05 919.20 ## + Street 1 173.14 920.27 ## + Central_Air 1 173.16 920.41 ## + Roof_Style 5 171.28 928.53 ## + House_Style 7 170.89 939.20 ## ## Step: AIC=911.27 ## Bonus ~ Overall_Qual + Gr_Liv_Area + Full_Bath + Lot_Area + Fireplaces + ## Garage_Area + Bldg_Type + First_Flr_SF + Half_Bath + TotRms_AbvGrd ## ## Df Deviance AIC ## &lt;none&gt; 172.38 911.27 ## + Second_Flr_SF 1 172.28 917.58 ## + Street 1 172.37 918.68 ## + Central_Air 1 172.38 918.86 ## + Roof_Style 5 170.66 928.75 ## + House_Style 7 170.15 937.89 back.model &lt;- step(full.model, scope = list(lower = formula(empty.model), upper = formula(full.model)), direction = &quot;backward&quot;, k = log(dim(train_sel_log)[1])) ## Start: AIC=974.27 ## Bonus ~ Lot_Area + Street + Bldg_Type + House_Style + Overall_Qual + ## Roof_Style + Central_Air + First_Flr_SF + Second_Flr_SF + ## Full_Bath + Half_Bath + Fireplaces + Garage_Area + Gr_Liv_Area + ## TotRms_AbvGrd ## ## Df Deviance AIC ## - House_Style 7 170.54 950.18 ## - Roof_Style 5 170.02 959.15 ## - Central_Air 1 168.12 966.66 ## - Gr_Liv_Area 1 168.12 966.69 ## - Street 1 168.14 966.86 ## - Second_Flr_SF 1 168.21 967.76 ## - First_Flr_SF 1 168.41 970.18 ## - TotRms_AbvGrd 1 168.72 973.92 ## &lt;none&gt; 168.12 974.27 ## - Garage_Area 1 168.91 976.23 ## - Half_Bath 1 169.43 982.57 ## - Fireplaces 1 169.77 986.72 ## - Bldg_Type 4 172.05 991.13 ## - Lot_Area 1 170.32 993.32 ## - Full_Bath 1 179.45 1100.39 ## - Overall_Qual 9 213.18 1392.69 ## ## Step: AIC=950.18 ## Bonus ~ Lot_Area + Street + Bldg_Type + Overall_Qual + Roof_Style + ## Central_Air + First_Flr_SF + Second_Flr_SF + Full_Bath + ## Half_Bath + Fireplaces + Garage_Area + Gr_Liv_Area + TotRms_AbvGrd ## ## Df Deviance AIC ## - Roof_Style 5 172.25 932.57 ## - Central_Air 1 170.54 942.56 ## - Street 1 170.55 942.68 ## - Gr_Liv_Area 1 170.56 942.80 ## - Second_Flr_SF 1 170.65 943.87 ## - First_Flr_SF 1 171.01 948.22 ## - TotRms_AbvGrd 1 171.16 950.06 ## &lt;none&gt; 170.54 950.18 ## - Garage_Area 1 171.55 954.72 ## - Fireplaces 1 171.96 959.55 ## - Bldg_Type 4 174.37 965.20 ## - Half_Bath 1 172.62 967.49 ## - Lot_Area 1 172.66 967.95 ## - Full_Bath 1 183.19 1089.31 ## - Overall_Qual 9 217.76 1382.84 ## ## Step: AIC=932.57 ## Bonus ~ Lot_Area + Street + Bldg_Type + Overall_Qual + Central_Air + ## First_Flr_SF + Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + ## Garage_Area + Gr_Liv_Area + TotRms_AbvGrd ## ## Df Deviance AIC ## - Central_Air 1 172.26 924.99 ## - Gr_Liv_Area 1 172.27 925.12 ## - Street 1 172.27 925.16 ## - Second_Flr_SF 1 172.37 926.28 ## - First_Flr_SF 1 172.68 929.96 ## &lt;none&gt; 172.25 932.57 ## - TotRms_AbvGrd 1 173.04 934.25 ## - Garage_Area 1 173.16 935.65 ## - Fireplaces 1 173.72 942.31 ## - Bldg_Type 4 175.89 944.95 ## - Half_Bath 1 174.13 947.17 ## - Lot_Area 1 174.55 952.09 ## - Full_Bath 1 185.08 1072.29 ## - Overall_Qual 9 219.97 1365.42 ## ## Step: AIC=924.99 ## Bonus ~ Lot_Area + Street + Bldg_Type + Overall_Qual + First_Flr_SF + ## Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + Garage_Area + ## Gr_Liv_Area + TotRms_AbvGrd ## ## Df Deviance AIC ## - Gr_Liv_Area 1 172.27 917.53 ## - Street 1 172.28 917.58 ## - Second_Flr_SF 1 172.37 918.68 ## - First_Flr_SF 1 172.68 922.36 ## &lt;none&gt; 172.26 924.99 ## - TotRms_AbvGrd 1 173.04 926.65 ## - Garage_Area 1 173.20 928.55 ## - Fireplaces 1 173.73 934.85 ## - Bldg_Type 4 175.95 938.01 ## - Half_Bath 1 174.18 940.14 ## - Lot_Area 1 174.56 944.66 ## - Full_Bath 1 185.16 1065.55 ## - Overall_Qual 9 220.04 1358.49 ## ## Step: AIC=917.53 ## Bonus ~ Lot_Area + Street + Bldg_Type + Overall_Qual + First_Flr_SF + ## Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + Garage_Area + ## TotRms_AbvGrd ## ## Df Deviance AIC ## - Street 1 172.29 910.11 ## &lt;none&gt; 172.27 917.53 ## - TotRms_AbvGrd 1 173.09 919.69 ## - Second_Flr_SF 1 173.18 920.72 ## - Garage_Area 1 173.22 921.20 ## - Fireplaces 1 173.75 927.37 ## - Bldg_Type 4 175.95 930.42 ## - Half_Bath 1 174.21 932.82 ## - Lot_Area 1 174.57 937.14 ## - First_Flr_SF 1 177.40 970.12 ## - Full_Bath 1 185.17 1058.01 ## - Overall_Qual 9 220.15 1351.85 ## ## Step: AIC=910.11 ## Bonus ~ Lot_Area + Bldg_Type + Overall_Qual + First_Flr_SF + ## Second_Flr_SF + Full_Bath + Half_Bath + Fireplaces + Garage_Area + ## TotRms_AbvGrd ## ## Df Deviance AIC ## &lt;none&gt; 172.29 910.11 ## - TotRms_AbvGrd 1 173.11 912.23 ## - Second_Flr_SF 1 173.21 913.37 ## - Garage_Area 1 173.23 913.67 ## - Fireplaces 1 173.77 920.00 ## - Bldg_Type 4 176.05 923.90 ## - Half_Bath 1 174.24 925.55 ## - Lot_Area 1 174.61 929.98 ## - First_Flr_SF 1 177.48 963.37 ## - Full_Bath 1 185.24 1051.18 ## - Overall_Qual 9 220.15 1344.27 In the above two approaches we used the BIC selection criteria. Here both forward and backward selection actually picked the same model. Let’s check the concordance of this model. #Concordance(train$Bonus, predict(back.model, type = &quot;response&quot;)) Not surprisingly, this model outperforms the previous model that we had with a concordance of 96.1%. Although not covered in detail here, regularized regression can also be applied to logistic regression to get a different view. This might be helpful with the multicollinearity present in these predictor variables. Again, we can use the glmnet function with the addition of a family = \"binomial\" option. 7.4.6 Python Code Linear Probability Model import statsmodels.formula.api as smf lp_model = smf.ols(&quot;Bonus ~ Gr_Liv_Area&quot;, data = train).fit() lp_model.summary() sm.api.qqplot(lp_model.resid) plt.show() train[&#39;pred_lp&#39;] = lp_model.predict() train[&#39;resid_lp&#39;] = lp_model.resid train[[&#39;Bonus&#39;, &#39;pred_lp&#39;, &#39;resid_lp&#39;]].head(n = 10) plt.cla() ax = sns.relplot(data = train, y = &quot;resid_lp&quot;, x = &quot;pred_lp&quot;) ax.set(ylabel = &#39;Residuals&#39;, xlabel = &#39;Predicted Probability of Bonus&#39;) plt.show() Binary Logistic Regression log_model = smf.logit(&quot;Bonus ~ Gr_Liv_Area&quot;, data = train).fit() log_model.summary() odds_ratio = 100*(np.exp(log_model.params) - 1) print(odds_ratio) Adding Categorical Variables log_model2 = smf.logit(&quot;Bonus ~ Gr_Liv_Area + C(Central_Air) + C(Fireplaces)&quot;, data = train).fit() log_model2.summary() odds_ratio = 100*(np.exp(log_model2.params) - 1) print(odds_ratio) Model Assessment Python doesn’t have concordant / discordant pair calculations. We will learn in Fall semester other metrics to evaluate a logistic regression model that Python does have. Variable Selection and Regularized Regression Python does NOT have nice capabilities to do variable selection automatically in statsmodels, scikitlearn, or scipy. All resources I can find involve downloading and installing a package (mlxtend) that is not included by default in anaconda or writing your own function. Scikit learn has something similar but uses the model’s coefficients (!!!) to select, not p-values. Scikit learn can do this by evaluating a metric on cross-validation, but that is not covered until machine learning in Fall 3. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
